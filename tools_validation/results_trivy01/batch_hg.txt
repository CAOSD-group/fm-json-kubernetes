
Report Summary

┌─────────────────────────────────────────────┬────────────┬───────────────────┐
│                   Target                    │    Type    │ Misconfigurations │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_ClusterRole_ClusterRoleBinding_1.yaml   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_ClusterRole_ClusterRoleBinding_1_1.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_ClusterRole_ClusterRoleBinding_1_2.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_ClusterRole_ClusterRoleBinding_2.yaml   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_ClusterRole_RoleBinding_1.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_ClusterRole_RoleBinding_2.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_Role_RoleBinding_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_Role_RoleBinding_1_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_Role_RoleBinding_1_2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_Role_RoleBinding_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_Role_RoleBinding_2_2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PSP_Role_RoleBinding_2_3.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV-vol.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PublicationService.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ PublicationService_1.yaml                   │ kubernetes │        13         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom_sa.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom_sa_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom_sa_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm1_2.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm1_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm1_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm1_5.yaml                       │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm2_2.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm2_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm2_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm2_5.yaml                       │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm3.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm3_2.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm3_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm3_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm3_5.yaml                       │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm4.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm4_2.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm4_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm4_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm4_5.yaml                       │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm5.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm5_2.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm5_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm5_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm5_5.yaml                       │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_2.yaml                        │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_5.yaml                        │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls1_2.yaml                   │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls1_3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls1_4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls1_5.yaml                   │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls2.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls2_2.yaml                   │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls2_3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls2_4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls2_5.yaml                   │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls3.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls3_2.yaml                   │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls3_3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls3_4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls3_5.yaml                   │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls4.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls4_2.yaml                   │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls4_3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls4_4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls4_5.yaml                   │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls5.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls5_2.yaml                   │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls5_3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls5_4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls5_5.yaml                   │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls_2.yaml                    │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls_3.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls_4.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus_vm_tls_5.yaml                    │ kubernetes │        37         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues2.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues2_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues2_3.yaml                          │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues2_4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues4.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues4_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues4_3.yaml                          │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues4_4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues_3.yaml                           │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promethues_4.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promoperator-cr.yaml                        │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promoperator-crb.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promoperator-depl.yaml                      │ kubernetes │         8         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promoperator-sa.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promoperator-svc.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promote-k3s_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promotionstrategy_editor_role.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promotionstrategy_viewer_role.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail-clusterrole.yaml                   │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail-clusterrolebinding.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail-config4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail-daemonset.yaml                     │ kubernetes │        14         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail-deployment.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail-deployment_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail-secret.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail-serviceaccount.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail10.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail10_1.yaml                           │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail10_2.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail10_3.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail10_4.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail4.yaml                              │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail4_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail4_2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail4_3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail4_4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail5.yaml                              │ kubernetes │        14         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail5_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail5_2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail5_3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail5_4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ promtail8.yaml                              │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prophet_model_deployment.yaml               │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proto.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proto1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prova1.yaml                                 │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provedcode-backend-deployment.yaml          │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provedcode-frontend-deployment.yaml         │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provedcode-ingress-hosts.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-app-deployment.yaml                │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-app.service.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-deployment.yaml                    │ kubernetes │        13         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-deployment1.yaml                   │ kubernetes │        13         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-deployment2.yaml                   │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-helm-incluster.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-helm-incluster_1.yaml              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-ingress.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-ingress1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-kubernetes-incluster.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-kubernetes-incluster1.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-kubernetes-incluster1_1.yaml       │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-kubernetes-incluster_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-kubernetes_2.yaml                  │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-service.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-service1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provider-service2.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provisioner.yaml                            │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ provisioner3.yaml                           │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr-config-pvc.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr-deployment.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr-ingress1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr-service.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr1_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr1_2.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr1_3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr1_4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr3_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr3_2.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr3_3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr3_4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr4.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr7_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr8_1.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prowlarr9_2.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox-ingress.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox5.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox5_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox5_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxmox_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-config.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-config_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-config_2.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-deploy.yaml                           │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-deploy1.yaml                          │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-example.yaml                          │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-example_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-override-args.yaml                    │ kubernetes │        34         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-override.yaml                         │ kubernetes │        48         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-pod.yaml                              │ kubernetes │        21         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-service1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-service2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-service3.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-service3_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-svc.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-volume-claim.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-volume-claim1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-volume.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-volume1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-with-exporter.yaml                    │ kubernetes │        33         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-with-exporter1.yaml                   │ kubernetes │        33         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-with-exporter2.yaml                   │ kubernetes │        33         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-with-exporter3.yaml                   │ kubernetes │        33         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-with-parser.yaml                      │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-with-parser1.yaml                     │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-with-parser2.yaml                     │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy-with-parser3.yaml                     │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy10.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy10_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy10_2.yaml                              │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy11.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy11_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy11_2.yaml                              │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy17.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy17_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy17_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy17_3.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy18.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy18_1.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy19.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy19_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy19_2.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy1_1.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy2.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy20.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy20_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy20_2.yaml                              │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy21.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy21_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy21_2.yaml                              │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy28.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy28_1.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy29.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy29_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy29_2.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy2_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy2_2.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy3.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy30.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy30_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy30_2.yaml                              │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy31.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy31_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy31_2.yaml                              │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy3_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy3_2.yaml                               │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy4.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy42.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy42_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy42_2.yaml                              │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy4_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy4_2.yaml                               │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy8.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy8_1.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy9.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy9_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy9_2.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_deployment.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_deployment1.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy1.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy10.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy11.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy2.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy3.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy4.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy5.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy6.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy7.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy8.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_envoy9.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_pod_deployment.yaml                   │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_pod_deployment_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_service1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxy_service3.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxycache_editor_role.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxycache_viewer_role.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxyless-custom-image.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxyless-custom-image_1.yaml               │ kubernetes │        50         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxyless.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ proxyless_1.yaml                            │ kubernetes │        34         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba2_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba2_2.yaml                              │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba2_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba2_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba2_5.yaml                              │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba4.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba5.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba5_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba5_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba_2.yaml                               │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ prueba_5.yaml                               │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pruner_editor_role.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pruner_editor_role1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pruner_viewer_role.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pruner_viewer_role1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-deployment.yaml                          │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-deployment1.yaml                         │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-deployment2.yaml                         │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-deployment3.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-service.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-service1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-service2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-service3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-service4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-service5.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-volume-ps-claim.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ps-volume-ps-claim_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psa-default-namespace.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psa1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psa1_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psa1_2.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-clusterrole134.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-clusterrolebinding132.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-permissive-clusterrole.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-permissive-clusterrole1.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-permissive-clusterrole2.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-restrictive-clusterrole.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-restrictive-clusterrole1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-restrictive-clusterrole2.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-restrictive-rolebinding.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-restrictive-rolebinding1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp-restrictive-rolebinding2.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp181.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp181_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp181_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp48.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp48_2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp48_3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_default1_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_default1_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_default_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_default_2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_pod.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_pod1.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_restricted1_1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_restricted1_2.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_restricted_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_restricted_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_role.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psp_role_binding.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-auth.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-auth_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-claim.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-claim1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-claim2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-claim3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-claim4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-claim5.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-claim6.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-claim7.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-claim8.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-client.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-deployment.yaml                        │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-deployment1.yaml                       │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-pv.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-pv1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-pv3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-pv4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-pv5.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-service.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-service1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-volume.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-volume1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-volume1_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-volume2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-volume2_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql-volume_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql.yaml                                   │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql1.yaml                                  │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql1_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql2.yaml                                  │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql2_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql3.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql3_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql3_2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql3_3.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql3_4.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ psql_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pss.yaml                                    │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ptheus-configmap.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ptheus-deployment.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ ptheus-service.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-image-deploy.yaml                    │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-ingress-2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-ingress.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-ingress1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-ingress2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-lb.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-lb1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-lb2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-lb3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public-sa.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ public1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ publicweb.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ publicweb_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ publisher-deployment.yaml                   │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ publisher-deployment_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ publisher_deployment.yaml                   │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ publisher_deployment1.yaml                  │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ publisher_service.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ publisher_service1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pull-never.yaml                             │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pull-secret.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pullingimageprivehub.yaml                   │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pullingimageprivehub_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pullpolicy-never.yaml                       │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pullpolicy.yaml                             │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pullrequest_editor_role.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pullrequest_viewer_role.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ punto03-deployment.yaml                     │ kubernetes │        34         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetboard.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetboard_1.yaml                          │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetca.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetca_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetca_2.yaml                             │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetdb.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetdb_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetdb_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetdb_3.yaml                             │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetserver.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetserver_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ puppetserver_2.yaml                         │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ push-dockerhub-image-to-local-registry.yaml │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pusher-wave-pusher-wave-clusterrole.yaml    │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pusher-wave-pusher-wave-crb.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pusher-wave-pusher-wave-deploy.yaml         │ kubernetes │        14         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pusher-wave-pusher-wave-sa.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pushgateway.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pushgateway1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pushgateway1_1.yaml                         │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pushgateway1_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pushgateway_1.yaml                          │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pushgateway_2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-0.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-01.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-11.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-12.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-21.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-250.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-3.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-3g.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-3g1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-6g.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-6g1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-app.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad1_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad2_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad3_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad4.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad4_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-bad_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-blobfuse-sample.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim-2g.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim-2g1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim-7g.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim-7g1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim-clarus.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim-clarus1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim-file.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim-hostpath-sample.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim10.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim13.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim15.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim17.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim18.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim19.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim20.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-claim9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-clarus.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-clarus1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-common.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-common_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-common_2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-common_3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-config.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-config1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-configGlpi.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-config_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-dags.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-dags_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-data-gitlab-postgresql-0.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-database.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-db.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-db1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-db2.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-db3.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-definition.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-definition1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-definition2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-definition5.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-definition7.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-definition8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-demo.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-demo1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-deployment.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-dev.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-disk-static.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-disk-static1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-downloads.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-downloads1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-downloads2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-ejemplo1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-ejemplo11.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-etcd-backup.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example1_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example1_2.yaml                          │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example2_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example2_2.yaml                          │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-example_2.yaml                           │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-files.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-files1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-fileshare.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-fileshare1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-finance.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-for-illustration-only.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-for-wp-deployment.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-for-wp-statefulset.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-giropops.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-giropops1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-gitlab-minio.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good1_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good2_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good3_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good4_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-good_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-grafana.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-hostpath.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-hostpath1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-hostpath2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-hostpath3.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-hostpath4.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-hostpath5.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-images.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-iscsi.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-local.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-local1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-logs.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-logs_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-mariadb-0.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-mariadb-1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-mariadb-2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-mariadb.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-marketplace.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-milvus.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-milvus_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-milvus_2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-minio.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-model-store.yaml                         │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-mongodb-staging.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-mongodb.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-moodledata.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-movies.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-movies1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-mysql.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-mysql1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-mysql2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs-0.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs-1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs10.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs11.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs12.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs13.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs14.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs15.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs16.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs17.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs18.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs4.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs5.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs6.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs7.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs7_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs7_2.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs8.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs8_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs8_2.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nfs9.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-not-working.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nsf.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-nsf1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-persistentvolume.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-plex.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-plugin.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pod-nginx.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pod-restore.yaml                         │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pod.yaml                                 │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pod1.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pod2.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pod3.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pod4.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pod5.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pod6.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-postgres.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-postgres1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-postgres2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-postgres3.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-postgres4.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-prometheus.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-prometheus1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc-label.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc-label1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc-label1_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc-label_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc-pod.yaml                             │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc-pod2.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc10.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc10_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc10_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc11.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc11_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc12.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc12_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc13.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc13_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc14.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc14_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc15.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc15_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc16.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc16_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc17.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc17_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc17_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc17_3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc17_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc17_5.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc18.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc18_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc19.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc19_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc20.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc20_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc21.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc21_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc2_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc3_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc4.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc4_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc5.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc5_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc5_2.yaml                              │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc5_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc6.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc6_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc8.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc8_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc9.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-pvc9_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-reader.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-reader1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-redis-data-gitlab-redis-master-0.yaml    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-repo-data-gitlab-gitaly-0.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-rnd.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-seq.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-smb.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-task.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-tmp.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-tv.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-tv1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume-claim.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume-claim2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume-hostpath.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume13.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume15.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume5.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-volume9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-wordpress.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv-wordpress1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.example-nfs-mongodb.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.example-nfs-mongodb1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.local-ssd-on-kind-worker.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.local-ssd-on-kind-worker1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.other-data.gcepd.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.other-data.gcepd1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.other-data.hostpath.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.other-data.hostpath1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.quiz-data.gcepd.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.quiz-data.gcepd1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.quiz-data.hostpath.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.quiz-data.hostpath1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv001.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv001_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv100.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv101.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv102.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv103.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv104.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv105.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv106.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv106_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv106_2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv106_3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv106_4.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv106_5.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv107.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv108.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv109.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv11.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv110.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv1100.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv111.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv112.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv113.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv114.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv115.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv116.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv117.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv117_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv117_2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv118.yaml                                  │ kubernetes │         0         │
└─────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


PublicationService_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'publish' of Deployment 'publish' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'publish' of Deployment 'publish' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'publish' of 'deployment' 'publish' in 'foxden' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'publish' of Deployment 'publish' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'publish' of Deployment 'publish' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'publish' of Deployment 'publish' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'publish' of Deployment 'publish' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "publish" of deployment "publish" in "foxden" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container publish in foxden namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment publish in foxden namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PublicationService_1.yaml:23-59
────────────────────────────────────────
  23 ┌       containers:
  24 │       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 └         - /data/srv
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container publish in deployment publish (namespace: foxden) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 PublicationService_1.yaml:24-55
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/publicationservice:v0.0.3-test2
  25 │         name: publish
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────



prometheus_vm1_2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm1_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm1_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm1_5.yaml (kubernetes)
==================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm1_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm1_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm1_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm2_2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm2_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm2_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm2_5.yaml (kubernetes)
==================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm2_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm2_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm2_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm3_2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm3_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm3_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm3_5.yaml (kubernetes)
==================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm3_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm3_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm3_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm4_2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm4_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm4_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm4_5.yaml (kubernetes)
==================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm4_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm4_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm4_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm5_2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm5_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm5_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm5_5.yaml (kubernetes)
==================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm5_5.yaml:46-84
────────────────────────────────────────
  46 ┌       - name: prometheus-server
  47 │         image: prom/prometheus:v2.24.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         args:
  50 │         - --storage.tsdb.retention.time=15d
  51 │         - --config.file=/etc/config/prometheus.yml
  52 │         - --storage.tsdb.path=/data
  53 │         - --web.console.libraries=/etc/prometheus/console_libraries
  54 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm5_5.yaml:32-45
────────────────────────────────────────
  32 ┌       - name: prometheus-server-configmap-reload
  33 │         image: jimmidyson/configmap-reload:v0.5.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --volume-dir=/etc/config
  37 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  38 │         resources: {}
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm5_5.yaml:85-87
────────────────────────────────────────
  85 ┌       - name: vm-discovery
  86 │         image: istioecosystem/vm-discovery:latest
  87 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm_2.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm_5.yaml (kubernetes)
=================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_5.yaml:45-83
────────────────────────────────────────
  45 ┌       - name: prometheus-server
  46 │         image: prom/prometheus:v2.24.0
  47 │         imagePullPolicy: IfNotPresent
  48 │         args:
  49 │         - --storage.tsdb.retention.time=15d
  50 │         - --config.file=/etc/config/prometheus.yml
  51 │         - --storage.tsdb.path=/data
  52 │         - --web.console.libraries=/etc/prometheus/console_libraries
  53 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_5.yaml:31-44
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_5.yaml:84-86
────────────────────────────────────────
  84 ┌       - name: vm-discovery
  85 │         image: istioecosystem/vm-discovery:latest
  86 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm_tls1_2.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm_tls1_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm_tls1_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm_tls1_5.yaml (kubernetes)
======================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls1_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm_tls2_2.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm_tls2_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm_tls2_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm_tls2_5.yaml (kubernetes)
======================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls2_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm_tls3_2.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm_tls3_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm_tls3_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm_tls3_5.yaml (kubernetes)
======================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls3_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm_tls4_2.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm_tls4_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm_tls4_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm_tls4_5.yaml (kubernetes)
======================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls4_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm_tls5_2.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm_tls5_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm_tls5_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm_tls5_5.yaml (kubernetes)
======================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls5_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



prometheus_vm_tls_2.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus_vm_tls_2.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus_vm_tls_2.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   verbs:
  51 │   - get
  52 │   - watch
  53 │   - list
  54 │   - create
  55 │   - update
  56 └   - patch
  ..   
────────────────────────────────────────



prometheus_vm_tls_5.yaml (kubernetes)
=====================================
Tests: 138 (SUCCESSES: 101, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 24, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vm-discovery' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vm-discovery' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vm-discovery' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vm-discovery' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vm-discovery" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:50-90
────────────────────────────────────────
  50 ┌       - name: prometheus-server
  51 │         image: prom/prometheus:v2.24.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - --storage.tsdb.retention.time=15d
  55 │         - --config.file=/etc/config/prometheus.yml
  56 │         - --storage.tsdb.path=/data
  57 │         - --web.console.libraries=/etc/prometheus/console_libraries
  58 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:36-49
────────────────────────────────────────
  36 ┌       - name: prometheus-server-configmap-reload
  37 │         image: jimmidyson/configmap-reload:v0.5.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --volume-dir=/etc/config
  41 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  42 │         resources: {}
  43 │         volumeMounts:
  44 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vm-discovery in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus_vm_tls_5.yaml:91-93
────────────────────────────────────────
  91 ┌       - name: vm-discovery
  92 │         image: istioecosystem/vm-discovery:latest
  93 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



promethues.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 promethues.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



promethues2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 promethues2.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



promethues2_3.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promethues2_3.yaml:16-35
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promethues2_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────



promethues4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 promethues4.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



promethues4_3.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promethues4_3.yaml:16-35
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promethues4_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────



promethues_3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promethues_3.yaml:16-35
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promethues_3.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:v2.30.3
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────



promoperator-cr.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 promoperator-cr.yaml:31-37
────────────────────────────────────────
  31 ┌ - apiGroups:
  32 │   - ""
  33 │   resources:
  34 │   - configmaps
  35 │   - secrets
  36 │   verbs:
  37 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 promoperator-cr.yaml:25-30
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - apps
  27 │   resources:
  28 │   - statefulsets
  29 │   verbs:
  30 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 promoperator-cr.yaml:31-37
────────────────────────────────────────
  31 ┌ - apiGroups:
  32 │   - ""
  33 │   resources:
  34 │   - configmaps
  35 │   - secrets
  36 │   verbs:
  37 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 promoperator-cr.yaml:25-30
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - apps
  27 │   resources:
  28 │   - statefulsets
  29 │   verbs:
  30 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 promoperator-cr.yaml:38-44
────────────────────────────────────────
  38 ┌ - apiGroups:
  39 │   - ""
  40 │   resources:
  41 │   - pods
  42 │   verbs:
  43 │   - list
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 promoperator-cr.yaml:31-37
────────────────────────────────────────
  31 ┌ - apiGroups:
  32 │   - ""
  33 │   resources:
  34 │   - configmaps
  35 │   - secrets
  36 │   verbs:
  37 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 promoperator-cr.yaml:45-55
────────────────────────────────────────
  45 ┌ - apiGroups:
  46 │   - ""
  47 │   resources:
  48 │   - services
  49 │   - services/finalizers
  50 │   - endpoints
  51 │   verbs:
  52 │   - get
  53 └   - create
  ..   
────────────────────────────────────────



promoperator-depl.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 promoperator-depl.yaml:19-35
────────────────────────────────────────
  19 ┌       - args:
  20 │         - --kubelet-service=kube-system/kubelet
  21 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.46.0
  22 │         image: quay.io/prometheus-operator/prometheus-operator:v0.46.0
  23 │         name: prometheus-operator
  24 │         ports:
  25 │         - containerPort: 8080
  26 │           name: http
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-operator' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 promoperator-depl.yaml:19-35
────────────────────────────────────────
  19 ┌       - args:
  20 │         - --kubelet-service=kube-system/kubelet
  21 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.46.0
  22 │         image: quay.io/prometheus-operator/prometheus-operator:v0.46.0
  23 │         name: prometheus-operator
  24 │         ports:
  25 │         - containerPort: 8080
  26 │           name: http
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 promoperator-depl.yaml:19-35
────────────────────────────────────────
  19 ┌       - args:
  20 │         - --kubelet-service=kube-system/kubelet
  21 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.46.0
  22 │         image: quay.io/prometheus-operator/prometheus-operator:v0.46.0
  23 │         name: prometheus-operator
  24 │         ports:
  25 │         - containerPort: 8080
  26 │           name: http
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promoperator-depl.yaml:19-35
────────────────────────────────────────
  19 ┌       - args:
  20 │         - --kubelet-service=kube-system/kubelet
  21 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.46.0
  22 │         image: quay.io/prometheus-operator/prometheus-operator:v0.46.0
  23 │         name: prometheus-operator
  24 │         ports:
  25 │         - containerPort: 8080
  26 │           name: http
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promoperator-depl.yaml:19-35
────────────────────────────────────────
  19 ┌       - args:
  20 │         - --kubelet-service=kube-system/kubelet
  21 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.46.0
  22 │         image: quay.io/prometheus-operator/prometheus-operator:v0.46.0
  23 │         name: prometheus-operator
  24 │         ports:
  25 │         - containerPort: 8080
  26 │           name: http
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-operator" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promoperator-depl.yaml:19-35
────────────────────────────────────────
  19 ┌       - args:
  20 │         - --kubelet-service=kube-system/kubelet
  21 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.46.0
  22 │         image: quay.io/prometheus-operator/prometheus-operator:v0.46.0
  23 │         name: prometheus-operator
  24 │         ports:
  25 │         - containerPort: 8080
  26 │           name: http
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 promoperator-depl.yaml:19-35
────────────────────────────────────────
  19 ┌       - args:
  20 │         - --kubelet-service=kube-system/kubelet
  21 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.46.0
  22 │         image: quay.io/prometheus-operator/prometheus-operator:v0.46.0
  23 │         name: prometheus-operator
  24 │         ports:
  25 │         - containerPort: 8080
  26 │           name: http
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-operator in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promoperator-depl.yaml:19-35
────────────────────────────────────────
  19 ┌       - args:
  20 │         - --kubelet-service=kube-system/kubelet
  21 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.46.0
  22 │         image: quay.io/prometheus-operator/prometheus-operator:v0.46.0
  23 │         name: prometheus-operator
  24 │         ports:
  25 │         - containerPort: 8080
  26 │           name: http
  27 └         resources:
  ..   
────────────────────────────────────────



promtail-clusterrole.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 promtail-clusterrole.yaml:14-25
────────────────────────────────────────
  14 ┌   - apiGroups:
  15 │       - ""
  16 │     resources:
  17 │       - nodes
  18 │       - nodes/proxy
  19 │       - services
  20 │       - endpoints
  21 │       - pods
  22 └     verbs:
  ..   
────────────────────────────────────────



promtail-daemonset.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'promtail' of DaemonSet 'loki-promtail' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'promtail' of DaemonSet 'loki-promtail' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'promtail' of DaemonSet 'loki-promtail' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'promtail' of DaemonSet 'loki-promtail' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'promtail' of DaemonSet 'loki-promtail' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'promtail' of DaemonSet 'loki-promtail' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'promtail' of DaemonSet 'loki-promtail' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'loki-promtail' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 promtail-daemonset.yaml:15-94
────────────────────────────────────────
  15 ┌   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/name: promtail
  18 │       app.kubernetes.io/instance: loki
  19 │   updateStrategy:
  20 │     {}
  21 │   template:
  22 │     metadata:
  23 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "promtail" of daemonset "loki-promtail" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 promtail-daemonset.yaml:61-65
────────────────────────────────────────
  61 ┌             allowPrivilegeEscalation: false
  62 │             capabilities:
  63 │               drop:
  64 │               - ALL
  65 └             readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 promtail-daemonset.yaml:32-33
────────────────────────────────────────
  32 ┌         runAsGroup: 0
  33 └         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0116 (LOW): daemonset loki-promtail in monitoring namespace should set spec.securityContext.runAsGroup, spec.securityContext.supplementalGroups[*] and spec.securityContext.fsGroup to integer greater than 0
════════════════════════════════════════
According to pod security standard 'Non-root groups', containers should be forbidden from running with a root primary or supplementary GID.

See https://avd.aquasec.com/misconfig/ksv116
────────────────────────────────────────
 promtail-daemonset.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container promtail in daemonset loki-promtail (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promtail-daemonset.yaml:35-74
────────────────────────────────────────
  35 ┌         - name: promtail
  36 │           image: "docker.io/grafana/promtail:2.9.3"
  37 │           imagePullPolicy: IfNotPresent
  38 │           args:
  39 │             - "-config.file=/etc/promtail/promtail.yaml"
  40 │           volumeMounts:
  41 │             - name: config
  42 │               mountPath: /etc/promtail
  43 └             - mountPath: /run/promtail
  ..   
────────────────────────────────────────



promtail-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'promtail' of Deployment 'promtail' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'promtail' of Deployment 'promtail' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'promtail' of 'deployment' 'promtail' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'promtail' of Deployment 'promtail' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'promtail' of Deployment 'promtail' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'promtail' of Deployment 'promtail' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'promtail' of Deployment 'promtail' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'promtail' of Deployment 'promtail' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'promtail' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 promtail-deployment.yaml:7-32
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: promtail
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: promtail
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "promtail" of deployment "promtail" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container promtail in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment promtail in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promtail-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 └         - name: varlog
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container promtail in deployment promtail (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promtail-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: promtail
  18 │         image: grafana/promtail:latest
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail-config.yaml
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/promtail
  24 │         - name: varlog
  25 └           mountPath: /var/log
────────────────────────────────────────



promtail10_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'promtail' of Deployment 'promtail' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'promtail' of Deployment 'promtail' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'promtail' of 'deployment' 'promtail' in 'obs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'promtail' of Deployment 'promtail' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'promtail' of Deployment 'promtail' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'promtail' of Deployment 'promtail' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'promtail' of Deployment 'promtail' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'promtail' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 promtail10_1.yaml:7-64
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: promtail
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: promtail
  14 │     spec:
  15 └       serviceAccountName: promtail
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "promtail" of deployment "promtail" in "obs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 promtail10_1.yaml:18-19
────────────────────────────────────────
  18 ┌         runAsUser: 0
  19 └         runAsGroup: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0116 (LOW): deployment promtail in obs namespace should set spec.securityContext.runAsGroup, spec.securityContext.supplementalGroups[*] and spec.securityContext.fsGroup to integer greater than 0
════════════════════════════════════════
According to pod security standard 'Non-root groups', containers should be forbidden from running with a root primary or supplementary GID.

See https://avd.aquasec.com/misconfig/ksv116
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container promtail in deployment promtail (namespace: obs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promtail10_1.yaml:21-51
────────────────────────────────────────
  21 ┌       - name: promtail
  22 │         image: grafana/promtail:2.9.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         args:
  25 │         - -config.file=/etc/promtail/promtail.yaml
  26 │         env:
  27 │         - name: HOSTNAME
  28 │           valueFrom:
  29 └             fieldRef:
  ..   
────────────────────────────────────────



promtail10_2.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 promtail10_2.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - nodes
  13 │   - nodes/proxy
  14 │   - services
  15 │   - endpoints
  16 │   - pods
  17 └   verbs:
  ..   
────────────────────────────────────────



promtail4.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'promtail-container' of 'daemonset' 'promtail-daemonset' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'promtail-container' of DaemonSet 'promtail-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'promtail-daemonset' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 promtail4.yaml:7-43
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: promtail
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: promtail
  14 │     spec:
  15 └       serviceAccount: promtail-serviceaccount
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "promtail-container" of daemonset "promtail-daemonset" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container promtail-daemonset in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset promtail-daemonset in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promtail4.yaml:15-43
────────────────────────────────────────
  15 ┌       serviceAccount: promtail-serviceaccount
  16 │       containers:
  17 │       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container promtail-container in daemonset promtail-daemonset (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promtail4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────



promtail5.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'promtail' of DaemonSet 'promtail' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'promtail' of DaemonSet 'promtail' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'promtail' of 'daemonset' 'promtail' in 'loki' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'promtail' of DaemonSet 'promtail' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'promtail' of DaemonSet 'promtail' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'promtail' of DaemonSet 'promtail' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'promtail' of DaemonSet 'promtail' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'promtail' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 promtail5.yaml:7-68
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: promtail
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: promtail
  14 │       annotations:
  15 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "promtail" of daemonset "promtail" in "loki" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container promtail in loki namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset promtail in loki namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promtail5.yaml:18-68
────────────────────────────────────────
  18 ┌       serviceAccount: promtail-sa
  19 │       containers:
  20 │       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container promtail in daemonset promtail (namespace: loki) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promtail5.yaml:20-52
────────────────────────────────────────
  20 ┌       - name: promtail
  21 │         image: grafana/promtail:3.0.0
  22 │         args:
  23 │         - -config.file=/etc/promtail/promtail.yaml
  24 │         env:
  25 │         - name: HOSTNAME
  26 │           valueFrom:
  27 │             fieldRef:
  28 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────



promtail8.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'promtail' of Deployment 'promtail' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'promtail' of Deployment 'promtail' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'promtail' of 'deployment' 'promtail' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'promtail' of Deployment 'promtail' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'promtail' of Deployment 'promtail' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'promtail' of Deployment 'promtail' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'promtail' of Deployment 'promtail' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'promtail' of Deployment 'promtail' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'promtail' of Deployment 'promtail' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "promtail" of deployment "promtail" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment promtail in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 promtail8.yaml:4
────────────────────────────────────────
   4 [   name: promtail
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container promtail in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment promtail in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 promtail8.yaml:15-33
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container promtail in deployment promtail (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 promtail8.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: promtail
  17 │           image: grafana/promtail
  18 │           args: ["-config.file=/etc/promtail/promtail-config.yaml"]
  19 │           volumeMounts:
  20 │             - mountPath: "/var/log"
  21 │               name: log-pv-storage
  22 │             - mountPath: "/etc/promtail"
  23 └               name: config-volume
────────────────────────────────────────



prophet_model_deployment.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prophet-model' of Deployment 'prophet-model-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prophet-model' of Deployment 'prophet-model-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prophet-model' of 'deployment' 'prophet-model-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prophet-model' of Deployment 'prophet-model-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prophet-model' of Deployment 'prophet-model-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prophet-model' of Deployment 'prophet-model-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prophet-model' of Deployment 'prophet-model-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prophet-model' of Deployment 'prophet-model-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prophet-model' of Deployment 'prophet-model-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prophet-model' of Deployment 'prophet-model-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prophet-model' of Deployment 'prophet-model-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prophet-model' of Deployment 'prophet-model-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prophet-model" of deployment "prophet-model-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prophet-model-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prophet_model_deployment.yaml:4
────────────────────────────────────────
   4 [   name: prophet-model-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment prophet-model-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prophet-model-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prophet_model_deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prophet-model-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prophet_model_deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prophet-model
  17 │         image: prophet_model:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



prova1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-giropops' of 'pod' 'nginx-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-giropops" of pod "nginx-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prova1.yaml:4-8
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: nginx-giropops
   7 │     app: giropops-strigus
   8 └   name: nginx-giropops
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-giropops in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prova1.yaml:11-21
────────────────────────────────────────
  11 ┌     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 │         cpu: "300m"
  19 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prova1.yaml:10-23
────────────────────────────────────────
  10 ┌   containers:
  11 │     - image: nginx
  12 │       name: nginx-giropops
  13 │       ports:
  14 │       - containerPort: 80
  15 │       resources: 
  16 │       requests:
  17 │         memory: "4400Mi"
  18 └         cpu: "300m"
  ..   
────────────────────────────────────────



provedcode-backend-deployment.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provedcode-backend' of 'deployment' 'provedcode-backend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provedcode-backend' of Deployment 'provedcode-backend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provedcode-backend" of deployment "provedcode-backend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment provedcode-backend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 provedcode-backend-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: provedcode-backend-deployment
   5 │   labels:
   6 └     app: provedcode-backend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment provedcode-backend-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container provedcode-backend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment provedcode-backend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provedcode-backend-deployment.yaml:17-98
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container provedcode-backend in deployment provedcode-backend-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 provedcode-backend-deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: provedcode-backend
  19 │         image: mnemov/provedcode-backend
  20 │         ports: 
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /api/v2/talents?page=0&size=5
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



provedcode-frontend-deployment.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provedcode-frontend' of 'deployment' 'provedcode-frontend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provedcode-frontend' of Deployment 'provedcode-frontend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provedcode-frontend" of deployment "provedcode-frontend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment provedcode-frontend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: provedcode-frontend-deployment
   5 │   labels:
   6 └     app: provedcode-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment provedcode-frontend-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container provedcode-frontend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment provedcode-frontend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 │         - containerPort: 80
  22 │       affinity:
  23 │         podAntiAffinity:
  24 │           preferredDuringSchedulingIgnoredDuringExecution:
  25 └           - weight: 100
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container provedcode-frontend in deployment provedcode-frontend-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 provedcode-frontend-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: provedcode-frontend
  19 │         image: mnemov/provedcode-frontend
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



provider-app-deployment.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'provider-app' of Deployment 'provider-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provider-app' of Deployment 'provider-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provider-app' of 'deployment' 'provider-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'provider-app' of Deployment 'provider-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provider-app' of Deployment 'provider-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provider-app' of Deployment 'provider-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'provider-app' of Deployment 'provider-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'provider-app' of Deployment 'provider-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'provider-app' of Deployment 'provider-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provider-app' of Deployment 'provider-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provider-app' of Deployment 'provider-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provider-app" of deployment "provider-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment provider-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 provider-app-deployment.yaml:4
────────────────────────────────────────
   4 [   name: provider-app-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container provider-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provider-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment provider-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provider-app-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: provider-app
  17 │         image: provider-app-image:v2 # Docker imajımn adı 
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────



provider-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'provider' of Deployment 'provider' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provider' of Deployment 'provider' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provider' of 'deployment' 'provider' in 'dataspace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provider' of Deployment 'provider' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provider' of Deployment 'provider' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provider' of Deployment 'provider' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provider' of Deployment 'provider' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provider" of deployment "provider" in "dataspace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container provider in dataspace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment provider in dataspace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provider-deployment.yaml:25-73
────────────────────────────────────────
  25 ┌       containers:
  26 │         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 └               value: |
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container provider in deployment provider (namespace: dataspace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 provider-deployment.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────



provider-deployment1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'provider' of Deployment 'provider' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provider' of Deployment 'provider' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provider' of 'deployment' 'provider' in 'dataspace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provider' of Deployment 'provider' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provider' of Deployment 'provider' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provider' of Deployment 'provider' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provider' of Deployment 'provider' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provider" of deployment "provider" in "dataspace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container provider in dataspace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment provider in dataspace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provider-deployment1.yaml:25-73
────────────────────────────────────────
  25 ┌       containers:
  26 │         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 └               value: |
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container provider in deployment provider (namespace: dataspace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 provider-deployment1.yaml:26-69
────────────────────────────────────────
  26 ┌         - env:
  27 │             - name: ARTIFACTS_PATH
  28 │               value: /ocean-provider/artifacts
  29 │             - name: NETWORK_URL
  30 │               value: |
  31 │                 {"100":"https://rpc.genx.minimal-gaia-x.eu"}
  32 │             - name: PROVIDER_PRIVATE_KEY
  33 │               value: |
  34 └                 {"100":"0x0000000000000000000000000000000000000000000000000000000000000001"}
  ..   
────────────────────────────────────────



provider-deployment2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'provider-deployment' of Deployment 'provider-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provider-deployment' of Deployment 'provider-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provider-deployment' of 'deployment' 'provider-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'provider-deployment' of Deployment 'provider-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provider-deployment' of Deployment 'provider-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provider-deployment' of Deployment 'provider-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'provider-deployment' of Deployment 'provider-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'provider-deployment' of Deployment 'provider-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'provider-deployment' of Deployment 'provider-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provider-deployment' of Deployment 'provider-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provider-deployment' of Deployment 'provider-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provider-deployment" of deployment "provider-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment provider-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 provider-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: provider-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container provider-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provider-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment provider-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provider-deployment2.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: provider-deployment
  17 │           image: provider-image:v1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────



provider-helm-incluster_1.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'crossplane-provider-helm' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 provider-helm-incluster_1.yaml:4
────────────────────────────────────────
   4 [   name: crossplane-provider-helm
────────────────────────────────────────



provider-kubernetes-incluster1_1.yaml (kubernetes)
==================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'crossplane-provider-kubernetes' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 provider-kubernetes-incluster1_1.yaml:4
────────────────────────────────────────
   4 [   name: crossplane-provider-kubernetes
────────────────────────────────────────



provider-kubernetes-incluster_1.yaml (kubernetes)
=================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'crossplane-provider-kubernetes' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 provider-kubernetes-incluster_1.yaml:4
────────────────────────────────────────
   4 [   name: crossplane-provider-kubernetes
────────────────────────────────────────



provider-kubernetes_2.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'provider-kubernetes-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 provider-kubernetes_2.yaml:4
────────────────────────────────────────
   4 [   name: provider-kubernetes-cluster-admin
────────────────────────────────────────



provisioner.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'local-path-provisioner' of 'deployment' 'local-path-provisioner' in 'local-path-storage' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "local-path-provisioner" of deployment "local-path-provisioner" in "local-path-storage" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container local-path-provisioner in local-path-storage namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment local-path-provisioner in local-path-storage namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provisioner.yaml:16-38
────────────────────────────────────────
  16 ┌       serviceAccountName: local-path-provisioner-service-account
  17 │       containers:
  18 │         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 └             - start
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container local-path-provisioner in deployment local-path-provisioner (namespace: local-path-storage) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 provisioner.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────



provisioner3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'local-path-provisioner' of 'deployment' 'local-path-provisioner' in 'local-path-storage' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "local-path-provisioner" of deployment "local-path-provisioner" in "local-path-storage" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container local-path-provisioner in local-path-storage namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment local-path-provisioner in local-path-storage namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 provisioner3.yaml:16-38
────────────────────────────────────────
  16 ┌       serviceAccountName: local-path-provisioner-service-account
  17 │       containers:
  18 │         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 └             - start
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container local-path-provisioner in deployment local-path-provisioner (namespace: local-path-storage) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 provisioner3.yaml:18-34
────────────────────────────────────────
  18 ┌         - name: local-path-provisioner
  19 │           image: rancher/local-path-provisioner:master-head
  20 │           imagePullPolicy: Always
  21 │           command:
  22 │             - local-path-provisioner
  23 │             - --debug
  24 │             - start
  25 │             - --config
  26 └             - /etc/config/config.json
  ..   
────────────────────────────────────────



prowlarr-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prowlarr' of 'deployment' 'prowlarr' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prowlarr' of Deployment 'prowlarr' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prowlarr" of deployment "prowlarr" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prowlarr in media namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prowlarr in media namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr-deployment.yaml:19-37
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 └             mountPath: /config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prowlarr in deployment prowlarr (namespace: media) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prowlarr-deployment.yaml:20-33
────────────────────────────────────────
  20 ┌       - image: lscr.io/linuxserver/prowlarr:latest
  21 │         name: prowlarr
  22 │         envFrom:
  23 │           - configMapRef:
  24 │               name: servarr-env
  25 │         volumeMounts:
  26 │           - name: prowlarr-config
  27 │             mountPath: /config
  28 └         resources: {}
  ..   
────────────────────────────────────────



prowlarr1_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prowlarr' of 'deployment' 'prowlarr' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prowlarr" of deployment "prowlarr" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prowlarr in media namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prowlarr in media namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr1_2.yaml:21-67
────────────────────────────────────────
  21 ┌       serviceAccountName: default
  22 │       automountServiceAccountToken: true
  23 │       dnsPolicy: ClusterFirst
  24 │       enableServiceLinks: true
  25 │       containers:
  26 │       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prowlarr in deployment prowlarr (namespace: media) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prowlarr1_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────



prowlarr3_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prowlarr' of 'deployment' 'prowlarr' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prowlarr" of deployment "prowlarr" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prowlarr in media namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prowlarr in media namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr3_2.yaml:21-67
────────────────────────────────────────
  21 ┌       serviceAccountName: default
  22 │       automountServiceAccountToken: true
  23 │       dnsPolicy: ClusterFirst
  24 │       enableServiceLinks: true
  25 │       containers:
  26 │       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prowlarr in deployment prowlarr (namespace: media) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prowlarr3_2.yaml:26-63
────────────────────────────────────────
  26 ┌       - name: prowlarr
  27 │         image: lscr.io/linuxserver/prowlarr:latest
  28 │         imagePullPolicy: Always
  29 │         resources: {}
  30 │         env:
  31 │         - name: PUID
  32 │           value: '1000'
  33 │         - name: PGID
  34 └           value: '1000'
  ..   
────────────────────────────────────────



prowlarr4.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prowlarr' of 'deployment' 'prowlarr' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prowlarr" of deployment "prowlarr" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prowlarr in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prowlarr4.yaml:4
────────────────────────────────────────
   4 [   name: prowlarr
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prowlarr in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prowlarr in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr4.yaml:15-40
────────────────────────────────────────
  15 ┌       volumes:
  16 │         - name: prowlarr-config
  17 │           persistentVolumeClaim:
  18 │             claimName: prowlarr-config-claim
  19 │         - name: prowlarr-data
  20 │           persistentVolumeClaim:
  21 │             claimName: nfs-claim
  22 │       containers:
  23 └         - name: prowlarr
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prowlarr in deployment prowlarr (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prowlarr4.yaml:23-40
────────────────────────────────────────
  23 ┌         - name: prowlarr
  24 │           image: hotio/prowlarr:release
  25 │           env:
  26 │             - name: TZ
  27 │               value: "America/Los_Angeles"
  28 │             - name: PUID
  29 │               value: "1024"
  30 │             - name: PGID
  31 └               value: "100"
  ..   
────────────────────────────────────────



prowlarr8_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prowlarr' of 'deployment' 'prowlarr' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prowlarr' of Deployment 'prowlarr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'prowlarr' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 prowlarr8_1.yaml:7-40
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       name: prowlarr
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: prowlarr
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prowlarr" of deployment "prowlarr" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prowlarr in media namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prowlarr in media namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr8_1.yaml:16-40
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prowlarr in deployment prowlarr (namespace: media) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prowlarr8_1.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: prowlarr
  18 │         image: hotio/prowlarr:release-1.30.2.4939
  19 │         ports:
  20 │         - containerPort: 9696
  21 │         env:
  22 │         - name: TZ
  23 │           value: Asia/Kathmandu
  24 │         volumeMounts:
  25 └         - name: config
  ..   
────────────────────────────────────────



prowlarr9_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prowlarr-exporter' of 'deployment' 'prowlarr-exporter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prowlarr-exporter' of Deployment 'prowlarr-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prowlarr-exporter" of deployment "prowlarr-exporter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prowlarr-exporter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prowlarr9_2.yaml:4-8
────────────────────────────────────────
   4 ┌   name: prowlarr-exporter
   5 │   labels:
   6 │     app.kubernetes.io/instance: prowlarr
   7 │   annotations:
   8 └     reloader.stakater.com/auto: 'true'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prowlarr-exporter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prowlarr-exporter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prowlarr9_2.yaml:23-55
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prowlarr-exporter in deployment prowlarr-exporter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prowlarr9_2.yaml:24-55
────────────────────────────────────────
  24 ┌       - name: prowlarr-exporter
  25 │         image: ghcr.io/onedr0p/exportarr:v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
  26 │         imagePullPolicy: IfNotPresent
  27 │         args:
  28 │         - prowlarr
  29 │         env:
  30 │         - name: API_KEY
  31 │           valueFrom:
  32 └             secretKeyRef:
  ..   
────────────────────────────────────────



proxy-config_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'proxy' of Deployment 'proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'proxy' of 'deployment' 'proxy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'proxy' of Deployment 'proxy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'proxy' of Deployment 'proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "proxy" of deployment "proxy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment proxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy-config_2.yaml:4
────────────────────────────────────────
   4 [   name: proxy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment proxy in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container proxy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-config_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 └           name: nginx-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment proxy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-config_2.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: proxy
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - mountPath: /etc/nginx/conf.d
  22 │           name: nginx-config
  23 └       volumes:
  ..   
────────────────────────────────────────



proxy-deploy.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'proxy' of Deployment 'proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'proxy' of 'deployment' 'proxy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'proxy' of Deployment 'proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "proxy" of deployment "proxy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment proxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy-deploy.yaml:4-6
────────────────────────────────────────
   4 ┌   name: proxy
   5 │   labels:
   6 └     app: proxy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container proxy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment proxy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-deploy.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 │               mountPath: /vol/static
  25 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container proxy in deployment proxy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-deploy.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────



proxy-deploy1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'proxy' of Deployment 'proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'proxy' of 'deployment' 'proxy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'proxy' of Deployment 'proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "proxy" of deployment "proxy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment proxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy-deploy1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: proxy
   5 │   labels:
   6 └     app: proxy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container proxy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment proxy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-deploy1.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 │               mountPath: /vol/static
  25 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container proxy in deployment proxy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-deploy1.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: proxy
  19 │           image: nyuappsec/assign3-proxy:v0
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           volumeMounts:
  23 │             - name: static-data-volume-mount
  24 └               mountPath: /vol/static
────────────────────────────────────────



proxy-example.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'proxy' of Deployment 'proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'proxy' of 'deployment' 'proxy' in 'hydra' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'proxy' of Deployment 'proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "proxy" of deployment "proxy" in "hydra" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container proxy in hydra namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment proxy in hydra namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-example.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 └         - --cookie-secret=
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container proxy in deployment proxy (namespace: hydra) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-example.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: proxy
  18 │         image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1
  19 │         args:
  20 │         - --provider=oidc
  21 │         - --oidc-issuer-url=https://auth.prayujt.com
  22 │         - --client-id=
  23 │         - --client-secret=
  24 │         - --cookie-secret=
  25 └         - --email-domain=*
  ..   
────────────────────────────────────────



proxy-override-args.yaml (kubernetes)
=====================================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello' of Deployment 'hello' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello' of Deployment 'hello' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'istio-proxy' of Deployment 'hello' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello' of 'deployment' 'hello' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'istio-proxy' of 'deployment' 'hello' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello' of Deployment 'hello' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'istio-proxy' of Deployment 'hello' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello' of Deployment 'hello' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello' of Deployment 'hello' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello' of Deployment 'hello' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello" of deployment "hello" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "istio-proxy" of deployment "hello" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy-override-args.yaml:4
────────────────────────────────────────
   4 [   name: hello
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-override-args.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-override-args.yaml:14-22
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: hello
  16 │         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  17 │       - name: istio-proxy
  18 │         image: auto
  19 │         # Test that we can override a complex field like the command
  20 │         args: ["-c", "my-config.yaml"]
  21 │         command:
  22 └         - envoy
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello in deployment hello (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-override-args.yaml:15-16
────────────────────────────────────────
  15 ┌       - name: hello
  16 └         image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────



proxy-override.yaml (kubernetes)
================================
Tests: 144 (SUCCESSES: 96, FAILURES: 48)
Failures: 48 (UNKNOWN: 0, LOW: 29, MEDIUM: 13, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello' of Deployment 'hello' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'istio-init' of Deployment 'hello' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello' of Deployment 'hello' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'istio-init' of Deployment 'hello' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'istio-proxy' of Deployment 'hello' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello' of 'deployment' 'hello' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'istio-init' of 'deployment' 'hello' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'istio-proxy' of 'deployment' 'hello' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'istio-init' of Deployment 'hello' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello' of Deployment 'hello' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'istio-init' of Deployment 'hello' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'istio-init' of Deployment 'hello' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'istio-proxy' of Deployment 'hello' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello' of Deployment 'hello' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'istio-init' of Deployment 'hello' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'istio-init' of Deployment 'hello' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'istio-init' of Deployment 'hello' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'istio-init' of Deployment 'hello' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello' of Deployment 'hello' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'istio-init' of Deployment 'hello' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello' of Deployment 'hello' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'istio-init' of Deployment 'hello' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'istio-proxy' of Deployment 'hello' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello" of deployment "hello" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "istio-init" of deployment "hello" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "istio-proxy" of deployment "hello" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-override.yaml:24-54
────────────────────────────────────────
  24 ┌         - name: istio-proxy
  25 │           image: auto
  26 │           resources:
  27 │             requests:
  28 │               cpu: 123m
  29 │             limits:
  30 │               cpu: 3000m
  31 │           livenessProbe:
  32 └             failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy-override.yaml:4
────────────────────────────────────────
   4 [   name: hello
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-override.yaml:14-58
────────────────────────────────────────
  14 ┌       initContainers:
  15 │       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 │         image: fake/custom-image
  21 │       containers:
  22 └         - name: hello
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello in deployment hello (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-override.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: hello
  23 └           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container istio-init in deployment hello (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-override.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: istio-init
  16 │         args:
  17 │         - my
  18 │         - custom
  19 │         - args
  20 └         image: fake/custom-image
────────────────────────────────────────



proxy-pod.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 94, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'proxy' of Pod 'proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'proxy' of Pod 'proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'proxy' of 'pod' 'proxy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'proxy' of Pod 'proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'proxy' of Pod 'proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'proxy' of Pod 'proxy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'proxy' of Pod 'proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'proxy' of Pod 'proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'proxy' of Pod 'proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'proxy' of Pod 'proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'proxy' of Pod 'proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'proxy' of Pod 'proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'proxy' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 proxy-pod.yaml:9-44
────────────────────────────────────────
   9 ┌   containers:
  10 │   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 └     - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'proxy' of Pod 'proxy' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "proxy" of pod "proxy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod proxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: proxy
   6 └   name: proxy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod proxy in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container proxy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-pod.yaml:10-32
────────────────────────────────────────
  10 ┌   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 │     - containerPort: 80
  18 └       protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod proxy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-pod.yaml:9-44
────────────────────────────────────────
   9 ┌   containers:
  10 │   - env:
  11 │     - name: TZ
  12 │       value: Europe/Moscow
  13 │ 
  14 │     name: proxy
  15 │     image: nginx
  16 │     ports:
  17 └     - containerPort: 80
  ..   
────────────────────────────────────────



proxy-service3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'proxy-app' of Deployment 'proxy-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'proxy-app' of Deployment 'proxy-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'proxy-app' of 'deployment' 'proxy-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'proxy-app' of Deployment 'proxy-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'proxy-app' of Deployment 'proxy-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'proxy-app' of Deployment 'proxy-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'proxy-app' of Deployment 'proxy-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'proxy-app' of Deployment 'proxy-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'proxy-app' of Deployment 'proxy-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'proxy-app' of Deployment 'proxy-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'proxy-app' of Deployment 'proxy-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "proxy-app" of deployment "proxy-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment proxy-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy-service3.yaml:4
────────────────────────────────────────
   4 [   name: proxy-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment proxy-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container proxy-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment proxy-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-service3.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container proxy-app in deployment proxy-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-service3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: proxy-app
  17 │         image: rutujamalpute/three-tier:nginx_image
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



proxy-with-exporter.yaml (kubernetes)
=====================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'exporter' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'exporter' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "exporter" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 └               mountPath: "/etc/nginx/"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container exporter in deployment todo-proxy (namespace: kiamol-ch14-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-with-exporter.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────



proxy-with-exporter1.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'exporter' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'exporter' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "exporter" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter1.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter1.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 └               mountPath: "/etc/nginx/"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container exporter in deployment todo-proxy (namespace: kiamol-ch14-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-with-exporter1.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────



proxy-with-exporter2.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'exporter' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'exporter' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "exporter" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter2.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter2.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 └               mountPath: "/etc/nginx/"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container exporter in deployment todo-proxy (namespace: kiamol-ch14-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-with-exporter2.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────



proxy-with-exporter3.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'exporter' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'exporter' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'exporter' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "exporter" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter3.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-exporter3.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: nginx
  19 │           image: nginx:1.17-alpine          
  20 │           ports:
  21 │             - name: http
  22 │               containerPort: 80              
  23 │           volumeMounts:
  24 │             - name: config
  25 └               mountPath: "/etc/nginx/"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container exporter in deployment todo-proxy (namespace: kiamol-ch14-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy-with-exporter3.yaml:27-33
────────────────────────────────────────
  27 ┌         - name: exporter
  28 │           image: nginx/nginx-prometheus-exporter:0.8.0
  29 │           ports:
  30 │             - name: metrics
  31 │               containerPort: 9113
  32 │           args:
  33 └             - -nginx.scrape-uri=http://localhost/stub_status
────────────────────────────────────────



proxy-with-parser.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'numbers-api-proxy' in 'kiamol-ch13-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "numbers-api-proxy" in "kiamol-ch13-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment numbers-api-proxy in kiamol-ch13-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container numbers-api-proxy in kiamol-ch13-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-parser.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment numbers-api-proxy in kiamol-ch13-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-parser.yaml:17-34
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 └               mountPath: "/etc/nginx/"
  ..   
────────────────────────────────────────



proxy-with-parser1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'numbers-api-proxy' in 'kiamol-ch13-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "numbers-api-proxy" in "kiamol-ch13-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment numbers-api-proxy in kiamol-ch13-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container numbers-api-proxy in kiamol-ch13-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-parser1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment numbers-api-proxy in kiamol-ch13-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-parser1.yaml:17-34
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 └               mountPath: "/etc/nginx/"
  ..   
────────────────────────────────────────



proxy-with-parser2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'numbers-api-proxy' in 'kiamol-ch13-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "numbers-api-proxy" in "kiamol-ch13-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment numbers-api-proxy in kiamol-ch13-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container numbers-api-proxy in kiamol-ch13-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-parser2.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment numbers-api-proxy in kiamol-ch13-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-parser2.yaml:17-34
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 └               mountPath: "/etc/nginx/"
  ..   
────────────────────────────────────────



proxy-with-parser3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'numbers-api-proxy' in 'kiamol-ch13-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "numbers-api-proxy" in "kiamol-ch13-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment numbers-api-proxy in kiamol-ch13-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container numbers-api-proxy in kiamol-ch13-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-parser3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 │               mountPath: "/etc/nginx/"
  26 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment numbers-api-proxy in kiamol-ch13-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy-with-parser3.yaml:17-34
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: nginx:1.17-alpine
  19 │           name: nginx
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: http
  23 │           volumeMounts:
  24 │             - name: config
  25 └               mountPath: "/etc/nginx/"
  ..   
────────────────────────────────────────



proxy10_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'numbers-api-proxy' in 'kiamol-ch13-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "numbers-api-proxy" in "kiamol-ch13-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment numbers-api-proxy in kiamol-ch13-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container numbers-api-proxy in kiamol-ch13-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy10_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment numbers-api-proxy in kiamol-ch13-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy10_2.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy11_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy11_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy11_2.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy17_3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-proxy-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy17_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-proxy-lab
   5 │   labels:
   6 └     app: todo-proxy-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy17_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy17_3.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy18_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-proxy-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy18_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-proxy-lab
   5 │   labels:
   6 └     app: todo-proxy-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy18_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy18_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy19_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-proxy-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy19_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-proxy-lab
   5 │   labels:
   6 └     app: todo-proxy-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy19_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy19_2.yaml:16-29
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy1_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-proxy-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-proxy-lab
   5 │   labels:
   6 └     app: todo-proxy-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy1_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy1_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy20_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'numbers-api-proxy' in 'kiamol-ch13-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "numbers-api-proxy" in "kiamol-ch13-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment numbers-api-proxy in kiamol-ch13-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container numbers-api-proxy in kiamol-ch13-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy20_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment numbers-api-proxy in kiamol-ch13-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy20_2.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy21_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy21_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy21_2.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy28_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-proxy-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy28_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-proxy-lab
   5 │   labels:
   6 └     app: todo-proxy-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy28_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy28_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy29_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-proxy-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy29_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-proxy-lab
   5 │   labels:
   6 └     app: todo-proxy-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy29_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy29_2.yaml:16-29
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy2_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-proxy-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy2_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-proxy-lab
   5 │   labels:
   6 └     app: todo-proxy-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy2_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy2_2.yaml:16-29
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy30_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'numbers-api-proxy' in 'kiamol-ch13-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "numbers-api-proxy" in "kiamol-ch13-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment numbers-api-proxy in kiamol-ch13-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container numbers-api-proxy in kiamol-ch13-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy30_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment numbers-api-proxy in kiamol-ch13-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy30_2.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy31_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy31_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy31_2.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy3_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'numbers-api-proxy' in 'kiamol-ch13-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'numbers-api-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "numbers-api-proxy" in "kiamol-ch13-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment numbers-api-proxy in kiamol-ch13-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container numbers-api-proxy in kiamol-ch13-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy3_2.yaml:16-26
────────────────────────────────────────
  16 ┌       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 │           mountPath: /etc/nginx/
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment numbers-api-proxy in kiamol-ch13-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy3_2.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nginx:1.17-alpine
  17 │         name: nginx
  18 │         ports:
  19 │         - containerPort: 80
  20 │           name: http
  21 │         volumeMounts:
  22 │         - name: config
  23 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy42_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'proxy' of StatefulSet 'proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'proxy' of StatefulSet 'proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'proxy' of 'statefulset' 'proxy' in 'dragonfly-e2e' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'proxy' of StatefulSet 'proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'proxy' of StatefulSet 'proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'proxy' of StatefulSet 'proxy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'proxy' of StatefulSet 'proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'proxy' of StatefulSet 'proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'proxy' of StatefulSet 'proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'proxy' of StatefulSet 'proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'proxy' of StatefulSet 'proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'proxy' of StatefulSet 'proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): StatefulSet 'proxy' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 proxy42_2.yaml:7-45
────────────────────────────────────────
   7 ┌   serviceName: proxy
   8 │   selector:
   9 │     matchLabels:
  10 │       app: dragonfly
  11 │       component: proxy
  12 │   replicas: 3
  13 │   template:
  14 │     metadata:
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "proxy" of statefulset "proxy" in "dragonfly-e2e" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container proxy in dragonfly-e2e namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset proxy in dragonfly-e2e namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy42_2.yaml:19-45
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 └           name: config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container proxy in statefulset proxy (namespace: dragonfly-e2e) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy42_2.yaml:20-33
────────────────────────────────────────
  20 ┌       - name: proxy
  21 │         image: dragonflyoss/dfdaemon:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         ports:
  24 │         - containerPort: 65001
  25 │         volumeMounts:
  26 │         - mountPath: /etc/dragonfly
  27 │           name: config
  28 └         - mountPath: /var/log/dragonfly/
  ..   
────────────────────────────────────────



proxy4_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 │           mountPath: /etc/nginx/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy4_2.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nginx:1.17-alpine
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: http
  23 │         volumeMounts:
  24 │         - name: config
  25 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy8_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-proxy-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy8_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-proxy-lab
   5 │   labels:
   6 └     app: todo-proxy-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy8_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy9_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'todo-proxy-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'todo-proxy-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "todo-proxy-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-proxy-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy9_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-proxy-lab
   5 │   labels:
   6 └     app: todo-proxy-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todo-proxy-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-proxy-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy9_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 │           mountPath: /etc/nginx/
  25 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-proxy-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy9_2.yaml:16-29
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: nginx:1.17-alpine
  18 │         name: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: http
  22 │         volumeMounts:
  23 │         - name: config
  24 └           mountPath: /etc/nginx/
  ..   
────────────────────────────────────────



proxy_deployment.yaml (kubernetes)
==================================
Tests: 120 (SUCCESSES: 101, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy_deployment.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'envoy' of Deployment 'cloud-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy_deployment.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy_deployment.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy_deployment.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy_deployment.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy_deployment.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 proxy_deployment.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy_deployment.yaml:84-94
────────────────────────────────────────
  84 ┌             add:
  85 │             - CHOWN
  86 │             - DAC_OVERRIDE
  87 │             - FSETID
  88 │             - FOWNER
  89 │             - MKNOD
  90 │             - SETFCAP
  91 │             - SETGID
  92 └             - SETUID
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cloud-proxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy_deployment.yaml:5
────────────────────────────────────────
   5 [   name: cloud-proxy
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container envoy in deployment cloud-proxy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy_deployment.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────



proxy_deployment1.yaml (kubernetes)
===================================
Tests: 120 (SUCCESSES: 101, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy_deployment1.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'envoy' of Deployment 'cloud-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy_deployment1.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy_deployment1.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy_deployment1.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy_deployment1.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'envoy' of Deployment 'cloud-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy_deployment1.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cloud-proxy-server' of Deployment 'cloud-proxy' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 proxy_deployment1.yaml:16-96
────────────────────────────────────────
  16 ┌       - name: cloud-proxy-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-proxy_server_image
  19 │         ports:
  20 │         - containerPort: 56000
  21 │           name: http2
  22 │         - containerPort: 56001
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy_deployment1.yaml:84-94
────────────────────────────────────────
  84 ┌             add:
  85 │             - CHOWN
  86 │             - DAC_OVERRIDE
  87 │             - FSETID
  88 │             - FOWNER
  89 │             - MKNOD
  90 │             - SETFCAP
  91 │             - SETGID
  92 └             - SETUID
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cloud-proxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxy_deployment1.yaml:5
────────────────────────────────────────
   5 [   name: cloud-proxy
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container envoy in deployment cloud-proxy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy_deployment1.yaml:97-135
────────────────────────────────────────
  97 ┌       - name: envoy
  98 │         imagePullPolicy: IfNotPresent
  99 │         image: envoyproxy/envoy:v1.12.2@sha256:b36ee021fc4d285de7861dbaee01e7437ce1d63814ead6ae3e4dfcad4a951b2e
 100 │         command: ["envoy"]
 101 │         args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
 102 │         env:
 103 │         - name: POD_NAME
 104 │           valueFrom:
 105 └             fieldRef:
 ...   
────────────────────────────────────────



proxy_envoy.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy10.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy10.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy11.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy11.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy2.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy2.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy3.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy3.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy4.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy4.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy5.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy5.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy6.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy6.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy7.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy7.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy8.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy8.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_envoy9.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'proxy-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key", "            private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 proxy_envoy9.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



proxy_pod_deployment.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dummy-v6-proxy' of 'pod' 'dummy-proxy-pod' in 'v6-jobs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dummy-v6-proxy' of Pod 'dummy-proxy-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dummy-v6-proxy" of pod "dummy-proxy-pod" in "v6-jobs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dummy-proxy-pod in v6-jobs namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dummy-proxy-pod in v6-jobs namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxy_pod_deployment.yaml:9-16
────────────────────────────────────────
   9 ┌   hostname: v6proxy
  10 │   subdomain: v6proxy-subdomain
  11 │   containers:
  12 │   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dummy-v6-proxy in pod dummy-proxy-pod (namespace: v6-jobs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxy_pod_deployment.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: dummy-v6-proxy
  13 │     tty: true
  14 │     image: hectorcadavid/dummy-v6-server-proxy
  15 │     ports:
  16 └     - containerPort: 8080
────────────────────────────────────────



proxyless-custom-image_1.yaml (kubernetes)
==========================================
Tests: 146 (SUCCESSES: 96, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 31, MEDIUM: 13, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'foo-bar' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'custom-grpc-app' of Deployment 'foo-bar' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'foo-bar' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'custom-grpc-app' of Deployment 'foo-bar' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'foo-bar' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'custom-grpc-app' of 'deployment' 'foo-bar' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'istio-proxy' of 'deployment' 'foo-bar' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'foo-bar' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'custom-grpc-app' of Deployment 'foo-bar' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'foo-bar' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'custom-grpc-app' of Deployment 'foo-bar' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'foo-bar' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'istio-proxy' of Deployment 'foo-bar' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'foo-bar' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'custom-grpc-app' of Deployment 'foo-bar' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'foo-bar' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'custom-grpc-app' of Deployment 'foo-bar' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'foo-bar' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'custom-grpc-app' of Deployment 'foo-bar' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'foo-bar' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'custom-grpc-app' of Deployment 'foo-bar' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'foo-bar' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'custom-grpc-app' of Deployment 'foo-bar' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'foo-bar' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'custom-grpc-app' of Deployment 'foo-bar' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "foo-bar" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "custom-grpc-app" of deployment "foo-bar" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "istio-proxy" of deployment "foo-bar" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxyless-custom-image_1.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment foo-bar in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxyless-custom-image_1.yaml:4
────────────────────────────────────────
   4 [   name: foo-bar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container foo-bar in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container foo-bar in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment foo-bar in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxyless-custom-image_1.yaml:22-122
────────────────────────────────────────
  22 ┌       imagePullSecrets:
  23 │       - name: myregistrykey
  24 │       containers:
  25 │       - name: istio-proxy
  26 │         image: auto
  27 │         imagePullPolicy: Always
  28 │         securityContext:
  29 │           readOnlyRootFilesystem: false
  30 └       - name: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in deployment foo-bar (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxyless-custom-image_1.yaml:30-76
────────────────────────────────────────
  30 ┌       - name: app
  31 │         image: testing.hub/app:latest
  32 │         imagePullPolicy: Always
  33 │         args:
  34 │         - --metrics=15014
  35 │         - --cluster=cluster-0
  36 │         - --port=8080
  37 │         - --port=3333
  38 └         - --grpc=17777
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container custom-grpc-app in deployment foo-bar (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxyless-custom-image_1.yaml:77-122
────────────────────────────────────────
  77 ┌       - name: custom-grpc-app
  78 │         image: grpc/echo:cpp
  79 │         imagePullPolicy: Always
  80 │         args:
  81 │         - --forwarding_address=0.0.0.0:17777
  82 │         - --metrics=15014
  83 │         - --cluster=cluster-0
  84 │         - --xds-grpc-server=7070
  85 └         - --grpc=17171
  ..   
────────────────────────────────────────



proxyless_1.yaml (kubernetes)
=============================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'foo-bar' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'foo-bar' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'foo-bar' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'istio-proxy' of 'deployment' 'foo-bar' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'foo-bar' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'foo-bar' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'foo-bar' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'istio-proxy' of Deployment 'foo-bar' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'foo-bar' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'foo-bar' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'foo-bar' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'foo-bar' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'foo-bar' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'foo-bar' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'istio-proxy' of Deployment 'foo-bar' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "foo-bar" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "istio-proxy" of deployment "foo-bar" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 proxyless_1.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 └           readOnlyRootFilesystem: false
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment foo-bar in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 proxyless_1.yaml:4
────────────────────────────────────────
   4 [   name: foo-bar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container foo-bar in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment foo-bar in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 proxyless_1.yaml:23-80
────────────────────────────────────────
  23 ┌       imagePullSecrets:
  24 │       - name: myregistrykey
  25 │       containers:
  26 │       - name: istio-proxy
  27 │         image: auto
  28 │         imagePullPolicy: Always
  29 │         securityContext:
  30 │           readOnlyRootFilesystem: false
  31 └       - name: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in deployment foo-bar (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 proxyless_1.yaml:31-80
────────────────────────────────────────
  31 ┌       - name: app
  32 │         image: testing.hub/app:latest
  33 │         imagePullPolicy: Always
  34 │         args:
  35 │         - --metrics=15014
  36 │         - --cluster=cluster-0
  37 │         - --xds-grpc-server=7070
  38 │         - --port=8080
  39 └         - --port=3333
  ..   
────────────────────────────────────────



prueba2_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wordpress' of Deployment 'wordpress' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wordpress' of 'deployment' 'wordpress' in 'wordpress' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wordpress" of deployment "wordpress" in "wordpress" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment wordpress in wordpress namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wordpress in wordpress namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba2_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wordpress in wordpress namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba2_2.yaml:21-40
────────────────────────────────────────
  21 ┌       containers:
  22 │       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────



prueba2_5.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'wordpress-mysql' in 'wordpress' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "wordpress-mysql" in "wordpress" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wordpress-mysql in wordpress namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba2_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wordpress-mysql in wordpress namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba2_5.yaml:21-42
────────────────────────────────────────
  21 ┌       containers:
  22 │       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────



prueba4.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prueba' of Pod 'prueba' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prueba' of Pod 'prueba' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prueba' of 'pod' 'prueba' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prueba' of Pod 'prueba' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prueba' of Pod 'prueba' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prueba' of Pod 'prueba' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prueba' of Pod 'prueba' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prueba' of Pod 'prueba' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prueba' of Pod 'prueba' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prueba' of Pod 'prueba' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prueba' of Pod 'prueba' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prueba' of Pod 'prueba' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prueba" of pod "prueba" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod prueba in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prueba4.yaml:4
────────────────────────────────────────
   4 [   name: prueba
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prueba in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba4.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod prueba in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba4.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: prueba
   8 │     image: clientes-app:latest  # Asegúrate de que coincida con el nombre de tu imagen
   9 │     imagePullPolicy: Never      # Esto indica a Kubernetes que use la imagen local
  10 └     command: ["python3", "-c", "import tkinter; print('Tkinter importado correctamente')"]
────────────────────────────────────────



prueba5.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prueba5.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba5.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



prueba_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wordpress' of Deployment 'wordpress' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wordpress' of 'deployment' 'wordpress' in 'wordpress' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wordpress" of deployment "wordpress" in "wordpress" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment wordpress in wordpress namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wordpress in wordpress namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 │         - name: WORDPRESS_DB_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wordpress in wordpress namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba_2.yaml:21-40
────────────────────────────────────────
  21 ┌       containers:
  22 │       - image: wordpress:6.2.1-apache
  23 │         name: wordpress
  24 │         env:
  25 │         - name: WORDPRESS_DB_HOST
  26 │           value: wordpress-mysql
  27 │         - name: WORDPRESS_DB_PASSWORD
  28 │           value: Ticveintitres12.
  29 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────



prueba_5.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'wordpress-mysql' in 'wordpress' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "wordpress-mysql" in "wordpress" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wordpress-mysql in wordpress namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba_5.yaml:22-38
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 │         - name: MYSQL_USER
  30 └           value: wordpress
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wordpress-mysql in wordpress namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prueba_5.yaml:21-42
────────────────────────────────────────
  21 ┌       containers:
  22 │       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           value: Werase12.
  27 │         - name: MYSQL_DATABASE
  28 │           value: wordpress
  29 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────



ps-deployment.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ps-deployment.yaml:4
────────────────────────────────────────
   4 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ps-deployment.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ps-deployment.yaml:17-35
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: postgres-secret
  ..   
────────────────────────────────────────



ps-deployment1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ps-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ps-deployment1.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 │                 name: postgres-secret
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ps-deployment1.yaml:17-35
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: postgres
  19 │           image: 'postgres:14' # this will not keep you on the same minor version (14.x) and will bump you randomly as new minor version is released
  20 │           imagePullPolicy: IfNotPresent
  21 │           ports:
  22 │             - containerPort: 5432
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: postgres-secret
  ..   
────────────────────────────────────────



ps-deployment2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Deployment 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ps-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ps-deployment2.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 │             name: postgres-secret
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ps-deployment2.yaml:15-46
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: postgres
  17 │         image: 'postgres:latest'
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - secretRef:
  23 └             name: postgres-secret
  ..   
────────────────────────────────────────



ps-deployment3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Deployment 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'postgres' of Deployment 'postgres' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ps-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ps-deployment3.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ps-deployment3.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: postgres
  17 │           image: 'postgres:latest'
  18 │           imagePullPolicy: IfNotPresent
  19 │           ports:
  20 │             - containerPort: 5432
  21 │               hostPort: 5432
  22 │           envFrom:
  23 └             - configMapRef:
  ..   
────────────────────────────────────────



psp_pod.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 psp_pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 psp_pod.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psp_pod.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────



psp_pod1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 psp_pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 psp_pod1.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psp_pod1.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox
   9 │       command: [ "sh", "-c", "sleep 1h" ]
  10 │       securityContext:
  11 └         privileged: true
────────────────────────────────────────



psql-client.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgresql' of Pod 'pg-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgresql' of Pod 'pg-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgresql' of 'pod' 'pg-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgresql' of Pod 'pg-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgresql' of Pod 'pg-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgresql' of Pod 'pg-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgresql' of Pod 'pg-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgresql' of Pod 'pg-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgresql' of Pod 'pg-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgresql' of Pod 'pg-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgresql' of Pod 'pg-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgresql" of pod "pg-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pg-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 psql-client.yaml:5
────────────────────────────────────────
   5 [   name: pg-client
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pg-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pg-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql-client.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container postgresql in pod pg-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 psql-client.yaml:8-12
────────────────────────────────────────
   8 ┌     - image: bitnami/postgresql:11.12.0-debian-10-r13
   9 │       name: postgresql
  10 │       env:
  11 │       - name: ALLOW_EMPTY_PASSWORD
  12 └         value: "yes"
────────────────────────────────────────



psql-deployment.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'compass-prod' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "compass-prod" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in compass-prod namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql-deployment.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in compass-prod namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-configmap
  ..   
────────────────────────────────────────



psql-deployment1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'compass-stage' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "compass-stage" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in compass-stage namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql-deployment1.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-configmap
  25 └             - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in compass-stage namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql-deployment1.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: postgres
  18 │           image: 'postgres:16'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-configmap
  ..   
────────────────────────────────────────



psql.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'cloud' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "cloud" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in cloud namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 │         - name: POSTGRES_USER
  25 └           value: prayuj
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in cloud namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_HOST_AUTH_METHOD
  23 │           value: trust
  24 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────



psql1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'hydra' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "hydra" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in hydra namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 │         - name: POSTGRES_USER
  25 └           value: hydra_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in hydra namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: hydra_db
  24 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────



psql2.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'kratos' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "kratos" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in kratos namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 │         - name: POSTGRES_USER
  25 └           value: kratos_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in kratos namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql2.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: postgres
  18 │         image: postgres:13
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: kratos_db
  24 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────



psql3_3.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Deployment 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 psql3_3.yaml:4
────────────────────────────────────────
   4 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql3_3.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 │         env:
  25 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 psql3_3.yaml:16-44
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: postgres
  18 │         image: postgres:latest
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: psql-config
  24 └         env:
  ..   
────────────────────────────────────────



pss.yaml (kubernetes)
=====================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginxdeployment' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginxdeployment' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginxdeployment' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginxdeployment' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginxdeployment' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginxdeployment' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginxdeployment' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginxdeployment' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginxdeployment' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginxdeployment' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginxdeployment' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginxdeployment' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginxdeployment" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pss.yaml:4
────────────────────────────────────────
   4 [   name: nginx-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pss.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pss.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginxdeployment
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



ptheus-deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ptheus-deployment.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ptheus-deployment.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 │           mountPath: /etc/prometheus
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ptheus-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: config-volume
  22 └           mountPath: /etc/prometheus
────────────────────────────────────────



public-image-deploy.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sa-demo' of Deployment 'sa-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sa-demo' of Deployment 'sa-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sa-demo' of 'deployment' 'sa-demo' in 'rbac-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sa-demo' of Deployment 'sa-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sa-demo' of Deployment 'sa-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sa-demo' of Deployment 'sa-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sa-demo' of Deployment 'sa-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sa-demo' of Deployment 'sa-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sa-demo' of Deployment 'sa-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sa-demo' of Deployment 'sa-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sa-demo' of Deployment 'sa-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sa-demo' of Deployment 'sa-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sa-demo" of deployment "sa-demo" in "rbac-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sa-demo in rbac-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sa-demo in rbac-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 public-image-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       serviceAccountName: my-sa
  18 │       containers:
  19 │       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sa-demo in deployment sa-demo (namespace: rbac-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 public-image-deploy.yaml:19-20
────────────────────────────────────────
  19 ┌       - name: sa-demo
  20 └         image: tasb/nginx-kubectl
────────────────────────────────────────



publicweb.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'publicweb' of Deployment 'publicweb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'publicweb' of Deployment 'publicweb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'publicweb' of 'deployment' 'publicweb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'publicweb' of Deployment 'publicweb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'publicweb' of Deployment 'publicweb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'publicweb' of Deployment 'publicweb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'publicweb' of Deployment 'publicweb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'publicweb' of Deployment 'publicweb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'publicweb' of Deployment 'publicweb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'publicweb' of Deployment 'publicweb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'publicweb' of Deployment 'publicweb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'publicweb' of Deployment 'publicweb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "publicweb" of deployment "publicweb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment publicweb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 publicweb.yaml:4
────────────────────────────────────────
   4 [   name: publicweb
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment publicweb in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container publicweb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment publicweb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 publicweb.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container publicweb in deployment publicweb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 publicweb.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: publicweb
  17 │         image: smarthotels/publicweb:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



publisher-deployment.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'publisher-app' of Deployment 'publisher-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'publisher-app' of Deployment 'publisher-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'publisher-app' of 'deployment' 'publisher-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'publisher-app' of Deployment 'publisher-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'publisher-app' of Deployment 'publisher-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'publisher-app' of Deployment 'publisher-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'publisher-app' of Deployment 'publisher-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'publisher-app' of Deployment 'publisher-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'publisher-app' of Deployment 'publisher-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'publisher-app' of Deployment 'publisher-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'publisher-app' of Deployment 'publisher-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "publisher-app" of deployment "publisher-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment publisher-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 publisher-deployment.yaml:4-9
────────────────────────────────────────
   4 ┌   name: publisher-app
   5 │   labels:
   6 │     app: publisher-app
   7 │     app.kubernetes.io/component: publisher-app
   8 │     app.kubernetes.io/instance: publisher-app
   9 └     app.kubernetes.io/part-of: rabbitmq-servicebus
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment publisher-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container publisher-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment publisher-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 publisher-deployment.yaml:21-30
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 │         imagePullPolicy: IfNotPresent
  29 │       restartPolicy: Always
  30 └       terminationGracePeriodSeconds: 30
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container publisher-app in deployment publisher-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 publisher-deployment.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: publisher-app
  23 │         image: darshanadinushal/rabbitmq-publisher:1.0.0
  24 │         ports:
  25 │         - containerPort: 80
  26 │           protocol: TCP
  27 │         resources: {}
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



publisher_deployment.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'jetstream-publisher' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'jetstream-publisher' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'jetstream-publisher' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "jetstream-publisher" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment jetstream-publisher in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 publisher_deployment.yaml:5
────────────────────────────────────────
   5 [   name: jetstream-publisher
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container jetstream-publisher in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 publisher_deployment.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment jetstream-publisher in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 publisher_deployment.yaml:20-43
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 └           value: /certs/server.crt
  ..   
────────────────────────────────────────



publisher_deployment1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'jetstream-publisher' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'jetstream-publisher' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'jetstream-publisher' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'jetstream-publisher' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "jetstream-publisher" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment jetstream-publisher in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 publisher_deployment1.yaml:5
────────────────────────────────────────
   5 [   name: jetstream-publisher
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container jetstream-publisher in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 publisher_deployment1.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 │           value: /certs/server.crt
  29 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment jetstream-publisher in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 publisher_deployment1.yaml:20-43
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: app
  22 │         image: jetstream_loadtest-publisher_image:latest
  23 │         ports:
  24 │         - containerPort: 8080
  25 │           name: metrics
  26 │         env:
  27 │         - name: PL_SERVER_TLS_CERT
  28 └           value: /certs/server.crt
  ..   
────────────────────────────────────────



pull-never.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tomcat-never' of 'pod' 'pullpolicy-never-1' in 'qa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tomcat-never' of Pod 'pullpolicy-never-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tomcat-never" of pod "pullpolicy-never-1" in "qa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pullpolicy-never-1 in qa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pull-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: tomcat-never
  12 │     image: tomcat
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pullpolicy-never-1 in qa namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pull-never.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: tomcat-never
  12 │     image: tomcat
  13 │     imagePullPolicy: Never
  14 └   restartPolicy: Always
────────────────────────────────────────



pull-secret.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp' of Deployment 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pull-secret.yaml:4
────────────────────────────────────────
   4 [   name: myapp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment myapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pull-secret.yaml:14-22
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pull-secret.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: myapp
  16 │         image: amigoscode/private
  17 │         resources:
  18 │           limits:
  19 │             memory: "128Mi"
  20 │             cpu: "500m"
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────



pullingimageprivehub.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycon' of ReplicaSet 'myrs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycon' of ReplicaSet 'myrs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycon' of 'replicaset' 'myrs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycon' of ReplicaSet 'myrs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycon' of ReplicaSet 'myrs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycon' of ReplicaSet 'myrs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycon' of ReplicaSet 'myrs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycon' of ReplicaSet 'myrs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycon' of ReplicaSet 'myrs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycon' of ReplicaSet 'myrs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycon' of ReplicaSet 'myrs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycon' of ReplicaSet 'myrs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycon" of replicaset "myrs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset myrs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pullingimageprivehub.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myrs
   5 │   labels:
   6 └     sangmesh: sang
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myrs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset myrs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pullingimageprivehub.yaml:19-26
────────────────────────────────────────
  19 ┌       imagePullSecrets:
  20 │       - name: myregistrykey
  21 │       containers:
  22 │       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mycon in replicaset myrs (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pullingimageprivehub.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: mycon
  23 │         image: gheware/sangam:latest
  24 │         args:
  25 │         - sleep
  26 └         - 1d
────────────────────────────────────────



pullpolicy-never.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'pullpolicy-never' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'pullpolicy-never' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'pullpolicy-never' in 'qa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'pullpolicy-never' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'pullpolicy-never' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Pod 'pullpolicy-never' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'pullpolicy-never' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'pullpolicy-never' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'pullpolicy-never' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'pullpolicy-never' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'pullpolicy-never' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'pullpolicy-never' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "pullpolicy-never" in "qa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pullpolicy-never in qa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pullpolicy-never.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: nginx-container
  12 │     image: nginx
  13 └     imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pullpolicy-never in qa namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pullpolicy-never.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: nginx-container
  12 │     image: nginx
  13 │     imagePullPolicy: Never
  14 └   restartPolicy: Always
────────────────────────────────────────



pullpolicy.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'nginxpullpolicy-always' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'nginxpullpolicy-always' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "nginxpullpolicy-always" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginxpullpolicy-always in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pullpolicy.yaml:4
────────────────────────────────────────
   4 [   name: nginxpullpolicy-always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginxpullpolicy-always in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pullpolicy.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginxpullpolicy-always in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pullpolicy.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx-container
   8 │     image: nginx
   9 │     imagePullPolicy: Always
  10 └   restartPolicy: Always
────────────────────────────────────────



punto03-deployment.yaml (kubernetes)
====================================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api-container' of Pod 'api-persona-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'mariadb-container' of Pod 'api-persona-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api-container' of Pod 'api-persona-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mariadb-container' of Pod 'api-persona-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api-container' of 'pod' 'api-persona-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mariadb-container' of 'pod' 'api-persona-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api-container' of Pod 'api-persona-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mariadb-container' of Pod 'api-persona-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api-container' of Pod 'api-persona-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mariadb-container' of Pod 'api-persona-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api-container' of Pod 'api-persona-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mariadb-container' of Pod 'api-persona-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api-container' of Pod 'api-persona-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mariadb-container' of Pod 'api-persona-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api-container' of Pod 'api-persona-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mariadb-container' of Pod 'api-persona-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api-container' of Pod 'api-persona-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mariadb-container' of Pod 'api-persona-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api-container' of Pod 'api-persona-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mariadb-container' of Pod 'api-persona-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api-container' of Pod 'api-persona-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mariadb-container' of Pod 'api-persona-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api-container" of pod "api-persona-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mariadb-container" of pod "api-persona-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod api-persona-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 punto03-deployment.yaml:4-5
────────────────────────────────────────
   4 ┌   name: api-persona-pod
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-persona-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-persona-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod api-persona-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 punto03-deployment.yaml:7-29
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 └         - name: port
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api-container in pod api-persona-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 punto03-deployment.yaml:8-20
────────────────────────────────────────
   8 ┌     - name: api-container
   9 │       image: dardan09/api-persona:1.0.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │       env:
  13 │         - name: host
  14 │           value: localhost
  15 │         - name: port
  16 └           value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mariadb-container in pod api-persona-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 punto03-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌     - name: mariadb-container
  22 │       image: dardan09/bd-api-persona:1.0.0
  23 │       env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: toor
  26 │         - name: MYSQL_ROOT_HOST
  27 │           value: "%"
  28 │       ports:
  29 └         - containerPort: 3306
────────────────────────────────────────



puppetboard_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'puppetboard' of Deployment 'puppetboard' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'puppetboard' of Deployment 'puppetboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'puppetboard' of 'deployment' 'puppetboard' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'puppetboard' of Deployment 'puppetboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'puppetboard' of Deployment 'puppetboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'puppetboard' of Deployment 'puppetboard' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'puppetboard' of Deployment 'puppetboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'puppetboard' of Deployment 'puppetboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'puppetboard' of Deployment 'puppetboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'puppetboard' of Deployment 'puppetboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'puppetboard' of Deployment 'puppetboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "puppetboard" of deployment "puppetboard" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment puppetboard in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 puppetboard_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: puppetboard
   5 │   labels:
   6 └     app.kubernetes.io/name: puppetboard
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container puppetboard in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment puppetboard in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 puppetboard_1.yaml:17-51
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 └         - name: PUPPETBOARD_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container puppetboard in deployment puppetboard (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 puppetboard_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: puppetboard
  19 │         image: ghcr.io/voxpupuli/puppetboard:5.3.0
  20 │         env:
  21 │         - name: PUPPETDB_HOST
  22 │           value: puppetdb.default.svc.cluster.local
  23 │         - name: PUPPETDB_PORT
  24 │           value: '8081'
  25 │         - name: PUPPETBOARD_PORT
  26 └           value: '8080'
  ..   
────────────────────────────────────────



puppetca_2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'puppetca' of Deployment 'puppetca' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'puppetca' of Deployment 'puppetca' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'puppetca' of 'deployment' 'puppetca' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'puppetca' of Deployment 'puppetca' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'puppetca' of Deployment 'puppetca' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'puppetca' of Deployment 'puppetca' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'puppetca' of Deployment 'puppetca' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'puppetca' of Deployment 'puppetca' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'puppetca' of Deployment 'puppetca' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'puppetca' of Deployment 'puppetca' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'puppetca' of Deployment 'puppetca' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "puppetca" of deployment "puppetca" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment puppetca in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 puppetca_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: puppetca
   5 │   labels:
   6 └     app.kubernetes.io/name: puppetca
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container puppetca in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment puppetca in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 puppetca_2.yaml:17-56
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 └         - name: CA_HOSTNAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container puppetca in deployment puppetca (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 puppetca_2.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: puppetca
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-main
  20 │         env:
  21 │         - name: CA_ENABLED
  22 │           value: 'true'
  23 │         - name: AUTOSIGN
  24 │           value: 'true'
  25 │         - name: CA_HOSTNAME
  26 └           value: puppetca.default.svc.cluster.local
  ..   
────────────────────────────────────────



puppetdb_3.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'puppetdb' of Deployment 'puppetdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'puppetdb' of Deployment 'puppetdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'puppetdb' of 'deployment' 'puppetdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'puppetdb' of Deployment 'puppetdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'puppetdb' of Deployment 'puppetdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'puppetdb' of Deployment 'puppetdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'puppetdb' of Deployment 'puppetdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'puppetdb' of Deployment 'puppetdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'puppetdb' of Deployment 'puppetdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'puppetdb' of Deployment 'puppetdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'puppetdb' of Deployment 'puppetdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "puppetdb" of deployment "puppetdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment puppetdb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 puppetdb_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: puppetdb
   5 │   labels:
   6 └     app.kubernetes.io/name: puppetdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container puppetdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment puppetdb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 puppetdb_3.yaml:17-52
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 └         - name: CERTNAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container puppetdb in deployment puppetdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 puppetdb_3.yaml:18-47
────────────────────────────────────────
  18 ┌       - name: puppetdb
  19 │         image: ghcr.io/voxpupuli/container-puppetdb:8.3.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: CERTNAME
  26 └           value: $(POD_METADATA_NAME).default.svc.cluster.local
  ..   
────────────────────────────────────────



puppetserver_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'puppetserver' of Deployment 'puppetserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'puppetserver' of Deployment 'puppetserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'puppetserver' of 'deployment' 'puppetserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'puppetserver' of Deployment 'puppetserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'puppetserver' of Deployment 'puppetserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'puppetserver' of Deployment 'puppetserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'puppetserver' of Deployment 'puppetserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'puppetserver' of Deployment 'puppetserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'puppetserver' of Deployment 'puppetserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'puppetserver' of Deployment 'puppetserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'puppetserver' of Deployment 'puppetserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "puppetserver" of deployment "puppetserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment puppetserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 puppetserver_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: puppetserver
   5 │   labels:
   6 └     app.kubernetes.io/name: puppetserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container puppetserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment puppetserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 puppetserver_2.yaml:17-62
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 └         - name: AUTOSIGN
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container puppetserver in deployment puppetserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 puppetserver_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: puppetserver
  19 │         image: ghcr.io/voxpupuli/container-puppetserver:8.4.0-v1.3.0
  20 │         env:
  21 │         - name: POD_METADATA_NAME
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.name
  25 │         - name: AUTOSIGN
  26 └           value: 'false'
  ..   
────────────────────────────────────────



push-dockerhub-image-to-local-registry.yaml (kubernetes)
========================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Job 'push-to-local-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Job 'push-to-local-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'job' 'push-to-local-registry' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Job 'push-to-local-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Job 'push-to-local-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Job 'push-to-local-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Job 'push-to-local-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Job 'push-to-local-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Job 'push-to-local-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Job 'push-to-local-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Job 'push-to-local-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of job "push-to-local-registry" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0110 (LOW): job push-to-local-registry in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:4
────────────────────────────────────────
   4 [   name: push-to-local-registry
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container push-to-local-registry in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job push-to-local-registry in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:8-19
────────────────────────────────────────
   8 ┌       imagePullSecrets:
   9 │         - name: docker-io
  10 │       containers:
  11 │         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 └             - "-c"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in job push-to-local-registry (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 push-dockerhub-image-to-local-registry.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: my-container
  12 │           image: docker.io/library/fedora:35
  13 │           command: 
  14 │             - "sh"
  15 │           args:
  16 │             - "-c"
  17 └             - "dnf install -y skopeo &&
────────────────────────────────────────



pusher-wave-pusher-wave-clusterrole.yaml (kubernetes)
=====================================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'pusher-wave-pusher-wave' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 pusher-wave-pusher-wave-clusterrole.yaml:16-26
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ""
  18 │   resources:
  19 │   - configmaps
  20 │   - secrets
  21 │   verbs:
  22 │   - list
  23 │   - get
  24 └   - update
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'pusher-wave-pusher-wave' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 pusher-wave-pusher-wave-clusterrole.yaml:35-46
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - apps
  37 │   resources:
  38 │   - deployments
  39 │   - daemonsets
  40 │   - statefulsets
  41 │   verbs:
  42 │   - list
  43 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'pusher-wave-pusher-wave' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 pusher-wave-pusher-wave-clusterrole.yaml:16-26
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ""
  18 │   resources:
  19 │   - configmaps
  20 │   - secrets
  21 │   verbs:
  22 │   - list
  23 │   - get
  24 └   - update
  ..   
────────────────────────────────────────



pusher-wave-pusher-wave-deploy.yaml (kubernetes)
================================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pusher-wave-pusher-wave' of Deployment 'pusher-wave-pusher-wave' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pusher-wave-pusher-wave' of Deployment 'pusher-wave-pusher-wave' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pusher-wave-pusher-wave' of 'deployment' 'pusher-wave-pusher-wave' in 'secret-infra' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pusher-wave-pusher-wave' of Deployment 'pusher-wave-pusher-wave' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pusher-wave-pusher-wave' of Deployment 'pusher-wave-pusher-wave' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pusher-wave-pusher-wave' of Deployment 'pusher-wave-pusher-wave' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pusher-wave-pusher-wave' of Deployment 'pusher-wave-pusher-wave' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pusher-wave-pusher-wave' of Deployment 'pusher-wave-pusher-wave' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pusher-wave-pusher-wave' of Deployment 'pusher-wave-pusher-wave' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pusher-wave-pusher-wave' of Deployment 'pusher-wave-pusher-wave' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pusher-wave-pusher-wave" of deployment "pusher-wave-pusher-wave" in "secret-infra" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pusher-wave-pusher-wave in deployment pusher-wave-pusher-wave (namespace: secret-infra) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pusher-wave-pusher-wave-deploy.yaml:33-35
────────────────────────────────────────
  33 ┌       - image: "quay.io/wave-k8s/wave:v0.5.0"
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: pusher-wave-pusher-wave
────────────────────────────────────────



pushgateway1_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pushgateway' of 'deployment' 'pushgateway-dpl' in 'observability' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pushgateway' of Deployment 'pushgateway-dpl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pushgateway" of deployment "pushgateway-dpl" in "observability" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pushgateway-dpl in observability namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pushgateway-dpl in observability namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pushgateway1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pushgateway in deployment pushgateway-dpl (namespace: observability) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pushgateway1_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────



pushgateway_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pushgateway' of 'deployment' 'pushgateway-dpl' in 'observability' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pushgateway' of Deployment 'pushgateway-dpl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pushgateway' of Deployment 'pushgateway-dpl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pushgateway" of deployment "pushgateway-dpl" in "observability" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pushgateway-dpl in observability namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pushgateway-dpl in observability namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pushgateway_1.yaml:19-23
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pushgateway in deployment pushgateway-dpl (namespace: observability) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pushgateway_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: pushgateway
  21 │         image: prom/pushgateway
  22 │         ports:
  23 └         - containerPort: 9091
────────────────────────────────────────



pv-deployment.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-nfs' of Deployment 'notes-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-nfs' of Deployment 'notes-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-nfs' of 'deployment' 'notes-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-nfs' of Deployment 'notes-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-nfs' of Deployment 'notes-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container-nfs' of Deployment 'notes-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-nfs' of Deployment 'notes-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-nfs' of Deployment 'notes-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-nfs' of Deployment 'notes-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-nfs' of Deployment 'notes-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-nfs' of Deployment 'notes-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-nfs' of Deployment 'notes-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-nfs" of deployment "notes-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment notes-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-deployment.yaml:4
────────────────────────────────────────
   4 [   name: notes-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container notes-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment notes-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 │           name: volume-by-claim
  21 │       volumes:
  22 │       - name: volume-by-claim
  23 │         persistentVolumeClaim:
  24 └           claimName: pvc10gb
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container-nfs in deployment notes-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pv-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: container-nfs
  17 │         image: shekeriev/k8s-notes
  18 │         volumeMounts:
  19 │         - mountPath: /data
  20 └           name: volume-by-claim
────────────────────────────────────────



pv-example1_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-example1_2.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-example1_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-example1_2.yaml:6-20
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: host-volume
   8 │     persistentVolumeClaim:
   9 │       claimName: pvc-hostpath
  10 │   containers:
  11 │   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 └     - /bin/sh
  ..   
────────────────────────────────────────



pv-example2_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-example2_2.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-example2_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-example2_2.yaml:6-20
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: host-volume
   8 │     persistentVolumeClaim:
   9 │       claimName: pvc-hostpath
  10 │   containers:
  11 │   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 └     - /bin/sh
  ..   
────────────────────────────────────────



pv-example_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-example_2.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-example_2.yaml:11-20
────────────────────────────────────────
  11 ┌   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 │     - /bin/sh
  15 │     args:
  16 │     - -c
  17 │     - sleep 600
  18 │     volumeMounts:
  19 │     - name: host-volume
  20 └       mountPath: /mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-example_2.yaml:6-20
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: host-volume
   8 │     persistentVolumeClaim:
   9 │       claimName: pvc-hostpath
  10 │   containers:
  11 │   - image: busybox
  12 │     name: busybox
  13 │     command:
  14 └     - /bin/sh
  ..   
────────────────────────────────────────



pv-model-store.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'model-store' of Pod 'model-store-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'model-store' of Pod 'model-store-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'model-store' of 'pod' 'model-store-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'model-store' of Pod 'model-store-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'model-store' of Pod 'model-store-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'model-store' of Pod 'model-store-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'model-store' of Pod 'model-store-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'model-store' of Pod 'model-store-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'model-store' of Pod 'model-store-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'model-store' of Pod 'model-store-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'model-store' of Pod 'model-store-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'model-store' of Pod 'model-store-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "model-store" of pod "model-store-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod model-store-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-model-store.yaml:4
────────────────────────────────────────
   4 [   name: model-store-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container model-store-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-model-store.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 │       args: [ "infinity" ]
  15 │       volumeMounts:
  16 │         - mountPath: "/pv"
  17 └           name: model-store
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod model-store-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-model-store.yaml:6-17
────────────────────────────────────────
   6 ┌   volumes:
   7 │     - name: model-store
   8 │       persistentVolumeClaim:
   9 │         claimName: task-pv-claim
  10 │   containers:
  11 │     - name: model-store
  12 │       image: ubuntu
  13 │       command: [ "sleep" ]
  14 └       args: [ "infinity" ]
  ..   
────────────────────────────────────────



pv-nfs7_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mynode' of 'pod' 'mynode-nfs-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mynode" of pod "mynode-nfs-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mynode-nfs-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-nfs7_2.yaml:4
────────────────────────────────────────
   4 [   name: mynode-nfs-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mynode-nfs-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mynode-nfs-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-nfs7_2.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 │       mountPath: /mount1
  14 └   volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mynode in pod mynode-nfs-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pv-nfs7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────



pv-nfs8_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mynode' of 'pod' 'mynode-nfs-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mynode' of Pod 'mynode-nfs-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mynode" of pod "mynode-nfs-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mynode-nfs-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-nfs8_2.yaml:4
────────────────────────────────────────
   4 [   name: mynode-nfs-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mynode-nfs-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mynode-nfs-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-nfs8_2.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 │       mountPath: /mount1
  14 └   volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mynode in pod mynode-nfs-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pv-nfs8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: mynode
   8 │     image: dbgurum/mynode:1.0
   9 │     ports:
  10 │     - containerPort: 8000
  11 │     volumeMounts:
  12 │     - name: testpath
  13 └       mountPath: /mount1
────────────────────────────────────────



pv-pod-nginx.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pod-nginx.yaml:5
────────────────────────────────────────
   5 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod-nginx.yaml:12-19
────────────────────────────────────────
  12 ┌     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 │         - containerPort: 80
  16 │           name: "http-server"
  17 │       volumeMounts:
  18 │         - mountPath: "/usr/share/nginx/html"
  19 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod-nginx.yaml:7-19
────────────────────────────────────────
   7 ┌   volumes:
   8 │     - name: task-pv-storage
   9 │       persistentVolumeClaim:
  10 │         claimName: task-pv-claim
  11 │   containers:
  12 │     - name: task-pv-container
  13 │       image: nginx
  14 │       ports:
  15 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv-pod-restore.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod-restore' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod-restore' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod-restore" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod-restore in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pod-restore.yaml:4-6
────────────────────────────────────────
   4 ┌   name: task-pv-pod-restore
   5 │   labels:
   6 └     app: task-pv-pod-restore
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod-restore in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod-restore in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod-restore in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod-restore.yaml:8-20
────────────────────────────────────────
   8 ┌   volumes:
   9 │     - name: task-pv-storage
  10 │       persistentVolumeClaim:
  11 │         claimName: hpvc-restore
  12 │   containers:
  13 │     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container task-pv-container in pod task-pv-pod-restore (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pv-pod-restore.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────



pv-pod.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pod.yaml:4
────────────────────────────────────────
   4 [   name: pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
  ..   
────────────────────────────────────────



pv-pod1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pod1.yaml:4
────────────────────────────────────────
   4 [   name: pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod1.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: nginx
   8 │       image: nginx
   9 │       ports:
  10 │         - name: http
  11 │           containerPort: 80
  12 │       volumeMounts:
  13 │         - name: pv-storage
  14 └           mountPath: "/usr/share/nginx/html"
  ..   
────────────────────────────────────────



pv-pod2.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pv-container' of Pod 'pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pv-container' of 'pod' 'pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pv-container' of Pod 'pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pv-container" of pod "pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pod2.yaml:4
────────────────────────────────────────
   4 [    name: pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod2.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │     - name: pv-storage
   8 │       persistentVolumeClaim:
   9 │         claimName: pv-claim
  10 │   containers:
  11 │     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv-pod3.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pod3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: task-pv-pod
   5 │   labels:
   6 └     app: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod3.yaml:8-20
────────────────────────────────────────
   8 ┌   volumes:
   9 │     - name: task-pv-storage
  10 │       persistentVolumeClaim:
  11 │         claimName: hpvc
  12 │   containers:
  13 │     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container task-pv-container in pod task-pv-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pv-pod3.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: task-pv-container
  14 │       image: docker.io/nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │           name: "http-server"
  18 │       volumeMounts:
  19 │         - mountPath: "/usr/share/nginx/html"
  20 └           name: task-pv-storage
────────────────────────────────────────



pv-pod4.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pod4.yaml:4
────────────────────────────────────────
   4 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod4.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod4.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │     - name: task-pv-storage
   8 │       persistentVolumeClaim:
   9 │         claimName: task-pv-claim
  10 │   containers:
  11 │     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv-pod5.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pv-container' of Pod 'pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pv-container' of 'pod' 'pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pv-container' of Pod 'pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pv-container" of pod "pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pod5.yaml:4
────────────────────────────────────────
   4 [    name: pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod5.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod5.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │     - name: pv-storage
   8 │       persistentVolumeClaim:
   9 │         claimName: pv-claim
  10 │   containers:
  11 │     - name: pv-container
  12 │       image: nginx
  13 │       ports:
  14 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv-pod6.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pod6.yaml:4
────────────────────────────────────────
   4 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod6.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/usr/share/nginx/html"
  18 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pod6.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │     - name: task-pv-storage
   8 │       persistentVolumeClaim:
   9 │         claimName: task-pv-claim
  10 │   containers:
  11 │     - name: task-pv-container
  12 │       image: nginx
  13 │       ports:
  14 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv-pvc-pod.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pvc-pod.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: busybox
   7 └   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pvc-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pvc-pod.yaml:9-26
────────────────────────────────────────
   9 ┌   containers:
  10 │   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 └     resources: {}
  ..   
────────────────────────────────────────



pv-pvc-pod2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'busybox2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pvc-pod2.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: busybox
   7 └   name: busybox2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pvc-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 │     resources: {}
  18 └     volumeMounts: #
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pvc-pod2.yaml:9-26
────────────────────────────────────────
   9 ┌   containers:
  10 │   - args:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - sleep 3600
  14 │     image: busybox
  15 │     imagePullPolicy: IfNotPresent
  16 │     name: busybox
  17 └     resources: {}
  ..   
────────────────────────────────────────



pv-pvc5_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pv-pvc' of Deployment 'pv-pvc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pv-pvc' of Deployment 'pv-pvc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pv-pvc' of 'deployment' 'pv-pvc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pv-pvc' of Deployment 'pv-pvc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pv-pvc' of Deployment 'pv-pvc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pv-pvc' of Deployment 'pv-pvc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pv-pvc' of Deployment 'pv-pvc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pv-pvc' of Deployment 'pv-pvc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pv-pvc' of Deployment 'pv-pvc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pv-pvc' of Deployment 'pv-pvc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pv-pvc" of deployment "pv-pvc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pv-pvc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv-pvc5_2.yaml:4
────────────────────────────────────────
   4 [   name: pv-pvc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pv-pvc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pv-pvc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pvc5_2.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 │         - mountPath: /usr/share/nginx/html
  23 │           name: data
  24 │         resources:
  25 │           limits:
  26 │             memory: 128Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pv-pvc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv-pvc5_2.yaml:14-29
────────────────────────────────────────
  14 ┌       volumes:
  15 │       - name: data
  16 │         persistentVolumeClaim:
  17 │           claimName: mypvc
  18 │       containers:
  19 │       - name: pv-pvc
  20 │         image: nginx
  21 │         volumeMounts:
  22 └         - mountPath: /usr/share/nginx/html
  ..   
────────────────────────────────────────


