
Report Summary

┌──────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                          Target                          │    Type    │ Misconfigurations │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistantVolume1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Persistent Volume in Google Cloud.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Persistent Volume.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ path_based_ingress.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pathbased-ingress.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pause-deployment.yaml                                    │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pause-pods.yaml                                          │ kubernetes │        14         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume.yaml                                         │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume1.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume1_1.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume1_2.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume1_3.yaml                                      │ kubernetes │        34         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume2.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume2_1.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume2_2.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume2_3.yaml                                      │ kubernetes │        34         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume3.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume3_1.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume3_2.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume3_3.yaml                                      │ kubernetes │        34         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume4.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume4_1.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume4_2.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume4_3.yaml                                      │ kubernetes │        34         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume5.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume5_1.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume5_2.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume5_3.yaml                                      │ kubernetes │        34         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume_1.yaml                                       │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume_2.yaml                                       │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pauseResume_3.yaml                                       │ kubernetes │        34         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay.yaml                                                 │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay1.yaml                                                │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay1_1.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay2.yaml                                                │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay2_1.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay3.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay3_1.yaml                                              │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay4.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay4_1.yaml                                              │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pay_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-dep1.yaml                                        │ kubernetes │         8         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-dep3.yaml                                        │ kubernetes │         8         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-dep4.yaml                                        │ kubernetes │         8         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-depl.yaml                                        │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-deployment-fix.yaml                              │ kubernetes │        15         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-deployment-fix1.yaml                             │ kubernetes │        15         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-deployment-fix2.yaml                             │ kubernetes │        15         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-deployment-fix3.yaml                             │ kubernetes │        15         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-hsc.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-hsc1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-ingress.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-ingress1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-ingress2.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-management-service-deployment.yaml               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-management-service.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-mongo-depl.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-mongo-service.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-claim0-persistentvolumeclaim.yaml        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment1.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment1_1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment2.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment2_1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment3.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment4.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment5.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment5_1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-deployment_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-service.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service-service1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service.yaml                                     │ kubernetes │        14         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service2.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service3.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service4.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service5.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service6.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service7.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service8.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service9.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-service_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-srv.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment-svc3.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment1.yaml                                            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment2.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment3.yaml                                            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment3_1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment4.yaml                                            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment5.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment6.yaml                                            │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment6_1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment7.yaml                                            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment7_1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment8.yaml                                            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment9.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payment_1.yaml                                           │ kubernetes │        15         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl.yaml                                       │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl1.yaml                                      │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl10.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl10_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl11.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl11_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl12.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl12_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl13.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl13_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl14.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl14_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl15.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl15_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl16.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl16_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl17.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl17_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl18.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl18_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl19.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl19_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl1_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl2.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl20.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl20_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl2_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl3.yaml                                      │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl3_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl4.yaml                                      │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl4_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl5.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl5_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl6.yaml                                      │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl6_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl7.yaml                                      │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl7_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl8.yaml                                      │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl8_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl9.yaml                                      │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl9_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-depl_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl.yaml                                 │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl1.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl10.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl10_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl11.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl11_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl12.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl12_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl13.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl13_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl14.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl14_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl15.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl15_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl16.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl16_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl17.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl17_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl18.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl18_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl19.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl19_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl1_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl2.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl2_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl3.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl3_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl4.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl4_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl5.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl5_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl6.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl6_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl7.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl7_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl8.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl8_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl9.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl9_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo-depl_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo1.yaml                                     │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo1_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments-mongo_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments.yaml                                            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments1.yaml                                           │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments1_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payments_1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice-deployment.yaml                           │ kubernetes │        13         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice-service.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice1.yaml                                     │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice10.yaml                                    │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice10_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice11.yaml                                    │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice11_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice13.yaml                                    │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice13_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice14.yaml                                    │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice14_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice15.yaml                                    │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice15_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice17.yaml                                    │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice17_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice18.yaml                                    │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice18_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice19.yaml                                    │ kubernetes │        13         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice19_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice1_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice2.yaml                                     │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice21.yaml                                    │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice21_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice22.yaml                                    │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice22_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice23.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice23_1.yaml                                  │ kubernetes │        14         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice23_2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice26.yaml                                    │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice26_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice27.yaml                                    │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice27_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice29.yaml                                    │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice29_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice29_2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice2_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice30.yaml                                    │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice30_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice30_2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice31.yaml                                    │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice31_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice31_2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice4.yaml                                     │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice4_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice5.yaml                                     │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice5_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice7.yaml                                     │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice7_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice8.yaml                                     │ kubernetes │         5         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ paymentservice8_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payroll-deployment.yaml                                  │ kubernetes │        13         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payroll-deployment_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ payroll-ingress.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pbs.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pbs_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pbs_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc1.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc2.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc2_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc2_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc2_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc3.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc4.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc4_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc4_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc4_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc5.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc6.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc6_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc6_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc6_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc7.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc8.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc8_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc8_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc8_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc9.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc_1.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc_2.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pc_3.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pcf-configmap1.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pcf-deployment1.yaml                                     │ kubernetes │        29         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pcf-service1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pci-test1.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pci-test1_2.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pci-test1_3.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pci-test1_4.yaml                                         │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-assert.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-assert1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-assert1_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-assert1_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-assert1_3.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-assert_1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-assert_2.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-bad.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-bad1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-bad2.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-bad3.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-bad4.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-generated.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-generated1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-generated2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-generated3.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-generated4.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good1.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good1_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good2.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good2_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good3.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good3_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good4.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good4_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb-good_1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb120.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb120_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb120_2.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb120_3.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb120_4.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb120_5.yaml                                            │ kubernetes │         6         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb157.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb158.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb168.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb168_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb169.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb169_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb174.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb175.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb176.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb177.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb179.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb179_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb180.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb180_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb186.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb186_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb187.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb187_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb188.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb188_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb189.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb189_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb190.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb190_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb191.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb191_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb202.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb203.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb209.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb211.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb212.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb213.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb214.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb236.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb253.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb254.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb255.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb256.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb257.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb258.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb261.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb262.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb27.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb28.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb29.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb299.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb30.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb300.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb301.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb302.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb316.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb317.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb325.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb377.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb378.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb379.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb401.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb402.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb427.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb428.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb5.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb6.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb7.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb76.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb8.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdb_example.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdbfastapi.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdbp.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdbweb.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdfdocument_editor_role.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pdfdocument_viewer_role.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pedidos.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pedidos_1.yaml                                           │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Dealer-cli.yaml                                     │ kubernetes │        14         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Dealer-svc.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Dealer-svc_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Dealer.yaml                                         │ kubernetes │        26         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Manufacturer-cli.yaml                               │ kubernetes │        14         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Manufacturer-svc.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Manufacturer-svc_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Manufacturer.yaml                                   │ kubernetes │        26         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Mvd-cli.yaml                                        │ kubernetes │        14         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Mvd-svc.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Mvd-svc_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer0Mvd.yaml                                            │ kubernetes │        26         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer1_1.yaml                                             │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer_editor_role.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ peer_viewer_role.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_daemonset.yaml                                       │ kubernetes │        29         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_daemonset1.yaml                                      │ kubernetes │        29         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_deployment.yaml                                      │ kubernetes │        15         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_deployment1.yaml                                     │ kubernetes │        15         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_host_mounts.yaml                                     │ kubernetes │        20         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_host_mounts1.yaml                                    │ kubernetes │        20         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_mounts.yaml                                          │ kubernetes │        20         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_mounts1.yaml                                         │ kubernetes │        20         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_resources.yaml                                       │ kubernetes │        15         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pem_resources1.yaml                                      │ kubernetes │        15         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pembayaran-service.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pending-pod.yaml                                         │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pending-pod1.yaml                                        │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pending1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pending1_1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pending1_2.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pengiriman-service.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-assets-data-persistentvolumeclaim.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-assets-data-persistentvolumeclaim1.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-backend-deployment.yaml                           │ kubernetes │        51         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-backend-deployment1.yaml                          │ kubernetes │        51         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-backend-service.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-backend-service1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-exporter-deployment.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-exporter-deployment1.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-exporter-service.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-exporter-service1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-frontend-configmap.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-frontend-configmap1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-frontend-deployment.yaml                          │ kubernetes │        20         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-frontend-deployment1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-frontend-service.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-frontend-service1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-networkpolicy.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-networkpolicy1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-postgres-data-persistentvolumeclaim.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-postgres-data-persistentvolumeclaim1.yaml         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-postgres-deployment.yaml                          │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-postgres-deployment1.yaml                         │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-postgres-service.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-postgres-service1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-redis-deployment.yaml                             │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-redis-deployment1.yaml                            │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-redis-service.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ penpot-redis-service1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b.yaml    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_1.yaml  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_11.yaml │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_12.yaml │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_13.yaml │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_2.yaml  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_3.yaml  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_4.yaml  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_5.yaml  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml  │ kubernetes │        13         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_7.yaml  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_8.yaml  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_9.yaml  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ perclaim.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ percona.yaml                                             │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ percona_1.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ periodic.yaml                                            │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permission.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permission_1.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permission_2.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions-metrics-server-exporter.yaml                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions-metrics-server-exporter_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions-metrics-server-exporter_2.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions4.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions4_1.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions5.yaml                                        │ kubernetes │         4         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions5_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions5_2.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions5_3.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissions_pod.yaml                                     │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissive-clusterrole.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissive-clusterrole1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissoes.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissoes1.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissoes1_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissoes2.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissoes3.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permissoes_1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permitir-acesso-nginx-ingress.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ permitir-redis-somente-mesmo-ns.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pers-vol-claim-hostpath.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pers-vol-claim-nfs.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pers-vol-hostpath.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pers-vol-nfs.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ pers.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persist-vol.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistant-volume-claim.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistant-volume-claim1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistant-volume.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistant-volume1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistant-volumes-5.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistant-volumes-5_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistant-volumes-5_2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistant-volumes-5_3.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistant-volumes-5_4.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistantVolume.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistantvol.yaml                                       │ kubernetes │        17         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistantvol_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistence-volume-claim.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistence-volume-claim6.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistence-volume-claim7.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistence-volume.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistence-volume6.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistence-volume7.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistence-volume8.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistence5.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistence6.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-vol-claim-server-app.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-vol-claim-server-app1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-vol-server-app.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-vol-server-app1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-vol.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-vol1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volue.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-binding.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-binding1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-binding2.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-binding3.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-binding4.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-role.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-role1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-role2.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-role3.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-binder-role4.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim-5g.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim-default.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim-default_1.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim-definition.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim-mount-pod-definition.yaml        │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim.yaml.verified.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim10.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim11.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim12.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim13.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim14.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim15.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim16.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim17.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim18.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim19.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim2.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim20.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim22.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim23.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim24.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim26.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim27.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim29.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim3.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim30.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim31.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim32.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim33.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim34.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim35.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim36.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim37.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim39.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim4.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim40.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim41.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim41_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim42.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim43.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim44.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim45.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim45_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim46.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim5.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim6.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim7.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claim8.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims10.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims10_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims11.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims11_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims12.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims13.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims13_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims13_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims1_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims2.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims2_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims3.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims3_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims4.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims4_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims5.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims5_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims6.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims6_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims8.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims8_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims9.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims9_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-claims_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-clame-definition.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-definition.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-definition1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-nfs.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-nfs1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-nfs2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-nfs3.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-nfs3_1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-nfs3_2.yaml                            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-pod.yaml                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume-pod1.yaml                              │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume.yaml.verified.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume10.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume10_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume11.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume12.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume13.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume13_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume13_2.yaml                               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume14.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume14_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume15.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume16.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume17.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume18.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume18_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume19.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume1_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume20.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume21.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume210.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume23.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume24.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume25.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume26.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume27.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume27_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume28.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume29.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume3.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume30.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume30_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume32.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume33.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume34.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume34_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume34_2.yaml                               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume35.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume35_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume36.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume36_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume37.yaml                                 │ kubernetes │        18         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume38.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume38_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume38_2.yaml                               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume39.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume39_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume4.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume40.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume41.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume42.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume42_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume44.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume44_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume44_2.yaml                               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume45.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume45_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume45_2.yaml                               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume46.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume47.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume47_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume48.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume49.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume49_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume4_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume4_2.yaml                                │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume5.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume50.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume50_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume51.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume52.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume52_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume53.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume54.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume54_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume54_2.yaml                               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume55.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume56.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume56_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume57.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume58.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume59.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume5_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume6.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume60.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume60_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume60_2.yaml                               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume61.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume61_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume62.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume62_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume63.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume63_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume64.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume65.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume65_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume7.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume8.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume9.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume9_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume9_2.yaml                                │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volume_2.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumen.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes10.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_10.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_3.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_4.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_5.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_6.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_7.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_8.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes11_9.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes12.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes12_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes12_2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes13.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes13_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes14.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes14_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes14_2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes15.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes15_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes15_2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes1_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes1_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes2_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes2_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes3.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes3_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes3_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes4.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes4_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes4_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes5.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes5_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes5_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes6.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes6_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes6_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_10.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_3.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_4.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_5.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_6.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_7.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_8.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes7_9.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes8.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes8_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes8_2.yaml                               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes8_3.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes9.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes9_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes9_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-volumes_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-web-app-volume-claim.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent-web-app-volume.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVol.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVol1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume-deploy.yaml                             │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume-deploy1.yaml                            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume-nfs.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume-nfs1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume-nfs2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume-nfs4.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume-claim.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume-nfs3.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume-nfs3_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume-nfs5.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume-ping.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume-ping1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume-ping2.yaml                              │ kubernetes │         0         │
└──────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


pause-deployment.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pause-container' of Deployment 'pause-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pause-container' of Deployment 'pause-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pause-container' of 'deployment' 'pause-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pause-container' of Deployment 'pause-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pause-container' of Deployment 'pause-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pause-container' of Deployment 'pause-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pause-container' of Deployment 'pause-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pause-container' of Deployment 'pause-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pause-container' of Deployment 'pause-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pause-container' of Deployment 'pause-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pause-container" of deployment "pause-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pause-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pause-deployment.yaml:4-7
────────────────────────────────────────
   4 ┌   name: pause-deployment
   5 │   labels:
   6 │     app: pause
   7 └     type: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pause-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pause-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pause-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 0
  19 │       containers:
  20 │         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pause-container in deployment pause-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pause-deployment.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: pause-container
  21 │           image: public.ecr.aws/eks-distro/kubernetes/pause:3.7
  22 │           resources:
  23 │             requests:
  24 └               cpu: 1
────────────────────────────────────────



pause-pods.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pause-pod' of Deployment 'sweeper-pause-pods' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pause-pod' of Deployment 'sweeper-pause-pods' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pause-pod' of 'deployment' 'sweeper-pause-pods' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pause-pod' of Deployment 'sweeper-pause-pods' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pause-pod' of Deployment 'sweeper-pause-pods' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pause-pod' of Deployment 'sweeper-pause-pods' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pause-pod' of Deployment 'sweeper-pause-pods' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'sweeper-pause-pods' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 pause-pods.yaml:8-45
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       run: sweeper-pause-pod
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         run: sweeper-pause-pod
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pause-pod" of deployment "sweeper-pause-pods" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sweeper-pause-pods in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sweeper-pause-pods in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pause-pods.yaml:17-45
────────────────────────────────────────
  17 ┌       priorityClassName: overprovisioning
  18 │       affinity:
  19 │         podAntiAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │           - labelSelector:
  22 │               matchLabels:
  23 │                 app: sweeper-pause-pod
  24 │             topologyKey: "kubernetes.io/hostname"
  25 └       terminationGracePeriodSeconds: 0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pause-pod in deployment sweeper-pause-pods (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pause-pods.yaml:27-35
────────────────────────────────────────
  27 ┌       - name: pause-pod
  28 │         image: registry.k8s.io/pause:3.9
  29 │         resources:
  30 │           requests:
  31 │             cpu: 1
  32 │             memory: 1Gi
  33 │           limits:
  34 │             cpu: 1
  35 └             memory: 1Gi
────────────────────────────────────────



pauseResume.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume1_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume1_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume1_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume1_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume1_2.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume1_3.yaml (kubernetes)
================================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mytomcat' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mytomcat" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume1_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume1_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume1_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume1_3.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 │         - containerPort: 80
  22 │       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────



pauseResume2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume2.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume2_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume2_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume2_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume2_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume2_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume2_2.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume2_3.yaml (kubernetes)
================================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mytomcat' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mytomcat" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume2_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume2_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume2_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume2_3.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 │         - containerPort: 80
  22 │       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────



pauseResume3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume3.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume3_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume3_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume3_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume3_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume3_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume3_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume3_2.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume3_3.yaml (kubernetes)
================================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mytomcat' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mytomcat" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume3_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume3_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume3_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume3_3.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 │         - containerPort: 80
  22 │       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────



pauseResume4.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume4.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume4_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume4_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume4_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume4_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume4_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume4_2.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume4_3.yaml (kubernetes)
================================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mytomcat' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mytomcat" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume4_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume4_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume4_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume4_3.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 │         - containerPort: 80
  22 │       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────



pauseResume5.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume5.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume5_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume5_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume5_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume5_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume5_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume5_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume5_2.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume5_3.yaml (kubernetes)
================================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mytomcat' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mytomcat" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume5_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume5_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume5_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume5_3.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 │         - containerPort: 80
  22 │       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────



pauseResume_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume_2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume_2.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pauseResume_3.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mytomcat' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mytomcat' of Deployment 'mydeployments' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mytomcat' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mytomcat" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pauseResume_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume_3.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pauseResume_3.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.23
  20 │         ports:
  21 │         - containerPort: 80
  22 │       - name: mytomcat
  23 │         image: tomcat
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────



pay.yaml (kubernetes)
=====================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pay' of ReplicationController 'pay-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pay' of 'replicationcontroller' 'pay-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pay' of ReplicationController 'pay-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pay" of replicationcontroller "pay-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pay-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pay.yaml:4
────────────────────────────────────────
   4 [   name: pay-rc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pay-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pay-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay.yaml:12-16
────────────────────────────────────────
  12 ┌       containers:
  13 │       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pay in replicationcontroller pay-rc (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pay.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────



pay1.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pay' of ReplicationController 'pay-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pay' of 'replicationcontroller' 'pay-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pay' of ReplicationController 'pay-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pay" of replicationcontroller "pay-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pay-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pay1.yaml:4
────────────────────────────────────────
   4 [   name: pay-rc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pay-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pay-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay1.yaml:12-16
────────────────────────────────────────
  12 ┌       containers:
  13 │       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pay in replicationcontroller pay-rc (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pay1.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────



pay2.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pay' of ReplicationController 'pay-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pay' of 'replicationcontroller' 'pay-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pay' of ReplicationController 'pay-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pay' of ReplicationController 'pay-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pay" of replicationcontroller "pay-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pay-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pay2.yaml:4
────────────────────────────────────────
   4 [   name: pay-rc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pay-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pay-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay2.yaml:12-16
────────────────────────────────────────
  12 ┌       containers:
  13 │       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pay in replicationcontroller pay-rc (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pay2.yaml:13-16
────────────────────────────────────────
  13 ┌       - image: smlinux/pay
  14 │         name: pay
  15 │         ports:
  16 └         - containerPort: 8080
────────────────────────────────────────



pay3_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pay-container' of 'deployment' 'pay-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pay-container" of deployment "pay-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pay-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pay3_1.yaml:4
────────────────────────────────────────
   4 [   name: pay-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pay-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pay-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pay-container in deployment pay-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pay3_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pay-container
  18 │         image: whatwant/node-web:2.0
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────



pay4_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pay-container' of 'deployment' 'pay-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pay-container' of Deployment 'pay-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pay-container" of deployment "pay-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pay-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pay4_1.yaml:4
────────────────────────────────────────
   4 [   name: pay-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pay-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pay-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pay4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pay-container in deployment pay-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pay4_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: pay-container
  19 │         image: whatwant/node-web:2.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



payment-dep1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 payment-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "payment" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment payment in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 payment-dep1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-dep1.yaml:19-56
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment payment (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────



payment-dep3.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 payment-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "payment" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment payment in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 payment-dep3.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-dep3.yaml:19-56
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment payment (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────



payment-dep4.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-dep4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-dep4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 payment-dep4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-dep4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "payment" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-dep4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment payment in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 payment-dep4.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-dep4.yaml:19-53
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 └             cpu: 99m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment payment (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-dep4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────



payment-depl.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service' of Deployment 'payment-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service' of Deployment 'payment-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service' of 'deployment' 'payment-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-service' of Deployment 'payment-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service' of Deployment 'payment-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-service' of Deployment 'payment-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service' of Deployment 'payment-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-service' of Deployment 'payment-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-service' of Deployment 'payment-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-service' of Deployment 'payment-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service' of Deployment 'payment-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service' of Deployment 'payment-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service" of deployment "payment-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-depl.yaml:4-5
────────────────────────────────────────
   4 ┌   name: payment-depl
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 └                   key: JWT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-service in deployment payment-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-depl.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: payment-service
  18 │           image: eddie1322/payment-service:latest
  19 │           env:
  20 │             - name: JWT_SECRET
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   name: jwt-secret
  24 │                   key: JWT_SECRET
  25 └             - name: MONGO_URI
  ..   
────────────────────────────────────────



payment-deployment-fix.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-fix' of 'deployment' 'payment-fix' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-fix" of deployment "payment-fix" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-fix in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-deployment-fix.yaml:4-7
────────────────────────────────────────
   4 ┌   name: payment-fix
   5 │   labels:
   6 │     service: payment
   7 └     stage: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-fix in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-fix in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-deployment-fix.yaml:20-38
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 └                 fieldPath: status.hostIP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-fix in deployment payment-fix (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-deployment-fix.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────



payment-deployment-fix1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-fix' of 'deployment' 'payment-fix' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-fix" of deployment "payment-fix" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-fix in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-deployment-fix1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: payment-fix
   5 │   labels:
   6 │     service: payment
   7 └     stage: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-fix in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-fix in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-deployment-fix1.yaml:20-38
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 └                 fieldPath: status.hostIP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-fix in deployment payment-fix (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-deployment-fix1.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────



payment-deployment-fix2.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-fix' of 'deployment' 'payment-fix' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-fix" of deployment "payment-fix" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-fix in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-deployment-fix2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: payment-fix
   5 │   labels:
   6 │     service: payment
   7 └     stage: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-fix in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-fix in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-deployment-fix2.yaml:20-38
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 └                 fieldPath: status.hostIP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-fix in deployment payment-fix (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-deployment-fix2.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────



payment-deployment-fix3.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-fix' of 'deployment' 'payment-fix' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-fix' of Deployment 'payment-fix' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-fix' of Deployment 'payment-fix' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-fix" of deployment "payment-fix" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-fix in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-deployment-fix3.yaml:4-7
────────────────────────────────────────
   4 ┌   name: payment-fix
   5 │   labels:
   6 │     service: payment
   7 └     stage: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-fix in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-fix in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-deployment-fix3.yaml:20-38
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 └                 fieldPath: status.hostIP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-fix in deployment payment-fix (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-deployment-fix3.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: payment-fix
  22 │         image: robotshop/rs-payment-fix:latest
  23 │         # agent networking access
  24 │         env:
  25 │           - name: INSTANA_AGENT_HOST
  26 │             valueFrom:
  27 │               fieldRef:
  28 │                 fieldPath: status.hostIP
  29 └         ports:
  ..   
────────────────────────────────────────



payment-management-service-deployment.yaml (kubernetes)
=======================================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-management-service' of Deployment 'payment-management-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-management-service' of Deployment 'payment-management-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-management-service' of 'deployment' 'payment-management-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-management-service' of Deployment 'payment-management-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-management-service' of Deployment 'payment-management-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-management-service' of Deployment 'payment-management-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-management-service' of Deployment 'payment-management-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-management-service' of Deployment 'payment-management-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-management-service' of Deployment 'payment-management-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-management-service' of Deployment 'payment-management-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-management-service' of Deployment 'payment-management-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-management-service' of Deployment 'payment-management-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-management-service" of deployment "payment-management-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-management-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-management-service-deployment.yaml:4
────────────────────────────────────────
   4 [   name: payment-management-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-management-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-management-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-management-service-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-management-service in deployment payment-management-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: payment-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-payment-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3003
────────────────────────────────────────



payment-mongo-depl.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-mongo' of 'deployment' 'payment-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-mongo' of Deployment 'payment-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-mongo" of deployment "payment-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-mongo-depl.yaml:4-5
────────────────────────────────────────
   4 ┌   name: payment-mongo-depl
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-mongo-depl.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-mongo-depl.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: payment-mongo
  18 └           image: mongo
────────────────────────────────────────



payment-service-deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service-app' of 'deployment' 'payment-service-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service-app" of deployment "payment-service-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-service-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-service-deployment.yaml:4
────────────────────────────────────────
   4 [   name: payment-service-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-service-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-service-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment.yaml:14-30
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-service-app in deployment payment-service-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-service-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mervanmunis/paymentservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────



payment-service-deployment1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service-app' of 'deployment' 'payment-service-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service-app" of deployment "payment-service-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-service-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-service-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: payment-service-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-service-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-service-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment1.yaml:14-30
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-service-app in deployment payment-service-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-service-deployment1.yaml:15-30
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: mohkeita/paymentservice
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: CONFIG_SERVER_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────



payment-service-deployment2.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service-app' of 'deployment' 'payment-service-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service-app" of deployment "payment-service-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-service-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-service-deployment2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: payment-service-app
   5 │   namespace: default
   6 │   labels:
   7 └     app: payment-service-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-service-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-service-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment2.yaml:23-43
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-service-app in deployment payment-service-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-service-deployment2.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: payment-service-app
  25 │         image: 123joker/paymentservice:0.0.1
  26 │         ports:
  27 │         - containerPort: 8081
  28 │         env:
  29 │         - name: EUREKA_SERVER_ADDRESS
  30 │           valueFrom:
  31 │             configMapKeyRef:
  32 └               key: eureka_service_address
  ..   
────────────────────────────────────────



payment-service-deployment3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'auth-service' of Deployment 'payment-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'auth-service' of Deployment 'payment-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'auth-service' of 'deployment' 'payment-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'auth-service' of Deployment 'payment-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'auth-service' of Deployment 'payment-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'auth-service' of Deployment 'payment-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'auth-service' of Deployment 'payment-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'auth-service' of Deployment 'payment-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'auth-service' of Deployment 'payment-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'auth-service' of Deployment 'payment-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'auth-service' of Deployment 'payment-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'auth-service' of Deployment 'payment-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "auth-service" of deployment "payment-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-service-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: payment-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment3.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container auth-service in deployment payment-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-service-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: auth-service
  17 │         image: sanjananilanka/payment-service:latest
  18 │         ports:
  19 └         - containerPort: 2000
────────────────────────────────────────



payment-service-deployment4.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payment-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payment-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payment-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payment-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payment-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payment-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payment-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payment-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payment-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payment-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payment-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payment-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'payments' of Deployment 'payment-service' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payment-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-service-deployment4.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: C:\Users\nadun\AppData\Local\Microsoft\WinGet\Links\kompose.exe convert
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: payment-service
  10 └   name: payment-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment4.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 │           ports:
  37 └             - containerPort: 3001
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment4.yaml:28-48
────────────────────────────────────────
  28 ┌       containers:
  29 │         - env:
  30 │             - name: CLIENT_URL
  31 │               value: http://localhost:5173
  32 │             - name: STRIPE_SECRET_KEY
  33 │               value: sk_test_51PBff92LxlKPHBMAiyaAfpPv4m43et8Lo3JSoce8Vy6hODBwhwcOghK5UnPWsKEqHN1B0KYScn4raFtoFaYQh5tW00MSqrccuW
  34 │           image: payment-service
  35 │           name: payments
  36 └           ports:
  ..   
────────────────────────────────────────



payment-service-deployment5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service-app' of 'deployment' 'payment-service-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-service-app' of Deployment 'payment-service-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service-app' of Deployment 'payment-service-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service-app" of deployment "payment-service-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-service-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-service-deployment5.yaml:4
────────────────────────────────────────
   4 [   name: payment-service-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-service-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-service-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service-deployment5.yaml:14-34
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-service-app in deployment payment-service-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-service-deployment5.yaml:15-34
────────────────────────────────────────
  15 ┌       - name: payment-service-app
  16 │         image: valton93/paymentservice
  17 │         ports:
  18 │         - containerPort: 8081
  19 │         env:
  20 │         - name: CONFIG_SERVER
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 └               key: config-url
  ..   
────────────────────────────────────────



payment-service.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service' of Deployment 'payment-service-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service' of Deployment 'payment-service-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service' of 'deployment' 'payment-service-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service' of Deployment 'payment-service-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service' of Deployment 'payment-service-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service' of Deployment 'payment-service-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service' of Deployment 'payment-service-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service" of deployment "payment-service-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-service-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment-service.yaml:4-7
────────────────────────────────────────
   4 ┌   name: payment-service-deployment
   5 │   labels:
   6 │     app: payment-service
   7 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-service-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-service-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment-service.yaml:20-53
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-service in deployment payment-service-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment-service.yaml:21-53
────────────────────────────────────────
  21 ┌       - name: payment-service
  22 │         image: mrtousif/payment-service:main
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources:
  25 │           requests:
  26 │             cpu: 100m
  27 │             memory: 100Mi
  28 │           limits:
  29 └             cpu: 500m
  ..   
────────────────────────────────────────



payment1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service' of 'deployment' 'zakaa-payment-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service' of Deployment 'zakaa-payment-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service" of deployment "zakaa-payment-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment zakaa-payment-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: zakaa-payment-deployment
   5 │   labels:
   6 └     name:  payment-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container zakaa-payment-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment zakaa-payment-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment1.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-service in deployment zakaa-payment-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment1.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────



payment3.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mydocctor-payment-service' of 'deployment' 'mydocctor-payment-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mydocctor-payment-service' of Deployment 'mydocctor-payment-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mydocctor-payment-service" of deployment "mydocctor-payment-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydocctor-payment-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment3.yaml:4
────────────────────────────────────────
   4 [   name: mydocctor-payment-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydocctor-payment-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydocctor-payment-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment3.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mydocctor-payment-service in deployment mydocctor-payment-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mydocctor-payment-service
  17 │         image: arjun164/mydocctor-payment:latest
  18 │         ports:
  19 │         - containerPort: 4006
  20 │         envFrom:
  21 │         - configMapRef:
  22 └             name: payments-service-config
────────────────────────────────────────



payment4.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service' of 'deployment' 'learnwise-payment-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service' of Deployment 'learnwise-payment-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service" of deployment "learnwise-payment-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment learnwise-payment-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: learnwise-payment-deployment
   5 │   labels:
   6 └     name:  payment-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container learnwise-payment-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment learnwise-payment-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment4.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-service in deployment learnwise-payment-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────



payment6.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'whereami' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'whereami' of Deployment 'payment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'whereami' of 'deployment' 'payment' in 'payment' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'whereami' of Deployment 'payment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'whereami' of Deployment 'payment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'whereami' of Deployment 'payment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'whereami' of Deployment 'payment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'whereami' of Deployment 'payment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'whereami' of Deployment 'payment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'whereami' of Deployment 'payment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'whereami' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "whereami" of deployment "payment" in "payment" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment in payment namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in payment namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment6.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container whereami in deployment payment (namespace: payment) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment6.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: whereami
  18 │         image: us-docker.pkg.dev/google-samples/containers/gke/whereami:v1.2.11
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: METADATA
  23 └           value: payment
────────────────────────────────────────



payment7.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'eduverse-payment-service' of 'deployment' 'eduverse-payment-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'eduverse-payment-service' of Deployment 'eduverse-payment-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "eduverse-payment-service" of deployment "eduverse-payment-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment eduverse-payment-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment7.yaml:4
────────────────────────────────────────
   4 [   name: eduverse-payment-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container eduverse-payment-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment eduverse-payment-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment7.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container eduverse-payment-service in deployment eduverse-payment-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment7.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-payment:latest
  17 │         name: eduverse-payment-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: payment-config
────────────────────────────────────────



payment8.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service' of Deployment 'etutor-payment-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service' of Deployment 'etutor-payment-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service' of 'deployment' 'etutor-payment-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payment-service' of Deployment 'etutor-payment-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service' of Deployment 'etutor-payment-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payment-service' of Deployment 'etutor-payment-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service' of Deployment 'etutor-payment-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment-service' of Deployment 'etutor-payment-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment-service' of Deployment 'etutor-payment-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payment-service' of Deployment 'etutor-payment-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service' of Deployment 'etutor-payment-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service' of Deployment 'etutor-payment-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service" of deployment "etutor-payment-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment etutor-payment-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payment8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: etutor-payment-deployment
   5 │   labels:
   6 └     name:  payment-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container etutor-payment-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment etutor-payment-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment8.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment-service in deployment etutor-payment-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment8.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-payment:latest
  19 │         name: payment-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: payment-service-config
────────────────────────────────────────



payment_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment' of Deployment 'payment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment' of 'deployment' 'payment' in 'snackbar' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment' of Deployment 'payment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payment' of Deployment 'payment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payment' of Deployment 'payment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "payment" in "snackbar" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment in snackbar namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in snackbar namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payment_1.yaml:21-29
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment payment (namespace: snackbar) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payment_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: yoonjeong/payment:1.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────



payments-depl.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────



payments-depl1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl1.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl1.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_CLUSTER_ID
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────



payments-depl10.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl10.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl10.yaml:15-30
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: asia-southeast2-docker.pkg.dev/utopian-bonito-411004/ticket-artifacts/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────



payments-depl11.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl11.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl11.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl11.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: stephengrider/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



payments-depl12.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl12.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl12.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 └         - name: NATS_CLIENT_ID
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl12.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: javachiphi/payments
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: nats://nats-srv:4222
  21 │         - name: NATS_CLUSTER_ID
  22 │           value: ticketing
  23 │         - name: NATS_CLIENT_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────



payments-depl13.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl13.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl13.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl13.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: isuruk1/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────



payments-depl14.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl14.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl14.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl14.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: jahidhiron/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



payments-depl15.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl15.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl15.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl15.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: nzwilliammorris/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



payments-depl16.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl16.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl16.yaml:15-44
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 └               key: JWT_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl16.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: berkinanik/ticketing-payments:latest
  18 │         env:
  19 │         - name: JWT_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: jwt-secret
  23 │               key: JWT_KEY
  24 └         - name: MONGO_URI
  ..   
────────────────────────────────────────



payments-depl17.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl17.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl17.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: mostafaae/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



payments-depl18.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl18.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl18.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl18.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: yonrazticketing/payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────



payments-depl19.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl19.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl19.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl19.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: shubhansukr/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



payments-depl2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl2.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl2.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl2.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────



payments-depl20.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl20.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl20.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl20.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: schradermade/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



payments-depl3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl3.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl3.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abanoubfathy/payments
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: JWT_SECRET_KEY
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: jwt-secret
  24 └               key: JWT_SECRET_KEY
  ..   
────────────────────────────────────────



payments-depl4.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl4.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl4.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_CLUSTER_ID
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl4.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: manuelextra/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_CLUSTER_ID
  24 └           value: ticketing
  ..   
────────────────────────────────────────



payments-depl5.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl5.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl5.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl5.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: lekejosh/payments:v1
  18 │         env:
  19 │         - name: NATS_URL
  20 │           value: http://nats-srv:4222
  21 │         - name: NATS_CLIENT_ID
  22 │           valueFrom:
  23 │             fieldRef:
  24 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────



payments-depl6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl6.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl6.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl6.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: aspian87/ticketing-payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



payments-depl7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl7.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl7.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl7.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: rahuljsaliaan/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



payments-depl8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl8.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl8.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl8.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: abdessalamwizli/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



payments-depl9.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'paymentservice' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'paymentservice' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'paymentservice' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'paymentservice' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'paymentservice' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'paymentservice' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'paymentservice' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'paymentservice' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'paymentservice' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'paymentservice' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'paymentservice' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'paymentservice' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "paymentservice" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-depl9.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-depl9.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container paymentservice in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 └         image: karthickselvamdev/paymentservice:latest
────────────────────────────────────────



payments-mongo-depl.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl1.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl10.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl10.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl10.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl11.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl11.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl11.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl12.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl12.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl12.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl13.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl13.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl13.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl14.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl14.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl14.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl15.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl15.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl15.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl16.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl16.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl16.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl17.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl17.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl17.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl18.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl18.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl18.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl19.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl19.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl19.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl2.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl2.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl3.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl3.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl3.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl4.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl4.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl4.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl5.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl5.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl5.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl6.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl6.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl6.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl7.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl7.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl7.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl8.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl8.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl8.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo-depl9.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo-depl9.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo-depl9.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ticketing-payments-mongo' of 'deployment' 'ticketing-payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ticketing-payments-mongo' of Deployment 'ticketing-payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ticketing-payments-mongo" of deployment "ticketing-payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ticketing-payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo.yaml:4
────────────────────────────────────────
   4 [   name: ticketing-payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ticketing-payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ticketing-payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: ticketing-payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments-mongo1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments-mongo' of 'deployment' 'payments-mongo-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments-mongo' of Deployment 'payments-mongo-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments-mongo" of deployment "payments-mongo-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-mongo-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments-mongo1.yaml:4
────────────────────────────────────────
   4 [   name: payments-mongo-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-mongo-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-mongo-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments-mongo1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments-mongo
  17 └         image: mongo
────────────────────────────────────────



payments.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ticketing-payments' of 'deployment' 'ticketing-payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ticketing-payments' of Deployment 'ticketing-payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ticketing-payments" of deployment "ticketing-payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ticketing-payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments.yaml:4
────────────────────────────────────────
   4 [   name: ticketing-payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ticketing-payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ticketing-payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ticketing-payments in deployment ticketing-payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: ticketing-payments
  17 │         image: salkhon/ticketing-payments
  18 │         env:
  19 │         - name: MONGO_URI
  20 │           value: mongodb://ticketing-payments-mongo-srv:27017/payments
  21 │         - name: JWT_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: jwt-secret
  ..   
────────────────────────────────────────



payments1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payments' of Deployment 'payments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payments' of 'deployment' 'payments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'payments' of Deployment 'payments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payments' of Deployment 'payments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payments" of deployment "payments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 payments1.yaml:4
────────────────────────────────────────
   4 [   name: payments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payments1.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 └         - name: NATS_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payments in deployment payments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payments1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: payments
  17 │         image: himu25/payments
  18 │         env:
  19 │         - name: NATS_CLIENT_ID
  20 │           valueFrom:
  21 │             fieldRef:
  22 │               fieldPath: metadata.name
  23 │         - name: NATS_URL
  24 └           value: http://nats-srv:4222
  ..   
────────────────────────────────────────



paymentservice-deployment.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 paymentservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 paymentservice-deployment.yaml:17-43
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 50051
  22 │           env:
  23 │             - name: PORT
  24 │               value: "50051"
  25 └             - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────



paymentservice1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 paymentservice1.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice1.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice1.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice1.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice1.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice1.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



paymentservice10.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 paymentservice10.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice10.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice10.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice10.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice10.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



paymentservice11.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice11.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



paymentservice13.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 paymentservice13.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice13.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice13.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice13.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice13.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



paymentservice14.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice14.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice14.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice14.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice14.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice14.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



paymentservice15.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'paymentservice' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "paymentservice" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice15.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 paymentservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 paymentservice15.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: paymentservice
  19 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         ports:
  24 └         - containerPort: 50051
────────────────────────────────────────



paymentservice17.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 paymentservice17.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice17.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice17.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice17.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice17.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



paymentservice18.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice18.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice18.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice18.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice18.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice18.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



paymentservice19.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice19.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 paymentservice19.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 paymentservice19.yaml:14-42
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/paymentservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



paymentservice2.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice2.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice2.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice2.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice2.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice2.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



paymentservice21.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 paymentservice21.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice21.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice21.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice21.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice21.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice21.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



paymentservice22.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice22.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice22.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice22.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice22.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice22.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



paymentservice23.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'paymentservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



paymentservice23_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice23_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 paymentservice23_1.yaml:21-35
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment paymentservice (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 paymentservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: payment
  23 │         image: srikanthhg/paymentservice:v1
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: paymentservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────



paymentservice26.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 paymentservice26.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice26.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice26.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice26.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice26.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice26.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



paymentservice27.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice27.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice27.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice27.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice27.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice27.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



paymentservice29.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 paymentservice29.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice29.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice29.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice29.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice29.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice29.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



paymentservice30.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice30.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice30.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice30.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice30.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice30.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



paymentservice31.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice31.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice31.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice31.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice31.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice31.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



paymentservice4.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 paymentservice4.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice4.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice4.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice4.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice4.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



paymentservice5.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice5.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice5.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice5.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice5.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice5.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



paymentservice7.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 paymentservice7.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice7.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice7.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice7.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice7.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: paymentservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



paymentservice8.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 paymentservice8.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 paymentservice8.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 paymentservice8.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 paymentservice8.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 paymentservice8.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



payroll-deployment.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payroll' of Deployment 'payroll' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payroll' of Deployment 'payroll' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payroll' of 'deployment' 'payroll' in 'demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payroll' of Deployment 'payroll' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payroll' of Deployment 'payroll' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payroll' of Deployment 'payroll' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payroll' of Deployment 'payroll' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payroll" of deployment "payroll" in "demo" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payroll in demo namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payroll in demo namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 payroll-deployment.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 └         - name: debug-port
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payroll in deployment payroll (namespace: demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 payroll-deployment.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: payroll
  18 │         image: harbor.itcpdev.mrr.ste.com/demo/payroll:0.1
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - name: http
  22 │           containerPort: 8080
  23 │           protocol: TCP
  24 │         - name: debug-port
  25 └           containerPort: 5005
  ..   
────────────────────────────────────────



pcf-configmap1.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pcf-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



pcf-deployment1.yaml (kubernetes)
=================================
Tests: 126 (SUCCESSES: 97, FAILURES: 29)
Failures: 29 (UNKNOWN: 0, LOW: 17, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pcf' of Deployment 'free5gc-pcf' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-smf' of Deployment 'free5gc-pcf' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pcf' of Deployment 'free5gc-pcf' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-smf' of Deployment 'free5gc-pcf' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pcf' of 'deployment' 'free5gc-pcf' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-smf' of 'deployment' 'free5gc-pcf' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-smf' of Deployment 'free5gc-pcf' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pcf' of Deployment 'free5gc-pcf' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-smf' of Deployment 'free5gc-pcf' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pcf' of Deployment 'free5gc-pcf' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-smf' of Deployment 'free5gc-pcf' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-smf' of Deployment 'free5gc-pcf' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-smf' of Deployment 'free5gc-pcf' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-smf' of Deployment 'free5gc-pcf' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pcf' of Deployment 'free5gc-pcf' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-smf' of Deployment 'free5gc-pcf' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pcf' of Deployment 'free5gc-pcf' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-smf' of Deployment 'free5gc-pcf' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pcf" of deployment "free5gc-pcf" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-smf" of deployment "free5gc-pcf" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment free5gc-pcf in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pcf-deployment1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: free5gc-pcf
   5 │   labels:
   6 │     app: free5gc
   7 └     nf: pcf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container free5gc-pcf in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container free5gc-pcf in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pcf-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 └         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment free5gc-pcf in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pcf-deployment1.yaml:20-54
────────────────────────────────────────
  20 ┌       initContainers:
  21 │       - name: wait-smf
  22 │         image: busybox:1.32.0
  23 │         env:
  24 │         - name: DEPENDENCIES
  25 │           value: smf-nsmf:8000
  26 │         command: ["sh", "-c", "until nc -z $DEPENDENCIES; do echo waiting for the SMF; sleep 2; done;"]
  27 │       containers:
  28 └       - image: edierbra/free5gc:v3.2.5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pcf in deployment free5gc-pcf (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pcf-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       - image: edierbra/free5gc:v3.2.5
  29 │         name: pcf
  30 │         ports:
  31 │         - containerPort: 8000
  32 │         command: ["./pcf"]
  33 │         args: ["--config", "config/pcfcfg.yaml"]   
  34 │         env:
  35 │           - name: GIN_MODE
  36 └             value: release
  ..   
────────────────────────────────────────



pci-test1_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ctr0' of Pod 'pod0' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ctr0' of Pod 'pod0' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ctr0' of 'pod' 'pod0' in 'pci-nvme-test1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ctr0' of Pod 'pod0' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ctr0' of Pod 'pod0' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ctr0' of Pod 'pod0' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ctr0' of Pod 'pod0' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ctr0' of Pod 'pod0' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ctr0' of Pod 'pod0' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ctr0' of Pod 'pod0' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ctr0' of Pod 'pod0' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ctr0' of Pod 'pod0' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ctr0" of pod "pod0" in "pci-nvme-test1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod0 in pci-nvme-test1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod0 in pci-nvme-test1 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pci-test1_4.yaml:9-23
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ctr0 in pod pod0 (namespace: pci-nvme-test1) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pci-test1_4.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: ctr0
  11 │     image: registry:5000/docker.io/library/ubuntu:22.04
  12 │     command:
  13 │     - bash
  14 │     - -c
  15 │     args:
  16 │     - export; sleep 9999
  17 │     resources:
  18 │       claims:
  19 └       - name: pci
────────────────────────────────────────



pdb120_5.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pdb120_5.yaml:23-98
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: JAVA_OPTS_APPEND
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pdb120_5.yaml:23-98
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: JAVA_OPTS_APPEND
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pdb120_5.yaml:23-98
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: JAVA_OPTS_APPEND
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pdb120_5.yaml:23-98
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: JAVA_OPTS_APPEND
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pdb120_5.yaml:23-98
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: JAVA_OPTS_APPEND
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container keycloak in deployment keycloak (namespace: test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pdb120_5.yaml:23-98
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: JAVA_OPTS_APPEND
  ..   
────────────────────────────────────────



pedidos_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postech-pedidos' of 'deployment' 'postech-pedidos-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postech-pedidos' of Deployment 'postech-pedidos-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postech-pedidos" of deployment "postech-pedidos-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postech-pedidos-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pedidos_1.yaml:4
────────────────────────────────────────
   4 [   name: postech-pedidos-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postech-pedidos-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postech-pedidos-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pedidos_1.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 └         - name: SPRING_DATASOURCE_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container postech-pedidos in deployment postech-pedidos-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pedidos_1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: postech-pedidos
  17 │         image: danielmaria/postech-pedidos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/pedidos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────



peer0Dealer-cli.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cli-peer0-dealer' of Deployment 'cli-peer0-dealer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cli-peer0-dealer' of Deployment 'cli-peer0-dealer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cli-peer0-dealer' of 'deployment' 'cli-peer0-dealer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cli-peer0-dealer' of Deployment 'cli-peer0-dealer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cli-peer0-dealer' of Deployment 'cli-peer0-dealer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cli-peer0-dealer' of Deployment 'cli-peer0-dealer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cli-peer0-dealer' of Deployment 'cli-peer0-dealer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cli-peer0-dealer" of deployment "cli-peer0-dealer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cli-peer0-dealer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 peer0Dealer-cli.yaml:4
────────────────────────────────────────
   4 [     name: cli-peer0-dealer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cli-peer0-dealer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cli-peer0-dealer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Dealer-cli.yaml:14-77
────────────────────────────────────────
  14 ┌             volumes:
  15 │                 - name: fabricfiles
  16 │                   persistentVolumeClaim:
  17 │                       claimName: mypvc
  18 │ 
  19 │             containers:
  20 │                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 └                   tty: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cli-peer0-dealer in deployment cli-peer0-dealer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer0Dealer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌                 - name: cli-peer0-dealer
  21 │                   stdin: true
  22 │                   tty: true
  23 │                   resources:
  24 │                         limits:
  25 │                           memory: "300Mi"
  26 │                           cpu: "200m"
  27 │                         requests:
  28 └                           memory: "200Mi"
  ..   
────────────────────────────────────────



peer0Dealer.yaml (kubernetes)
=============================
Tests: 127 (SUCCESSES: 101, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'couchdb' of Deployment 'peer0-dealer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'peer' of Deployment 'peer0-dealer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'couchdb' of Deployment 'peer0-dealer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'peer' of Deployment 'peer0-dealer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'couchdb' of 'deployment' 'peer0-dealer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'peer' of 'deployment' 'peer0-dealer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'couchdb' of Deployment 'peer0-dealer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'peer' of Deployment 'peer0-dealer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'couchdb' of Deployment 'peer0-dealer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'peer' of Deployment 'peer0-dealer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'couchdb' of Deployment 'peer0-dealer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'peer' of Deployment 'peer0-dealer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'couchdb' of Deployment 'peer0-dealer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'peer' of Deployment 'peer0-dealer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "couchdb" of deployment "peer0-dealer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "peer" of deployment "peer0-dealer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment peer0-dealer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 peer0Dealer.yaml:4
────────────────────────────────────────
   4 [   name: peer0-dealer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container peer0-dealer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container peer0-dealer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment peer0-dealer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Dealer.yaml:15-150
────────────────────────────────────────
  15 ┌       volumes:
  16 │         - name: fabricfiles
  17 │           persistentVolumeClaim:
  18 │             claimName: mypvc
  19 │         - name: builders-config
  20 │           configMap:
  21 │             name: builders-config
  22 │             items:
  23 └               - key: core.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container couchdb in deployment peer0-dealer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer0Dealer.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container peer in deployment peer0-dealer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer0Dealer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-dealer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────



peer0Manufacturer-cli.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cli-peer0-manufacturer' of Deployment 'cli-peer0-manufacturer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cli-peer0-manufacturer' of Deployment 'cli-peer0-manufacturer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cli-peer0-manufacturer' of 'deployment' 'cli-peer0-manufacturer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cli-peer0-manufacturer' of Deployment 'cli-peer0-manufacturer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cli-peer0-manufacturer' of Deployment 'cli-peer0-manufacturer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cli-peer0-manufacturer' of Deployment 'cli-peer0-manufacturer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cli-peer0-manufacturer' of Deployment 'cli-peer0-manufacturer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cli-peer0-manufacturer" of deployment "cli-peer0-manufacturer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cli-peer0-manufacturer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:4
────────────────────────────────────────
   4 [   name: cli-peer0-manufacturer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cli-peer0-manufacturer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cli-peer0-manufacturer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:14-77
────────────────────────────────────────
  14 ┌       volumes:
  15 │         - name: fabricfiles
  16 │           persistentVolumeClaim:
  17 │             claimName: mypvc
  18 │ 
  19 │       containers:
  20 │         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 └           tty: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cli-peer0-manufacturer in deployment cli-peer0-manufacturer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer0Manufacturer-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-manufacturer
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────



peer0Manufacturer.yaml (kubernetes)
===================================
Tests: 127 (SUCCESSES: 101, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'couchdb' of Deployment 'peer0-manufacturer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'peer' of Deployment 'peer0-manufacturer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'couchdb' of Deployment 'peer0-manufacturer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'peer' of Deployment 'peer0-manufacturer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'couchdb' of 'deployment' 'peer0-manufacturer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'peer' of 'deployment' 'peer0-manufacturer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'couchdb' of Deployment 'peer0-manufacturer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'peer' of Deployment 'peer0-manufacturer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'couchdb' of Deployment 'peer0-manufacturer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'peer' of Deployment 'peer0-manufacturer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'couchdb' of Deployment 'peer0-manufacturer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'peer' of Deployment 'peer0-manufacturer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'couchdb' of Deployment 'peer0-manufacturer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'peer' of Deployment 'peer0-manufacturer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "couchdb" of deployment "peer0-manufacturer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "peer" of deployment "peer0-manufacturer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment peer0-manufacturer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 peer0Manufacturer.yaml:4
────────────────────────────────────────
   4 [   name: peer0-manufacturer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container peer0-manufacturer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container peer0-manufacturer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment peer0-manufacturer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Manufacturer.yaml:15-149
────────────────────────────────────────
  15 ┌       volumes:
  16 │         - name: fabricfiles
  17 │           persistentVolumeClaim:
  18 │             claimName: mypvc
  19 │         - name: builders-config
  20 │           configMap:
  21 │             name: builders-config
  22 │             items:
  23 └               - key: core.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container couchdb in deployment peer0-manufacturer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer0Manufacturer.yaml:137-149
────────────────────────────────────────
 137 ┌         - name: couchdb
 138 │           image: hyperledger/fabric-couchdb:0.4.15
 139 │           resources:
 140 │             limits:
 141 │               memory: "300Mi"
 142 │               cpu: "300m"
 143 │             requests:
 144 │               memory: "200Mi"
 145 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container peer in deployment peer0-manufacturer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer0Manufacturer.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-manufacturer
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────



peer0Mvd-cli.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cli-peer0-mvd' of Deployment 'cli-peer0-mvd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cli-peer0-mvd' of Deployment 'cli-peer0-mvd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cli-peer0-mvd' of 'deployment' 'cli-peer0-mvd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cli-peer0-mvd' of Deployment 'cli-peer0-mvd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cli-peer0-mvd' of Deployment 'cli-peer0-mvd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cli-peer0-mvd' of Deployment 'cli-peer0-mvd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cli-peer0-mvd' of Deployment 'cli-peer0-mvd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cli-peer0-mvd" of deployment "cli-peer0-mvd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cli-peer0-mvd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 peer0Mvd-cli.yaml:4
────────────────────────────────────────
   4 [   name: cli-peer0-mvd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cli-peer0-mvd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cli-peer0-mvd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Mvd-cli.yaml:14-77
────────────────────────────────────────
  14 ┌       volumes:
  15 │         - name: fabricfiles
  16 │           persistentVolumeClaim:
  17 │             claimName: mypvc
  18 │ 
  19 │       containers:
  20 │         - name: cli-peer0-mvd
  21 │           stdin: true
  22 └           tty: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cli-peer0-mvd in deployment cli-peer0-mvd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer0Mvd-cli.yaml:20-77
────────────────────────────────────────
  20 ┌         - name: cli-peer0-mvd
  21 │           stdin: true
  22 │           tty: true
  23 │           resources:
  24 │             limits:
  25 │               memory: "300Mi"
  26 │               cpu: "200m"
  27 │             requests:
  28 └               memory: "200Mi"
  ..   
────────────────────────────────────────



peer0Mvd.yaml (kubernetes)
==========================
Tests: 127 (SUCCESSES: 101, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'couchdb' of Deployment 'peer0-mvd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'peer' of Deployment 'peer0-mvd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'couchdb' of Deployment 'peer0-mvd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'peer' of Deployment 'peer0-mvd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'couchdb' of 'deployment' 'peer0-mvd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'peer' of 'deployment' 'peer0-mvd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'couchdb' of Deployment 'peer0-mvd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'peer' of Deployment 'peer0-mvd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'couchdb' of Deployment 'peer0-mvd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'peer' of Deployment 'peer0-mvd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'couchdb' of Deployment 'peer0-mvd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'peer' of Deployment 'peer0-mvd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'couchdb' of Deployment 'peer0-mvd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'peer' of Deployment 'peer0-mvd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "couchdb" of deployment "peer0-mvd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "peer" of deployment "peer0-mvd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment peer0-mvd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 peer0Mvd.yaml:4
────────────────────────────────────────
   4 [   name: peer0-mvd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container peer0-mvd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container peer0-mvd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment peer0-mvd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer0Mvd.yaml:15-150
────────────────────────────────────────
  15 ┌       volumes:
  16 │         - name: fabricfiles
  17 │           persistentVolumeClaim:
  18 │             claimName: mypvc
  19 │         - name: builders-config
  20 │           configMap:
  21 │             name: builders-config
  22 │             items:
  23 └               - key: core.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container couchdb in deployment peer0-mvd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer0Mvd.yaml:138-150
────────────────────────────────────────
 138 ┌         - name: couchdb
 139 │           image: hyperledger/fabric-couchdb:0.4.15
 140 │           resources:
 141 │             limits:
 142 │               memory: "300Mi"
 143 │               cpu: "300m"
 144 │             requests:
 145 │               memory: "200Mi"
 146 └               cpu: "200m"
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container peer in deployment peer0-mvd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer0Mvd.yaml:47-130
────────────────────────────────────────
  47 ┌         - name: peer
  48 │           image: hyperledger/fabric-peer:2.5.4
  49 │           command: ["sh", "-c", "peer node start"]
  50 │           env:
  51 │             - name: CORE_PEER_ADDRESSAUTODETECT
  52 │               value: "true"
  53 │             - name: CORE_PEER_ID
  54 │               value: peer0-mvd
  55 └             - name: CORE_PEER_ADDRESS
  ..   
────────────────────────────────────────



peer1_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container '<org-name>-<peer-name>' of 'deployment' '<org-name>-<peer-name>' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container '<org-name>-<peer-name>' of Deployment '<org-name>-<peer-name>' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment '<org-name>-<peer-name>' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 peer1_1.yaml:6-92
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: <org-name>-<peer-name>
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: <org-name>-<peer-name>
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "<org-name>-<peer-name>" of deployment "<org-name>-<peer-name>" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment <org-name>-<peer-name> in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 peer1_1.yaml:4
────────────────────────────────────────
   4 [   name: <org-name>-<peer-name>
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container <org-name>-<peer-name> in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment <org-name>-<peer-name> in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 peer1_1.yaml:15-92
────────────────────────────────────────
  15 ┌       hostname: <org-name>-<peer-name>-pod
  16 │       containers:
  17 │       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 └           name: <org-name>-<peer-name>-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container <org-name>-<peer-name> in deployment <org-name>-<peer-name> (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 peer1_1.yaml:17-67
────────────────────────────────────────
  17 ┌       - name: <org-name>-<peer-name>
  18 │         image: hyperledger/fabric-peer:2.5
  19 │         ports:
  20 │         - containerPort: <peer-port>
  21 │         volumeMounts:
  22 │         - mountPath: /tmp/hyperledger/<org-name>/<peer-name>
  23 │           name: <org-name>-<peer-name>-volume
  24 │         - mountPath: /host/var/run
  25 └           name: <org-name>-docker-volume
  ..   
────────────────────────────────────────



pem_daemonset.yaml (kubernetes)
===============================
Tests: 122 (SUCCESSES: 93, FAILURES: 29)
Failures: 29 (UNKNOWN: 0, LOW: 16, MEDIUM: 6, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0005 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'vizier-pem' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 pem_daemonset.yaml:7-148
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   updateStrategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 20
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): DaemonSet 'vizier-pem' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 pem_daemonset.yaml:7-148
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   updateStrategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 20
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_daemonset.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_daemonset.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_daemonset.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pem_daemonset.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pem_daemonset.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pem_daemonset.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_daemonset.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_daemonset.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'vizier-pem' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 pem_daemonset.yaml:7-148
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   updateStrategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 20
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_daemonset.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_daemonset.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset vizier-pem in default namespace shouldn't have volumes set to {"/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 pem_daemonset.yaml:7-148
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   updateStrategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 20
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────



pem_daemonset1.yaml (kubernetes)
================================
Tests: 122 (SUCCESSES: 93, FAILURES: 29)
Failures: 29 (UNKNOWN: 0, LOW: 16, MEDIUM: 6, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0005 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'vizier-pem' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 pem_daemonset1.yaml:7-148
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   updateStrategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 20
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): DaemonSet 'vizier-pem' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 pem_daemonset1.yaml:7-148
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   updateStrategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 20
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_daemonset1.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_daemonset1.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_daemonset1.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pem_daemonset1.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pem_daemonset1.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pem_daemonset1.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_daemonset1.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qb-wait' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_daemonset1.yaml:46-70
────────────────────────────────────────
  46 ┌       - name: qb-wait
  47 │         # yamllint disable-line rule:line-length
  48 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  49 │         # yamllint disable rule:indentation
  50 │         command: ['sh', '-c', 'set -x;
  51 │           URL="https://${SERVICE_NAME}:${SERVICE_PORT}/healthz";
  52 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  53 │             echo "waiting for ${URL}";
  54 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'vizier-pem' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 pem_daemonset1.yaml:7-148
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   updateStrategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 20
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_daemonset1.yaml:72-133
────────────────────────────────────────
  72 ┌       - name: pem
  73 │         image: vizier-pem_image:latest
  74 │         args: []
  75 │         env:
  76 │         - name: TCMALLOC_SAMPLE_PARAMETER
  77 │           value: "1048576"
  78 │         - name: PL_CLIENT_TLS_CERT
  79 │           value: /certs/client.crt
  80 └         - name: PL_CLIENT_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_daemonset1.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset vizier-pem in default namespace shouldn't have volumes set to {"/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 pem_daemonset1.yaml:7-148
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   updateStrategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 20
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────



pem_deployment.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pem" of daemonset "vizier-pem" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_deployment.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-pem in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_deployment.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset vizier-pem in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_deployment.yaml:9-21
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 └           limits:
  ..   
────────────────────────────────────────



pem_deployment1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pem" of daemonset "vizier-pem" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_deployment1.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-pem in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_deployment1.yaml:10-21
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 │           limits:
  18 └             memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset vizier-pem in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_deployment1.yaml:9-21
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: pem
  11 │         env:
  12 │         - name: ASAN_OPTIONS
  13 │           value: "halt_on_error=0"
  14 │         - name: TSAN_OPTIONS
  15 │           value: "halt_on_error=0"
  16 │         resources:
  17 └           limits:
  ..   
────────────────────────────────────────



pem_host_mounts.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'vizier-pem' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 pem_host_mounts.yaml:7-22
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 └         - mountPath: /host
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pem" of daemonset "vizier-pem" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_host_mounts.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-pem in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_host_mounts.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset vizier-pem in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_host_mounts.yaml:12-22
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 │           readOnly: true
  18 │       volumes:
  19 │       - hostPath:
  20 └           path: /
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset vizier-pem in default namespace shouldn't have volumes set to {"/"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 pem_host_mounts.yaml:7-22
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 └         - mountPath: /host
  ..   
────────────────────────────────────────



pem_host_mounts1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'vizier-pem' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 pem_host_mounts1.yaml:7-22
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 └         - mountPath: /host
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pem" of daemonset "vizier-pem" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_host_mounts1.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-pem in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_host_mounts1.yaml:13-17
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset vizier-pem in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_host_mounts1.yaml:12-22
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 │         - mountPath: /host
  16 │           name: host-root
  17 │           readOnly: true
  18 │       volumes:
  19 │       - hostPath:
  20 └           path: /
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset vizier-pem in default namespace shouldn't have volumes set to {"/"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 pem_host_mounts1.yaml:7-22
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 └         - mountPath: /host
  ..   
────────────────────────────────────────



pem_mounts.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'vizier-pem' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 pem_mounts.yaml:7-43
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 └         - name: host-lib
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pem" of daemonset "vizier-pem" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_mounts.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-pem in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_mounts.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset vizier-pem in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_mounts.yaml:12-43
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset vizier-pem in default namespace shouldn't have volumes set to {"/boot", "/etc", "/lib"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 pem_mounts.yaml:7-43
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 └         - name: host-lib
  ..   
────────────────────────────────────────



pem_mounts1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'vizier-pem' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 pem_mounts1.yaml:7-43
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 └         - name: host-lib
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pem" of daemonset "vizier-pem" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_mounts1.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-pem in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_mounts1.yaml:13-26
────────────────────────────────────────
  13 ┌       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 │           readOnly: true
  21 └         - name: host-boot
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset vizier-pem in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_mounts1.yaml:12-43
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 │         - name: host-lib
  16 │           mountPath: /host/lib
  17 │           readOnly: true
  18 │         - name: host-var
  19 │           mountPath: /host/var
  20 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset vizier-pem in default namespace shouldn't have volumes set to {"/boot", "/etc", "/lib"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 pem_mounts1.yaml:7-43
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: vizier-pem
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │       - name: pem
  14 │         volumeMounts:
  15 └         - name: host-lib
  ..   
────────────────────────────────────────



pem_resources.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pem" of daemonset "vizier-pem" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_resources.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-pem in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_resources.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset vizier-pem in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_resources.yaml:9-16
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────



pem_resources1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pem' of 'daemonset' 'vizier-pem' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pem' of DaemonSet 'vizier-pem' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pem' of DaemonSet 'vizier-pem' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pem" of daemonset "vizier-pem" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset vizier-pem in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pem_resources1.yaml:5
────────────────────────────────────────
   5 [   name: vizier-pem
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-pem in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_resources1.yaml:10-16
────────────────────────────────────────
  10 ┌       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset vizier-pem in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pem_resources1.yaml:9-16
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: pem
  11 │         resources:
  12 │           limits:
  13 │             memory: 2048Mi
  14 │           requests:
  15 │             cpu: 400m
  16 └             memory: 2048Mi
────────────────────────────────────────



pending-pod.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pending' of Pod 'pending' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pending' of Pod 'pending' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pending' of 'pod' 'pending' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pending' of Pod 'pending' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pending' of Pod 'pending' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pending' of Pod 'pending' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pending' of Pod 'pending' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pending' of Pod 'pending' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pending' of Pod 'pending' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pending' of Pod 'pending' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pending' of Pod 'pending' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pending" of pod "pending" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pending in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pending-pod.yaml:20-22
────────────────────────────────────────
  20 ┌   name: pending
  21 │   annotations:
  22 └     "scheduler.alpha.kubernetes.io/name": doesnotexist
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pending in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pending-pod.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pending in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pending-pod.yaml:24-28
────────────────────────────────────────
  24 ┌   containers:
  25 │     - name: pending
  26 │       image: alpine:3.4
  27 │       command: ["/bin/sh", "-c", "echo Succeeded"]
  28 └   restartPolicy: Never
────────────────────────────────────────



pending-pod1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pending' of Pod 'pending' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pending' of Pod 'pending' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pending' of 'pod' 'pending' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pending' of Pod 'pending' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pending' of Pod 'pending' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pending' of Pod 'pending' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pending' of Pod 'pending' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pending' of Pod 'pending' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pending' of Pod 'pending' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pending' of Pod 'pending' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pending' of Pod 'pending' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pending" of pod "pending" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pending in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pending-pod1.yaml:20-22
────────────────────────────────────────
  20 ┌   name: pending
  21 │   annotations:
  22 └     "scheduler.alpha.kubernetes.io/name": doesnotexist
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pending in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pending-pod1.yaml:25-27
────────────────────────────────────────
  25 ┌     - name: pending
  26 │       image: alpine:3.4
  27 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pending in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pending-pod1.yaml:24-28
────────────────────────────────────────
  24 ┌   containers:
  25 │     - name: pending
  26 │       image: alpine:3.4
  27 │       command: ["/bin/sh", "-c", "echo Succeeded"]
  28 └   restartPolicy: Never
────────────────────────────────────────



penpot-backend-deployment.yaml (kubernetes)
===========================================
Tests: 147 (SUCCESSES: 96, FAILURES: 51)
Failures: 51 (UNKNOWN: 0, LOW: 31, MEDIUM: 13, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-backend' of 'deployment' 'penpot-backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-postgres' of 'deployment' 'penpot-backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-redis' of 'deployment' 'penpot-backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'penpot-backend' of Deployment 'penpot-backend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wait-for-postgres' of Deployment 'penpot-backend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wait-for-redis' of Deployment 'penpot-backend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-backend" of deployment "penpot-backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-postgres" of deployment "penpot-backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-redis" of deployment "penpot-backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-backend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-backend-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-backend
  10 └   name: penpot-backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-backend-deployment.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-backend-deployment.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-backend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-backend-deployment.yaml:28-75
────────────────────────────────────────
  28 ┌       initContainers:
  29 │         - name: wait-for-postgres
  30 │           image: busybox
  31 │           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
  32 │         - name: wait-for-redis
  33 │           image: busybox
  34 │           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
  35 │       containers:
  36 └         - env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container penpot-backend in deployment penpot-backend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 penpot-backend-deployment.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────



penpot-backend-deployment1.yaml (kubernetes)
============================================
Tests: 147 (SUCCESSES: 96, FAILURES: 51)
Failures: 51 (UNKNOWN: 0, LOW: 31, MEDIUM: 13, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-backend' of 'deployment' 'penpot-backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-postgres' of 'deployment' 'penpot-backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-redis' of 'deployment' 'penpot-backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'penpot-backend' of Deployment 'penpot-backend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wait-for-postgres' of Deployment 'penpot-backend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wait-for-redis' of Deployment 'penpot-backend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-backend' of Deployment 'penpot-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-postgres' of Deployment 'penpot-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-redis' of Deployment 'penpot-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-backend" of deployment "penpot-backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-postgres" of deployment "penpot-backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-redis" of deployment "penpot-backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-backend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-backend-deployment1.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-backend
  10 └   name: penpot-backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-backend-deployment1.yaml:32-34
────────────────────────────────────────
  32 ┌         - name: wait-for-redis
  33 │           image: busybox
  34 └           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-backend-deployment1.yaml:29-31
────────────────────────────────────────
  29 ┌         - name: wait-for-postgres
  30 │           image: busybox
  31 └           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-backend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-backend-deployment1.yaml:28-75
────────────────────────────────────────
  28 ┌       initContainers:
  29 │         - name: wait-for-postgres
  30 │           image: busybox
  31 │           command: ['sh', '-c', 'while ! nc -z penpot-postgres 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
  32 │         - name: wait-for-redis
  33 │           image: busybox
  34 │           command: ['sh', '-c', 'while ! nc -z penpot-redis 6379; do echo "Waiting for Redis"; sleep 1; done']
  35 │       containers:
  36 └         - env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container penpot-backend in deployment penpot-backend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 penpot-backend-deployment1.yaml:36-70
────────────────────────────────────────
  36 ┌         - env:
  37 │           - name: PENPOT_PUBLIC_URI
  38 │             value: http://localhost:9001
  39 │           - name: PENPOT_DATABASE_URI
  40 │             value: postgresql://penpot-postgres/penpot
  41 │           - name: PENPOT_DATABASE_USERNAME
  42 │             value: penpot
  43 │           - name: PENPOT_DATABASE_PASSWORD
  44 └             value: penpot
  ..   
────────────────────────────────────────



penpot-exporter-deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-exporter' of 'deployment' 'penpot-exporter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'penpot-exporter' of Deployment 'penpot-exporter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-exporter" of deployment "penpot-exporter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-exporter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-exporter-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-exporter
  10 └   name: penpot-exporter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-exporter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-exporter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-exporter-deployment.yaml:27-36
────────────────────────────────────────
  27 ┌       containers:
  28 │         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 │           resources: {}
  36 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container penpot-exporter in deployment penpot-exporter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 penpot-exporter-deployment.yaml:28-35
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │             - name: PENPOT_REDIS_URI
  32 │               value: redis://penpot-redis/0
  33 │           image: penpotapp/exporter:latest
  34 │           name: penpot-exporter
  35 └           resources: {}
────────────────────────────────────────



penpot-exporter-deployment1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-exporter' of 'deployment' 'penpot-exporter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'penpot-exporter' of Deployment 'penpot-exporter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-exporter' of Deployment 'penpot-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-exporter" of deployment "penpot-exporter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-exporter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-exporter
  10 └   name: penpot-exporter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-exporter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-exporter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:27-34
────────────────────────────────────────
  27 ┌       containers:
  28 │         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 │           resources: {}
  34 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container penpot-exporter in deployment penpot-exporter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 penpot-exporter-deployment1.yaml:28-33
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PENPOT_PUBLIC_URI
  30 │               value: http://penpot-frontend
  31 │           image: penpotapp/exporter:latest
  32 │           name: penpot-exporter
  33 └           resources: {}
────────────────────────────────────────



penpot-frontend-deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-frontend' of 'deployment' 'penpot-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'penpot-frontend' of Deployment 'penpot-frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-frontend" of deployment "penpot-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-frontend-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-frontend
  10 └   name: penpot-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment penpot-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-frontend-deployment.yaml:28-49
────────────────────────────────────────
  28 ┌       containers:
  29 │         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container penpot-frontend in deployment penpot-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 penpot-frontend-deployment.yaml:29-40
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 │               name: penpot-assets-data
  37 └             - mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────



penpot-frontend-deployment1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-frontend' of 'deployment' 'penpot-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'penpot-frontend' of Deployment 'penpot-frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-frontend' of Deployment 'penpot-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-frontend" of deployment "penpot-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-frontend
  10 └   name: penpot-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment penpot-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:28-41
────────────────────────────────────────
  28 ┌       containers:
  29 │         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container penpot-frontend in deployment penpot-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 penpot-frontend-deployment1.yaml:29-36
────────────────────────────────────────
  29 ┌         - image: penpotapp/frontend:latest
  30 │           name: penpot-frontend
  31 │           ports:
  32 │             - containerPort: 80
  33 │           resources: {}
  34 │           volumeMounts:
  35 │             - mountPath: /opt/data
  36 └               name: penpot-assets-data
────────────────────────────────────────



penpot-postgres-deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-postgres' of 'deployment' 'penpot-postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-postgres" of deployment "penpot-postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-postgres-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-postgres
  10 └   name: penpot-postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-postgres-deployment.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-postgres-deployment.yaml:28-58
────────────────────────────────────────
  28 ┌       containers:
  29 │         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 └             - name: POSTGRES_USER
  ..   
────────────────────────────────────────



penpot-postgres-deployment1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-postgres' of 'deployment' 'penpot-postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-postgres' of Deployment 'penpot-postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-postgres" of deployment "penpot-postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-postgres
  10 └   name: penpot-postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:29-53
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 │             - name: POSTGRES_USER
  37 └               value: penpot
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-postgres-deployment1.yaml:28-58
────────────────────────────────────────
  28 ┌       containers:
  29 │         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: penpot
  32 │             - name: POSTGRES_INITDB_ARGS
  33 │               value: --data-checksums
  34 │             - name: POSTGRES_PASSWORD
  35 │               value: penpot
  36 └             - name: POSTGRES_USER
  ..   
────────────────────────────────────────



penpot-redis-deployment.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-redis' of 'deployment' 'penpot-redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-redis" of deployment "penpot-redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-redis-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-redis
  10 └   name: penpot-redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-redis-deployment.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-redis-deployment.yaml:27-40
────────────────────────────────────────
  27 ┌       containers:
  28 │         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────



penpot-redis-deployment1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'penpot-redis' of 'deployment' 'penpot-redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'penpot-redis' of Deployment 'penpot-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "penpot-redis" of deployment "penpot-redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment penpot-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 penpot-redis-deployment1.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: penpot-redis
  10 └   name: penpot-redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container penpot-redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-redis-deployment1.yaml:28-39
────────────────────────────────────────
  28 ┌         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 │             initialDelaySeconds: 10
  36 └             failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment penpot-redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 penpot-redis-deployment1.yaml:27-40
────────────────────────────────────────
  27 ┌       containers:
  28 │         - image: redis:6
  29 │           name: penpot-redis
  30 │           readinessProbe:
  31 │             exec:
  32 │               command:
  33 │                 - redis-cli
  34 │                 - ping
  35 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────



pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_1.yaml (kubernetes)
====================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_1.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 │   - create
  12 │   - delete
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────



pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml (kubernetes)
====================================================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b' in 'pepr-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b" in "pepr-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b in pepr-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b in pepr-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:18-71
────────────────────────────────────────
  18 ┌       priorityClassName: system-node-critical
  19 │       serviceAccountName: pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b
  20 │       containers:
  21 │       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 └         - /app/node_modules/pepr/dist/controller.js
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment pepr-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b (namespace: pepr-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pepr-module-cb5693ef-d13c-5fe1-b5ad-c870fd911b3b_6.yaml:21-61
────────────────────────────────────────
  21 ┌       - name: server
  22 │         image: ghcr.io/defenseunicorns/pepr/controller:v0.15.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         command:
  25 │         - node
  26 │         - /app/node_modules/pepr/dist/controller.js
  27 │         - b947b4974c9919a3983673269d19f548e2d8a99db04d9401a53eb9f0bcc71ff0
  28 │         readinessProbe:
  29 └           httpGet:
  ..   
────────────────────────────────────────



percona.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'percona' of Deployment 'percona' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'percona' of Deployment 'percona' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'percona' of 'deployment' 'percona' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'percona' of Deployment 'percona' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'percona' of Deployment 'percona' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'percona' of Deployment 'percona' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'percona' of Deployment 'percona' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'percona' of Deployment 'percona' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'percona' of Deployment 'percona' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'percona' of Deployment 'percona' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'percona' of Deployment 'percona' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'percona' of Deployment 'percona' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "percona" of deployment "percona" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment percona in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 percona.yaml:4
────────────────────────────────────────
   4 [   name: percona
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container percona in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment percona in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 percona.yaml:15-26
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: data
  17 │         emptyDir: {}
  18 │       containers:
  19 │       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 └           mountPath: /var/lib/mysql
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container percona in deployment percona (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 percona.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: percona
  20 │         image: percona/percona-server:latest
  21 │         volumeMounts:
  22 │         - name: data
  23 │           mountPath: /var/lib/mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           value: password
────────────────────────────────────────



periodic.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello' of CronJob 'hello' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello' of CronJob 'hello' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello' of 'cronjob' 'hello' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello' of CronJob 'hello' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello' of CronJob 'hello' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello' of CronJob 'hello' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello' of CronJob 'hello' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello' of CronJob 'hello' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello' of CronJob 'hello' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello' of CronJob 'hello' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello' of CronJob 'hello' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello" of cronjob "hello" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob hello in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 periodic.yaml:4
────────────────────────────────────────
   4 [   name: hello
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 periodic.yaml:13-17
────────────────────────────────────────
  13 ┌           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 └             - date
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob hello in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 periodic.yaml:12-18
────────────────────────────────────────
  12 ┌           containers:
  13 │           - name: hello
  14 │             image: busybox:stable
  15 │             imagePullPolicy: IfNotPresent
  16 │             command:
  17 │             - date
  18 └           restartPolicy: OnFailure
────────────────────────────────────────



permission_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'create-job-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 permission_1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - batch
   8 │   resources:
   9 │   - jobs
  10 │   verbs:
  11 └   - create
────────────────────────────────────────



permissions-metrics-server-exporter.yaml (kubernetes)
=====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'metrics-server-exporter' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 permissions-metrics-server-exporter.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - metrics.k8s.io
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 └   - '*'
────────────────────────────────────────



permissions4_1.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-binding' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 permissions4_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-binding
────────────────────────────────────────



permissions5.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'config-map-access' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 permissions5.yaml:7-25
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   - deployments
  12 │   - pods
  13 │   - services
  14 │   - endpoints
  15 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'config-map-access' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 permissions5.yaml:7-25
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   - deployments
  12 │   - pods
  13 │   - services
  14 │   - endpoints
  15 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'config-map-access' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 permissions5.yaml:7-25
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   - deployments
  12 │   - pods
  13 │   - services
  14 │   - endpoints
  15 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'config-map-access' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 permissions5.yaml:7-25
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   - deployments
  12 │   - pods
  13 │   - services
  14 │   - endpoints
  15 └   - events
  ..   
────────────────────────────────────────



permissions5_2.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'deployment-access' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 permissions5_2.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - apps
   9 │   - patch
  10 │   resources:
  11 │   - deployments
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────



permissions_pod.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-permission-pod' of Job 'my-permission-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-permission-pod' of Job 'my-permission-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-permission-pod' of 'job' 'my-permission-pod' in 'openmetadata' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-permission-pod' of Job 'my-permission-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-permission-pod' of Job 'my-permission-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-permission-pod' of Job 'my-permission-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-permission-pod' of Job 'my-permission-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-permission-pod' of Job 'my-permission-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-permission-pod' of Job 'my-permission-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-permission-pod' of Job 'my-permission-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-permission-pod' of Job 'my-permission-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-permission-pod' of Job 'my-permission-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-permission-pod" of job "my-permission-pod" in "openmetadata" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-permission-pod in openmetadata namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 permissions_pod.yaml:13-20
────────────────────────────────────────
  13 ┌       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job my-permission-pod in openmetadata namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 permissions_pod.yaml:12-28
────────────────────────────────────────
  12 ┌       containers:
  13 │       - image: busybox
  14 │         name: my-permission-pod
  15 │         volumeMounts:
  16 │         - name: airflow-dags
  17 │           mountPath: /airflow-dags
  18 │         - name: airflow-logs
  19 │           mountPath: /airflow-logs
  20 └         command: ["/bin/sh", "-c", "chown -R 50000 /airflow-dags /airflow-logs", "chmod -R a+rwx /airflow-dags"]
  ..   
────────────────────────────────────────



permissoes.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'aluno' shouldn't manage all resources at the namespace 'sd'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 permissoes.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   - autoscaling
  10 │   - apps
  11 │   - networking.k8s.io
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - create
  ..   
────────────────────────────────────────



permissoes1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'aluno' shouldn't manage all resources at the namespace 'sd'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 permissoes1.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   - autoscaling
  10 │   - apps
  11 │   - networking.k8s.io
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - create
  ..   
────────────────────────────────────────



persistantvol.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysqlS' of 'pod' 'mysql-dynamic-vol' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysqlS' of Pod 'mysql-dynamic-vol' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysqlS" of pod "mysql-dynamic-vol" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql-dynamic-vol in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistantvol.yaml:4-7
────────────────────────────────────────
   4 ┌   name: mysql-dynamic-vol
   5 │   labels:
   6 │     app: mysql
   7 └     layer: db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-dynamic-vol in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistantvol.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 └       mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql-dynamic-vol in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistantvol.yaml:9-20
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: mysqlS
  11 │     image: mysql:8
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     volumeMounts:
  15 │     - name: mysql-pvol
  16 │       mountPath: /var/lib/mysql
  17 └   volumes:
  ..   
────────────────────────────────────────



persistent-volume-claim-default_1.yaml (kubernetes)
===================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'silly-demo' of 'deployment' 'silly-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "silly-demo" of deployment "silly-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment silly-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: silly-demo
   5 │   labels:
   6 └     app.kubernetes.io/name: silly-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container silly-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment silly-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container silly-demo in deployment silly-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume-claim-default_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         env:
  ..   
────────────────────────────────────────



persistent-volume-claim-mount-pod-definition.yaml (kubernetes)
==============================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alpine' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpine' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpine' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alpine' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 └           name: mypd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-claim-mount-pod-definition.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: alpine
   8 │       image: alpine
   9 │       volumeMounts:
  10 │         - mountPath: "/var/www/html"
  11 │           name: mypd
  12 │   volumes:
  13 │     - name: mypd
  14 │       persistentVolumeClaim:
  15 └         claimName: myclaim
────────────────────────────────────────



persistent-volume-nfs3_2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 └           name: my-volume-name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-nfs3_2.yaml:17-29
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - mountPath: /mnt/demo-nfs
  24 │           name: my-volume-name
  25 └       volumes:
  ..   
────────────────────────────────────────



persistent-volume-pod.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine' of Pod 'pvc-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine' of Pod 'pvc-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine' of 'pod' 'pvc-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alpine' of Pod 'pvc-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine' of Pod 'pvc-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine' of Pod 'pvc-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine' of Pod 'pvc-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpine' of Pod 'pvc-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpine' of Pod 'pvc-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alpine' of Pod 'pvc-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine' of Pod 'pvc-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine' of Pod 'pvc-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine" of pod "pvc-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pvc-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pvc-pod
   5 │   labels:
   6 └     name: pvc-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvc-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-pod.yaml:10-15
────────────────────────────────────────
  10 ┌     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 └           name: pod-vol
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pvc-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-pod.yaml:8-19
────────────────────────────────────────
   8 ┌   restartPolicy: Never
   9 │   containers:
  10 │     - name: alpine
  11 │       image: alpine
  12 │       command: ["sh", "-c", "echo Hello Kubernetes, We learn Persistent Volume Claim >> /output/test.txt"]
  13 │       volumeMounts:
  14 │         - mountPath: /output
  15 │           name: pod-vol
  16 └   volumes:
  ..   
────────────────────────────────────────



persistent-volume-pod1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pv-container' of Pod 'pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pv-container' of 'pod' 'pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pv-container' of Pod 'pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pv-container' of Pod 'pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pv-container" of pod "pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume-pod1.yaml:4
────────────────────────────────────────
   4 [   name: pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume-pod1.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: pv-container
   8 │       image: nginx
   9 │       ports:
  10 │         - containerPort: 80
  11 │           name: "http-server"
  12 │       volumeMounts:
  13 │         - mountPath: "/usr/share/nginx/html"
  14 └           name: pv-storage
  ..   
────────────────────────────────────────



persistent-volume13_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-writer' of 'pod' 'nodejs-writer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-writer" of pod "nodejs-writer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nodejs-writer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume13_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-writer
   5 │   labels:
   6 └     name: nodejs-writer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-writer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nodejs-writer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume13_2.yaml:8-17
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: html
  10 │     persistentVolumeClaim:
  11 │       claimName: nodejs-writer-volume-claim
  12 │   containers:
  13 │   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-writer in pod nodejs-writer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume13_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────



persistent-volume34_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-writer' of 'pod' 'nodejs-writer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-writer" of pod "nodejs-writer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nodejs-writer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume34_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-writer
   5 │   labels:
   6 └     name: nodejs-writer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-writer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nodejs-writer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume34_2.yaml:8-17
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: html
  10 │     persistentVolumeClaim:
  11 │       claimName: nodejs-writer-volume-claim
  12 │   containers:
  13 │   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-writer in pod nodejs-writer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume34_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────



persistent-volume37.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'silly-demo' of 'deployment' 'silly-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "silly-demo" of deployment "silly-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment silly-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume37.yaml:5-7
────────────────────────────────────────
   5 ┌   name: silly-demo
   6 │   labels:
   7 └     app.kubernetes.io/name: silly-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container silly-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment silly-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume37.yaml:17-35
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 └               port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container silly-demo in deployment silly-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume37.yaml:18-31
────────────────────────────────────────
  18 ┌         - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  19 │           name: silly-demo
  20 │           ports:
  21 │             - containerPort: 8080    
  22 │           readinessProbe:
  23 │             httpGet:
  24 │               path: /
  25 │               port: 8080
  26 └           env:
  ..   
────────────────────────────────────────



persistent-volume38_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-writer' of 'pod' 'nodejs-writer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-writer" of pod "nodejs-writer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nodejs-writer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume38_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-writer
   5 │   labels:
   6 └     name: nodejs-writer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-writer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nodejs-writer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume38_2.yaml:8-17
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: html
  10 │     persistentVolumeClaim:
  11 │       claimName: nodejs-writer-volume-claim
  12 │   containers:
  13 │   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-writer in pod nodejs-writer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume38_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: akhmadwildan/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────



persistent-volume44_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-writer' of 'pod' 'nodejs-writer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-writer" of pod "nodejs-writer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nodejs-writer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume44_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-writer
   5 │   labels:
   6 └     name: nodejs-writer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-writer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nodejs-writer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume44_2.yaml:8-17
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: html
  10 │     persistentVolumeClaim:
  11 │       claimName: nodejs-writer-volume-claim
  12 │   containers:
  13 │   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-writer in pod nodejs-writer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume44_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: gilanggustina/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────



persistent-volume45_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume45_2.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume45_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 │     - mountPath: /var/lib/www/html
  15 └       name: my-volume-name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume45_2.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: nginx
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: nginx
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │     volumeMounts:
  14 └     - mountPath: /var/lib/www/html
  ..   
────────────────────────────────────────



persistent-volume4_2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-writer' of 'pod' 'nodejs-writer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-writer" of pod "nodejs-writer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nodejs-writer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume4_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-writer
   5 │   labels:
   6 └     name: nodejs-writer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-writer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nodejs-writer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume4_2.yaml:8-17
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: html
  10 │     persistentVolumeClaim:
  11 │       claimName: nodejs-writer-volume-claim
  12 │   containers:
  13 │   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-writer in pod nodejs-writer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume4_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────



persistent-volume54_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-writer' of 'pod' 'nodejs-writer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-writer" of pod "nodejs-writer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nodejs-writer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume54_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-writer
   5 │   labels:
   6 └     name: nodejs-writer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-writer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nodejs-writer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume54_2.yaml:8-17
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: html
  10 │     persistentVolumeClaim:
  11 │       claimName: nodejs-writer-volume-claim
  12 │   containers:
  13 │   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-writer in pod nodejs-writer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume54_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────



persistent-volume60_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-writer' of 'pod' 'nodejs-writer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-writer" of pod "nodejs-writer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nodejs-writer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume60_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-writer
   5 │   labels:
   6 └     name: nodejs-writer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-writer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nodejs-writer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume60_2.yaml:8-17
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: html
  10 │     persistentVolumeClaim:
  11 │       claimName: nodejs-writer-volume-claim
  12 │   containers:
  13 │   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-writer in pod nodejs-writer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume60_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────



persistent-volume9_2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-writer' of 'pod' 'nodejs-writer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-writer" of pod "nodejs-writer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nodejs-writer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume9_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-writer
   5 │   labels:
   6 └     name: nodejs-writer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-writer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nodejs-writer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume9_2.yaml:8-17
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: html
  10 │     persistentVolumeClaim:
  11 │       claimName: nodejs-writer-volume-claim
  12 │   containers:
  13 │   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-writer in pod nodejs-writer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume9_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────



persistent-volume_2.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-writer' of 'pod' 'nodejs-writer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-writer' of Pod 'nodejs-writer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-writer' of Pod 'nodejs-writer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-writer" of pod "nodejs-writer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nodejs-writer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volume_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-writer
   5 │   labels:
   6 └     name: nodejs-writer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-writer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nodejs-writer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volume_2.yaml:8-17
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: html
  10 │     persistentVolumeClaim:
  11 │       claimName: nodejs-writer-volume-claim
  12 │   containers:
  13 │   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-writer in pod nodejs-writer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 persistent-volume_2.yaml:13-17
────────────────────────────────────────
  13 ┌   - name: nodejs-writer
  14 │     image: khannedy/nodejs-writer
  15 │     volumeMounts:
  16 │     - mountPath: /app/html
  17 └       name: html
────────────────────────────────────────



persistent-volumes8_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-nautilus' of Pod 'pod-nautilus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-nautilus' of Pod 'pod-nautilus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-nautilus' of 'pod' 'pod-nautilus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-nautilus' of Pod 'pod-nautilus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-nautilus' of Pod 'pod-nautilus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container-nautilus' of Pod 'pod-nautilus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-nautilus' of Pod 'pod-nautilus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-nautilus' of Pod 'pod-nautilus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-nautilus' of Pod 'pod-nautilus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-nautilus' of Pod 'pod-nautilus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-nautilus' of Pod 'pod-nautilus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-nautilus' of Pod 'pod-nautilus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-nautilus" of pod "pod-nautilus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-nautilus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent-volumes8_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pod-nautilus
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod pod-nautilus in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-nautilus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volumes8_2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 └       name: nginx-pv
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-nautilus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent-volumes8_2.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: container-nautilus
  10 │     image: nginx:latest
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - mountPath: /var/www/html
  15 │       name: nginx-pv
  16 └   volumes:
  ..   
────────────────────────────────────────



persistentVolume-deploy.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mi-contenedor' of 'deployment' 'mi-aplicacion' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mi-contenedor" of deployment "mi-aplicacion" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mi-aplicacion in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistentVolume-deploy.yaml:4
────────────────────────────────────────
   4 [  name: mi-aplicacion
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mi-aplicacion in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mi-aplicacion in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentVolume-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mi-aplicacion in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentVolume-deploy.yaml:15-26
────────────────────────────────────────
  15 ┌     containers:
  16 │     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 │         name: mi-volumen
  23 └     volumes:
  ..   
────────────────────────────────────────



persistentVolume-deploy1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mi-contenedor' of 'deployment' 'mi-aplicacion' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mi-contenedor' of Deployment 'mi-aplicacion' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mi-contenedor" of deployment "mi-aplicacion" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mi-aplicacion in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistentVolume-deploy1.yaml:4
────────────────────────────────────────
   4 [  name: mi-aplicacion
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mi-aplicacion in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mi-aplicacion in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentVolume-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 └         name: mi-volumen
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mi-aplicacion in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentVolume-deploy1.yaml:15-26
────────────────────────────────────────
  15 ┌     containers:
  16 │     - name: mi-contenedor
  17 │       image: nginx
  18 │       ports:
  19 │       - containerPort: 80
  20 │       volumeMounts:
  21 │       - mountPath: /usr/share/nginx/html
  22 │         name: mi-volumen
  23 └     volumes:
  ..   
────────────────────────────────────────


