
Report Summary

┌────────────────────────────────────┬────────────┬───────────────────┐
│               Target               │    Type    │ Misconfigurations │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ Calico48_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico-v3.28.1_26.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico-v3.28.1_27.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico-v3.28.1_28.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico-v3.28.1_3.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico-v3.28.1_30.yaml             │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico-v3.28.1_4.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico.yaml                        │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico10_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico11.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico11_15.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico11_16.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico11_17.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico11_18.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico11_20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico11_21.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico11_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico13.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico13_15.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico13_16.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico13_17.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico13_18.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico13_20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico13_21.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico13_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico14_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico16.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico16_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico16_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico16_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico16_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico16_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico16_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico16_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico16_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_1.yaml                    │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_29.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_30.yaml                   │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_32.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_33.yaml                   │ kubernetes │        15         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico17_5.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_1.yaml                    │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_26.yaml                   │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_28.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_29.yaml                   │ kubernetes │        15         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico18_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico19.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico19_11.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico19_2.yaml                    │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico19_8.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico2.yaml                       │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico25.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico25_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico25_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico25_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico25_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico25_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico25_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico25_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico25_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico26_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico27.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico27_32.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico27_33.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico27_35.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico27_36.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico27_38.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico27_39.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico27_40.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico29.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico29_32.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico29_33.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico29_35.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico29_36.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico29_38.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico29_39.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico29_40.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico2_1.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico2_2.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico2_21.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico2_22.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico2_23.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico2_24.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico2_26.yaml                    │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico2_3.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico3.yaml                       │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico30.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico30_15.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico30_16.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico30_17.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico30_18.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico30_20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico30_21.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico30_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico31.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico31_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico31_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico31_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico31_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico31_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico31_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico31_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico31_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico32.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico32_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico32_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico32_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico32_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico32_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico32_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico32_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico32_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico33_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico34.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico34_17.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico34_18.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico34_20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico34_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico34_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico34_24.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico34_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico36.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico36_20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico36_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico36_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico36_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico36_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico36_27.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico36_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico36_29.yaml                   │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico37.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico37_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico37_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico37_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico37_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico37_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico37_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico37_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico37_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico38.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico38_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico38_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico38_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico38_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico38_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico38_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico38_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico38_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico39.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico39_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico39_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico39_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico39_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico39_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico39_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico39_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico39_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico3_1.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico3_2.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico3_21.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico3_22.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico3_23.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico3_24.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico3_26.yaml                    │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico3_3.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico4.yaml                       │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico40.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico40_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico40_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico40_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico40_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico40_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico40_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico40_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico40_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico41.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico41_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico41_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico41_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico41_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico41_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico41_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico41_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico41_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico42.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico42_17.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico42_18.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico42_20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico42_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico42_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico42_24.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico42_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico42_26.yaml                   │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico43.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico43_17.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico43_18.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico43_20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico43_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico43_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico43_24.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico43_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico43_26.yaml                   │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico44.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico44_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico44_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico44_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico44_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico44_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico44_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico44_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico44_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico45.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico45_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico45_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico45_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico45_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico45_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico45_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico45_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico45_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico46.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico46_32.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico46_33.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico46_35.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico46_36.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico46_38.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico46_39.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico46_40.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico47_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico4_15.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico4_16.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico4_17.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico4_18.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico4_20.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico4_21.yaml                    │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico4_22.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico5.yaml                       │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico50.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico50_15.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico50_16.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico50_17.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico50_18.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico50_20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico50_21.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico50_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico51.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico51_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico51_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico51_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico51_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico51_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico51_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico51_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico51_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico52.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico52_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico52_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico52_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico52_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico52_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico52_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico52_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico52_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico53.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico53_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico53_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico53_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico53_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico53_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico53_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico53_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico53_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico54_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico55.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico55_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico55_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico55_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico55_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico55_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico55_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico55_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico55_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico56.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico56_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico56_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico56_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico56_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico56_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico56_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico56_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico56_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico58.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico58_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico58_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico58_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico58_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico58_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico58_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico58_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico58_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico59.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico59_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico59_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico59_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico59_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico59_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico59_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico59_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico59_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico5_15.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico5_16.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico5_17.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico5_18.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico5_20.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico5_21.yaml                    │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico5_22.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_28.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico60_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico61_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico62.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico62_19.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico62_20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico62_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico62_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico62_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico62_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico62_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico62_28.yaml                   │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico63.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico63_32.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico63_33.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico63_35.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico63_36.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico63_38.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico63_39.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico63_40.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico67.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico67_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico67_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico67_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico67_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico67_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico67_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico67_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico67_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico68_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico69_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico7.yaml                       │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico70_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico71_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico72.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico72_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico72_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico72_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico72_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico72_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico72_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico72_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico72_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico73.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico73_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico73_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico73_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico73_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico73_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico73_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico73_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico73_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico74_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico75.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico75_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico75_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico75_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico75_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico75_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico75_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico75_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico75_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico76_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico77.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico77_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico77_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico77_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico77_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico77_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico77_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico77_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico77_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_30.yaml                   │ kubernetes │        17         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico78_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_30.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico79_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico7_1.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico7_2.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico7_21.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico7_22.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico7_23.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico7_24.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico7_26.yaml                    │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico7_3.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico8.yaml                       │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico81.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico81_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico81_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico81_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico81_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico81_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico81_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico81_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico81_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico82.yaml                      │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico82_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico82_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico82_21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico82_22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico82_23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico82_24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico82_26.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico82_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico8_1.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico8_2.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico8_21.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico8_22.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico8_23.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico8_24.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico8_26.yaml                    │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico8_3.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico9.yaml                       │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico9_15.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico9_16.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico9_17.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico9_18.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico9_20.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico9_21.yaml                    │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico9_22.yaml                    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_15.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_16.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_17.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_18.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_20.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_21.yaml                     │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_22.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni.yaml                    │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni1.yaml                   │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni1_32.yaml                │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni1_33.yaml                │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni1_35.yaml                │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni1_36.yaml                │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni1_38.yaml                │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni1_39.yaml                │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni1_40.yaml                │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni_32.yaml                 │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni_33.yaml                 │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni_35.yaml                 │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni_36.yaml                 │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni_38.yaml                 │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni_39.yaml                 │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_cni_40.yaml                 │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy.yaml                 │ kubernetes │        20         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1.yaml                │ kubernetes │        20         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_13.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_14.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_15.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_16.yaml             │ kubernetes │        15         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_18.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_19.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_20.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_21.yaml             │ kubernetes │        15         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_22.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_24.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy1_25.yaml             │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_13.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_14.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_15.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_16.yaml              │ kubernetes │        15         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_18.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_19.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_20.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_21.yaml              │ kubernetes │        15         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_22.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_23.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_24.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calico_policy_25.yaml              │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ caller-service.yaml                │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ caller-service1.yaml               │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ caller-service1_1.yaml             │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ caller-service_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install.yaml            │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install_1.yaml          │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install_2.yaml          │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install_3.yaml          │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install_4.yaml          │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install_5.yaml          │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install_6.yaml          │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install_7.yaml          │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install_8.yaml          │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-install_9.yaml          │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-val.yaml                │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-val_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-val_2.yaml              │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ calrissian-val_3.yaml              │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ camel-amqp-quarkus.yaml            │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ camel-amqp-quarkus1.yaml           │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ camera-service.yaml                │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ camera-service_1.yaml              │ kubernetes │        15         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ camera-service_2.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ campgrounds.yaml                   │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ campgrounds_1.yaml                 │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ camunda-config.yaml                │ kubernetes │         2         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ camunda-config1.yaml               │ kubernetes │         2         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd.yaml                    │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_1.yaml                  │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_10.yaml                 │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_11.yaml                 │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_12.yaml                 │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_14.yaml                 │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_15.yaml                 │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_2.yaml                  │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_3.yaml                  │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_4.yaml                  │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_5.yaml                  │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_6.yaml                  │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_7.yaml                  │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_8.yaml                  │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal-etcd_9.yaml                  │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1.yaml                        │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_1.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_2.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_23.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_24.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_25.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_26.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_27.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_28.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_29.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_3.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_30.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_32.yaml                     │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal1_4.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2.yaml                        │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_1.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_2.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_21.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_22.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_23.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_24.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_25.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_26.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_28.yaml                     │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal2_3.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3.yaml                        │ kubernetes │         1         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_1.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_2.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_23.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_24.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_25.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_26.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_27.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_28.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_29.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_3.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_30.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_32.yaml                     │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canal3_4.yaml                      │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-1-dep.yaml                  │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-1-dep1.yaml                 │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-12.yaml                     │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-2-dep.yaml                  │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-2-dep1.yaml                 │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-app.yaml                    │ kubernetes │        17         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-app1.yaml                   │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-blue-dep.yaml               │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-deploy-new.yaml             │ kubernetes │        17         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-deploy.yaml                 │ kubernetes │        20         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-deploy1.yaml                │ kubernetes │        20         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-deploy2.yaml                │ kubernetes │        17         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-deploy3.yaml                │ kubernetes │        20         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-deployment.yaml             │ kubernetes │        17         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-deployment1.yaml            │ kubernetes │        19         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-deployment2.yaml            │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-echo-server-deployment.yaml │ kubernetes │        20         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-echo-server-service.yaml    │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-ingress1.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-ingress2.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-ingress3.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-ingress4.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-ingress5.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-red-dep.yaml                │ kubernetes │        18         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service.yaml                │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service1.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service10.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service11.yaml              │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service2.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service3.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service4.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service5.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service6.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service7.yaml               │ kubernetes │         0         │
├────────────────────────────────────┼────────────┼───────────────────┤
│ canary-service8.yaml               │ kubernetes │         0         │
└────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Calico48.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Calico48.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



Calico48_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Calico48_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Calico48_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Calico48_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico-v3.28.1_30.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico-v3.28.1_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico-v3.28.1_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico-v3.28.1_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.28.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico10.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico10.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico10_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico10_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico10_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico10_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico11.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico11_21.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico11_21.yaml:9-45
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico11_21.yaml:24-45
────────────────────────────────────────
  24 ┌       nodeSelector:
  25 │         beta.kubernetes.io/os: linux
  26 │       tolerations:
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       - key: node-role.kubernetes.io/master
  30 │         effect: NoSchedule
  31 │       serviceAccountName: calico-kube-controllers
  32 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico11_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────



calico13.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico13_21.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico13_21.yaml:9-45
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico13_21.yaml:24-45
────────────────────────────────────────
  24 ┌       nodeSelector:
  25 │         beta.kubernetes.io/os: linux
  26 │       tolerations:
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       - key: node-role.kubernetes.io/master
  30 │         effect: NoSchedule
  31 │       serviceAccountName: calico-kube-controllers
  32 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico13_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.11.2
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────



calico14.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico14.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico14_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico14_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico14_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico14_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico16.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico16.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico16_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico16_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico16_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico16_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico17.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico17.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico17_1.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-typha
────────────────────────────────────────



calico17_30.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico17_30.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 5473
  11 │     protocol: TCP
  12 │     targetPort: calico-typha
  13 │     name: calico-typha
  14 │   selector:
  15 └     k8s-app: calico-typha
────────────────────────────────────────



calico17_32.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico17_32.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico17_32.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico17_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico17_33.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 99, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-typha' of 'deployment' 'calico-typha' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'calico-typha' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 calico17_33.yaml:9-81
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 2
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: calico-typha
  14 │   strategy:
  15 │     rollingUpdate:
  16 │       maxSurge: 100%
  17 └       maxUnavailable: 1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico17_33.yaml:9-81
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 2
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: calico-typha
  14 │   strategy:
  15 │     rollingUpdate:
  16 │       maxSurge: 100%
  17 └       maxUnavailable: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-typha" of deployment "calico-typha" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-typha in deployment calico-typha (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico17_33.yaml:38-81
────────────────────────────────────────
  38 ┌       - image: docker.io/calico/typha:master
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: calico-typha
  41 │         ports:
  42 │         - containerPort: 5473
  43 │           name: calico-typha
  44 │           protocol: TCP
  45 │         envFrom:
  46 └         - configMapRef:
  ..   
────────────────────────────────────────



calico18.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico18.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico18_1.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico18_1.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-typha
────────────────────────────────────────



calico18_26.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico18_26.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 5473
  11 │     protocol: TCP
  12 │     targetPort: calico-typha
  13 │     name: calico-typha
  14 │   selector:
  15 └     k8s-app: calico-typha
────────────────────────────────────────



calico18_28.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico18_28.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico18_28.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico18_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: registry.cn-hangzhou.aliyuncs.com/chenby/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico18_29.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 99, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-typha' of 'deployment' 'calico-typha' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'calico-typha' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 calico18_29.yaml:9-73
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 2
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: calico-typha
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         k8s-app: calico-typha
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico18_29.yaml:9-73
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 2
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: calico-typha
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         k8s-app: calico-typha
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-typha" of deployment "calico-typha" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-typha in deployment calico-typha (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico18_29.yaml:32-73
────────────────────────────────────────
  32 ┌       - image: registry.cn-hangzhou.aliyuncs.com/chenby/typha:master
  33 │         imagePullPolicy: IfNotPresent
  34 │         name: calico-typha
  35 │         ports:
  36 │         - containerPort: 5473
  37 │           name: calico-typha
  38 │           protocol: TCP
  39 │         envFrom:
  40 └         - configMapRef:
  ..   
────────────────────────────────────────



calico19_2.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'calico-etcd' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico19_2.yaml:9-13
────────────────────────────────────────
   9 ┌   selector:
  10 │     k8s-app: calico-etcd
  11 │   clusterIP: 10.96.232.136
  12 │   ports:
  13 └   - port: 6666
────────────────────────────────────────



calico2.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico2.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico25.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico25.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico25_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico25_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico25_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico25_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico26.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico26.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico26_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico26_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico26_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico26_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico27.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico27_39.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico27_39.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico27_39.yaml:22-43
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico27_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico29.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico29_39.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico29_39.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico29_39.yaml:22-43
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico29_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: quay.io/calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico2_26.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico2_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico2_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico2_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico3.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico3.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico30.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico30_21.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico30_21.yaml:9-45
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico30_21.yaml:24-45
────────────────────────────────────────
  24 ┌       nodeSelector:
  25 │         beta.kubernetes.io/os: linux
  26 │       tolerations:
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       - key: node-role.kubernetes.io/master
  30 │         effect: NoSchedule
  31 │       serviceAccountName: calico-kube-controllers
  32 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico30_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────



calico31.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico31.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico31_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico31_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico31_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico31_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico32.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico32.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico32_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico32_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico32_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico32_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico33.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico33.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico33_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico33_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico33_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico33_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico34_24.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico34_24.yaml:9-53
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico34_24.yaml:22-53
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico34_24.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.20.6
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico36_27.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico36_27.yaml:9-53
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico36_27.yaml:22-53
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico36_27.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.21.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico36_29.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico36_29.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico37.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico37.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico37_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico37_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico37_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico37_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico38.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico38.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico38_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico38_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico38_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico38_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico39.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico39.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico39_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico39_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico39_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico39_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico3_26.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico3_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico3_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico3_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico4.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico40.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico40.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico40_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico40_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico40_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico40_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico41.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico41.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico41_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico41_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico41_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico41_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico42_24.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico42_24.yaml:9-52
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico42_24.yaml:22-52
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico42_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico42_26.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico42_26.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico43_24.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico43_24.yaml:9-52
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico43_24.yaml:22-52
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico43_24.yaml:32-52
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.19.4
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico43_26.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico43_26.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico44.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico44.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico44_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico44_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico44_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico44_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico45.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico45.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico45_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico45_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico45_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico45_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico46.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico46_39.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico46_39.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico46_39.yaml:22-43
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico46_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.0
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico47.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico47.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico47_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico47_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico47_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico47_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.2
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico4_21.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico4_21.yaml:9-45
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico4_21.yaml:24-45
────────────────────────────────────────
  24 ┌       nodeSelector:
  25 │         beta.kubernetes.io/os: linux
  26 │       tolerations:
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       - key: node-role.kubernetes.io/master
  30 │         effect: NoSchedule
  31 │       serviceAccountName: calico-kube-controllers
  32 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico4_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────



calico5.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico50.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico50_21.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico50_21.yaml:9-45
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico50_21.yaml:24-45
────────────────────────────────────────
  24 ┌       nodeSelector:
  25 │         beta.kubernetes.io/os: linux
  26 │       tolerations:
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       - key: node-role.kubernetes.io/master
  30 │         effect: NoSchedule
  31 │       serviceAccountName: calico-kube-controllers
  32 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico50_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────



calico51.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico51.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico51_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico51_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico51_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico51_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico52.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico52.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico52_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico52_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico52_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico52_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico53.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico53.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico53_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico53_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico53_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico53_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico54.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico54.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico54_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico54_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico54_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico54_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico55.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico55.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico55_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico55_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico55_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico55_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico56.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico56.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico56_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico56_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico56_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico56_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico58.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico58.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico58_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico58_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico58_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico58_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico59.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico59.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico59_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico59_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico59_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico59_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico5_21.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico5_21.yaml:9-45
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico5_21.yaml:24-45
────────────────────────────────────────
  24 ┌       nodeSelector:
  25 │         beta.kubernetes.io/os: linux
  26 │       tolerations:
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       - key: node-role.kubernetes.io/master
  30 │         effect: NoSchedule
  31 │       serviceAccountName: calico-kube-controllers
  32 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico5_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────



calico60.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico60.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico60_28.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico60_28.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico60_28.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico60_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.24.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico61.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico61.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico61_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico61_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico61_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico61_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico62_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico62_26.yaml:9-53
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico62_26.yaml:22-53
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico62_26.yaml:32-53
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: docker.io/calico/kube-controllers:v3.23.3
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         livenessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico62_28.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico62_28.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico63.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico63_39.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico63_39.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico63_39.yaml:22-43
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico63_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico67.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico67.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico67_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico67_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico67_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico67_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico68.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico68.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico68_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico68_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico68_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico68_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico69.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico69.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico69_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico69_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico69_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico69_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico7.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico7.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico70.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico70.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico70_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico70_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico70_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico70_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico71.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico71.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico71_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico71_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico71_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico71_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:master
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico72.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico72.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico72_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico72_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico72_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico72_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico73.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico73.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico73_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico73_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico73_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico73_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico74.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico74.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico74_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico74_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico74_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico74_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico75.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico75.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico75_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico75_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico75_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico75_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico76.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico76.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico76_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico76_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico76_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico76_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.3
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico77.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico77.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico78.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico78.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico78_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico78_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico78_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: gcr.io/istio-testing/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico78_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────



calico79.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico79.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico79_30.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico79_30.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico79_30.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico79_30.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.26.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico7_26.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico7_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico7_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico7_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico8.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico8.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico81.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico81.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico81_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico81_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico81_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico81_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico82.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico82.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



calico82_26.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico82_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico82_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico82_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico8_26.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico8_26.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico8_26.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico8_26.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



calico9.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico9_21.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico9_21.yaml:9-45
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico9_21.yaml:24-45
────────────────────────────────────────
  24 ┌       nodeSelector:
  25 │         beta.kubernetes.io/os: linux
  26 │       tolerations:
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       - key: node-role.kubernetes.io/master
  30 │         effect: NoSchedule
  31 │       serviceAccountName: calico-kube-controllers
  32 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico9_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────



calico_21.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_21.yaml:9-45
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_21.yaml:24-45
────────────────────────────────────────
  24 ┌       nodeSelector:
  25 │         beta.kubernetes.io/os: linux
  26 │       tolerations:
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       - key: node-role.kubernetes.io/master
  30 │         effect: NoSchedule
  31 │       serviceAccountName: calico-kube-controllers
  32 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico_21.yaml:34-45
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: calico/kube-controllers:v3.9.6
  36 │         env:
  37 │         - name: ENABLED_CONTROLLERS
  38 │           value: node
  39 │         - name: DATASTORE_TYPE
  40 │           value: kubernetes
  41 │         readinessProbe:
  42 └           exec:
  ..   
────────────────────────────────────────



calico_cni.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico_cni1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'calico-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"veth_mtu"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



calico_cni1_39.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_cni1_39.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_cni1_39.yaml:22-43
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico_cni1_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico_cni_39.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_cni_39.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_cni_39.yaml:22-43
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       serviceAccountName: calico-kube-controllers
  30 └       priorityClassName: system-cluster-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico_cni_39.yaml:32-43
────────────────────────────────────────
  32 ┌       - name: calico-kube-controllers
  33 │         image: calico/kube-controllers:v3.15.1
  34 │         env:
  35 │         - name: ENABLED_CONTROLLERS
  36 │           value: node
  37 │         - name: DATASTORE_TYPE
  38 │           value: kubernetes
  39 │         readinessProbe:
  40 └           exec:
  ..   
────────────────────────────────────────



calico_policy.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-node' of 'daemonset' 'calico-node' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'calico-node' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 calico_policy.yaml:9-116
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: calico-node
  12 │   updateStrategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'calico-node' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 calico_policy.yaml:9-116
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: calico-node
  12 │   updateStrategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'calico-node' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_policy.yaml:9-116
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: calico-node
  12 │   updateStrategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-node" of daemonset "calico-node" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset calico-node in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_policy.yaml:21-116
────────────────────────────────────────
  21 ┌       priorityClassName: system-node-critical
  22 │       nodeSelector:
  23 │         beta.kubernetes.io/os: linux
  24 │       hostNetwork: true
  25 │       serviceAccountName: calico-node
  26 │       terminationGracePeriodSeconds: 0
  27 │       containers:
  28 │       - name: calico-node
  29 └         image: quay.io/calico/node:v3.13.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-node in daemonset calico-node (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico_policy.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────



calico_policy1.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-node' of 'daemonset' 'calico-node' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'calico-node' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 calico_policy1.yaml:9-116
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: calico-node
  12 │   updateStrategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-node' of DaemonSet 'calico-node' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'calico-node' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 calico_policy1.yaml:9-116
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: calico-node
  12 │   updateStrategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'calico-node' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_policy1.yaml:9-116
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: calico-node
  12 │   updateStrategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-node" of daemonset "calico-node" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset calico-node in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_policy1.yaml:21-116
────────────────────────────────────────
  21 ┌       priorityClassName: system-node-critical
  22 │       nodeSelector:
  23 │         beta.kubernetes.io/os: linux
  24 │       hostNetwork: true
  25 │       serviceAccountName: calico-node
  26 │       terminationGracePeriodSeconds: 0
  27 │       containers:
  28 │       - name: calico-node
  29 └         image: quay.io/calico/node:v3.13.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-node in daemonset calico-node (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico_policy1.yaml:28-95
────────────────────────────────────────
  28 ┌       - name: calico-node
  29 │         image: quay.io/calico/node:v3.13.4
  30 │         env:
  31 │         - name: DATASTORE_TYPE
  32 │           value: kubernetes
  33 │         - name: FELIX_INTERFACEPREFIX
  34 │           value: eni
  35 │         - name: FELIX_LOGSEVERITYSCREEN
  36 └           value: info
  ..   
────────────────────────────────────────



calico_policy1_16.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 99, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-typha' of 'deployment' 'calico-typha' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'calico-typha' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 calico_policy1_16.yaml:9-75
────────────────────────────────────────
   9 ┌   revisionHistoryLimit: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-typha
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: calico-typha
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_policy1_16.yaml:9-75
────────────────────────────────────────
   9 ┌   revisionHistoryLimit: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-typha
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: calico-typha
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-typha" of deployment "calico-typha" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-typha in deployment calico-typha (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico_policy1_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────



calico_policy1_21.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'autoscaler' of 'deployment' 'calico-typha-horizontal-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-typha-horizontal-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_policy1_21.yaml:9-36
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: calico-typha-autoscaler
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: calico-typha-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "autoscaler" of deployment "calico-typha-horizontal-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-typha-horizontal-autoscaler in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_policy1_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-typha-horizontal-autoscaler in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_policy1_21.yaml:18-36
────────────────────────────────────────
  18 ┌       priorityClassName: system-cluster-critical
  19 │       nodeSelector:
  20 │         beta.kubernetes.io/os: linux
  21 │       containers:
  22 │       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 └         - --namespace=kube-system
  ..   
────────────────────────────────────────



calico_policy1_25.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_policy1_25.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 5473
  11 │     protocol: TCP
  12 │     targetPort: calico-typha
  13 │     name: calico-typha
  14 │   selector:
  15 └     k8s-app: calico-typha
────────────────────────────────────────



calico_policy_16.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 99, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-typha' of 'deployment' 'calico-typha' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'calico-typha' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 calico_policy_16.yaml:9-75
────────────────────────────────────────
   9 ┌   revisionHistoryLimit: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-typha
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: calico-typha
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-typha' of Deployment 'calico-typha' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_policy_16.yaml:9-75
────────────────────────────────────────
   9 ┌   revisionHistoryLimit: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-typha
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: calico-typha
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-typha" of deployment "calico-typha" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-typha in deployment calico-typha (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calico_policy_16.yaml:31-75
────────────────────────────────────────
  31 ┌       - image: quay.io/calico/typha:v3.13.4
  32 │         name: calico-typha
  33 │         ports:
  34 │         - containerPort: 5473
  35 │           name: calico-typha
  36 │           protocol: TCP
  37 │         env:
  38 │         - name: FELIX_INTERFACEPREFIX
  39 └           value: eni
  ..   
────────────────────────────────────────



calico_policy_21.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'autoscaler' of 'deployment' 'calico-typha-horizontal-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'autoscaler' of Deployment 'calico-typha-horizontal-autoscaler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-typha-horizontal-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_policy_21.yaml:9-36
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: calico-typha-autoscaler
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: calico-typha-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "autoscaler" of deployment "calico-typha-horizontal-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-typha-horizontal-autoscaler in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_policy_21.yaml:22-35
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 │         - --namespace=kube-system
  27 │         - --configmap=calico-typha-horizontal-autoscaler
  28 │         - --target=deployment/calico-typha
  29 │         - --logtostderr=true
  30 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-typha-horizontal-autoscaler in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calico_policy_21.yaml:18-36
────────────────────────────────────────
  18 ┌       priorityClassName: system-cluster-critical
  19 │       nodeSelector:
  20 │         beta.kubernetes.io/os: linux
  21 │       containers:
  22 │       - image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1
  23 │         name: autoscaler
  24 │         command:
  25 │         - /cluster-proportional-autoscaler
  26 └         - --namespace=kube-system
  ..   
────────────────────────────────────────



calico_policy_25.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'calico-typha' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 calico_policy_25.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 5473
  11 │     protocol: TCP
  12 │     targetPort: calico-typha
  13 │     name: calico-typha
  14 │   selector:
  15 └     k8s-app: calico-typha
────────────────────────────────────────



caller-service.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'caller-service' of Deployment 'caller-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'caller-service' of 'deployment' 'caller-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "caller-service" of deployment "caller-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment caller-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 caller-service.yaml:4
────────────────────────────────────────
   4 [   name: caller-service
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment caller-service in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container caller-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment caller-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 caller-service.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container caller-service in deployment caller-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 caller-service.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



caller-service1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'caller-service' of Deployment 'caller-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'caller-service' of 'deployment' 'caller-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'caller-service' of Deployment 'caller-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "caller-service" of deployment "caller-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment caller-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 caller-service1.yaml:4
────────────────────────────────────────
   4 [   name: caller-service
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment caller-service in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container caller-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment caller-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 caller-service1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container caller-service in deployment caller-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 caller-service1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caller-service
  17 │         image: localhost:5000/caller-service
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



calrissian-install.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'log-reader-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 calrissian-install.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   verbs:
  11 │   - create
  12 │   - patch
  13 │   - delete
  14 │   - list
  15 └   - watch
────────────────────────────────────────



calrissian-install_7.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stage-input-data' of 'job' 'stage-input-data' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stage-input-data' of Job 'stage-input-data' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stage-input-data" of job "stage-input-data" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job stage-input-data in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 calrissian-install_7.yaml:4
────────────────────────────────────────
   4 [   name: stage-input-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job stage-input-data in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calrissian-install_7.yaml:8-25
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stage-input-data in job stage-input-data (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calrissian-install_7.yaml:9-20
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - cp input-data/* /calrissian/input-data/
  ..   
────────────────────────────────────────



calrissian-install_8.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calrissian' of Job 'calrissian-revsort-array' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calrissian' of Job 'calrissian-revsort-array' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calrissian' of 'job' 'calrissian-revsort-array' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calrissian' of Job 'calrissian-revsort-array' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calrissian' of Job 'calrissian-revsort-array' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'calrissian' of Job 'calrissian-revsort-array' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calrissian' of Job 'calrissian-revsort-array' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calrissian' of Job 'calrissian-revsort-array' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calrissian' of Job 'calrissian-revsort-array' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calrissian' of Job 'calrissian-revsort-array' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calrissian' of Job 'calrissian-revsort-array' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calrissian' of Job 'calrissian-revsort-array' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calrissian" of job "calrissian-revsort-array" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job calrissian-revsort-array in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 calrissian-install_8.yaml:4
────────────────────────────────────────
   4 [   name: calrissian-revsort-array
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job calrissian-revsort-array in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calrissian-install_8.yaml:8-58
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calrissian in job calrissian-revsort-array (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calrissian-install_8.yaml:9-46
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────



calrissian-install_9.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'view-results' of Job 'view-results' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'view-results' of Job 'view-results' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'view-results' of 'job' 'view-results' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'view-results' of Job 'view-results' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'view-results' of Job 'view-results' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'view-results' of Job 'view-results' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'view-results' of Job 'view-results' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'view-results' of Job 'view-results' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'view-results' of Job 'view-results' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'view-results' of Job 'view-results' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'view-results' of Job 'view-results' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'view-results' of Job 'view-results' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "view-results" of job "view-results" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job view-results in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 calrissian-install_9.yaml:4
────────────────────────────────────────
   4 [   name: view-results
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job view-results in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calrissian-install_9.yaml:8-26
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container view-results in job view-results (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calrissian-install_9.yaml:9-21
────────────────────────────────────────
   9 ┌       - name: view-results
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - sh
  16 │         - -c
  17 └         - more /calrissian/output-data/* | cat
  ..   
────────────────────────────────────────



calrissian-val_2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stage-input-data' of 'job' 'stage-input-data' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stage-input-data' of Job 'stage-input-data' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stage-input-data' of Job 'stage-input-data' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stage-input-data" of job "stage-input-data" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job stage-input-data in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 calrissian-val_2.yaml:4
────────────────────────────────────────
   4 [   name: stage-input-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job stage-input-data in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calrissian-val_2.yaml:8-39
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stage-input-data in job stage-input-data (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calrissian-val_2.yaml:9-28
────────────────────────────────────────
   9 ┌       - name: stage-input-data
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - /bin/bash
  16 │         - -c
  17 └         args:
  ..   
────────────────────────────────────────



calrissian-val_3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calrissian' of Job 'calrissian-water-body' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calrissian' of Job 'calrissian-water-body' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calrissian' of 'job' 'calrissian-water-body' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calrissian' of Job 'calrissian-water-body' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calrissian' of Job 'calrissian-water-body' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'calrissian' of Job 'calrissian-water-body' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calrissian' of Job 'calrissian-water-body' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calrissian' of Job 'calrissian-water-body' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calrissian' of Job 'calrissian-water-body' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calrissian' of Job 'calrissian-water-body' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calrissian' of Job 'calrissian-water-body' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calrissian' of Job 'calrissian-water-body' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calrissian" of job "calrissian-water-body" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job calrissian-water-body in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 calrissian-val_3.yaml:4
────────────────────────────────────────
   4 [   name: calrissian-water-body
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job calrissian-water-body in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 calrissian-val_3.yaml:8-54
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calrissian in job calrissian-water-body (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 calrissian-val_3.yaml:9-45
────────────────────────────────────────
   9 ┌       - name: calrissian
  10 │         image: dukegcb/calrissian:latest
  11 │         securityContext:
  12 │           runAsUser: 1000
  13 │           runAsGroup: 1000
  14 │         command:
  15 │         - calrissian
  16 │         args:
  17 └         - --debug
  ..   
────────────────────────────────────────



camel-amqp-quarkus.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'camel-amqp-quarkus' of 'deployment' 'camel-amqp-quarkus' in 'keda-demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "camel-amqp-quarkus" of deployment "camel-amqp-quarkus" in "keda-demo" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container camel-amqp-quarkus in keda-demo namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment camel-amqp-quarkus in keda-demo namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 camel-amqp-quarkus.yaml:21-31
────────────────────────────────────────
  21 ┌       containers:
  22 │         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 └           image: monodot/camel-amqp-quarkus:latest
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container camel-amqp-quarkus in deployment camel-amqp-quarkus (namespace: keda-demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 camel-amqp-quarkus.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────



camel-amqp-quarkus1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'camel-amqp-quarkus' of 'deployment' 'camel-amqp-quarkus' in 'keda-demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'camel-amqp-quarkus' of Deployment 'camel-amqp-quarkus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "camel-amqp-quarkus" of deployment "camel-amqp-quarkus" in "keda-demo" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container camel-amqp-quarkus in keda-demo namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment camel-amqp-quarkus in keda-demo namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:21-31
────────────────────────────────────────
  21 ┌       containers:
  22 │         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 └           image: monodot/camel-amqp-quarkus:latest
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container camel-amqp-quarkus in deployment camel-amqp-quarkus (namespace: keda-demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 camel-amqp-quarkus1.yaml:22-31
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: QUARKUS_QPID_JMS_URL
  24 │               value: amqp://artemis.keda-demo.svc.cluster.local:61616
  25 │             - name: QUARKUS_QPID_JMS_USERNAME
  26 │               value: quarkus
  27 │             - name: QUARKUS_QPID_JMS_PASSWORD
  28 │               value: quarkus
  29 │           image: monodot/camel-amqp-quarkus:latest
  30 │           name: camel-amqp-quarkus
  31 └           resources: {}
────────────────────────────────────────



camera-service_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'camera-data-app' of Deployment 'psa-camera-data-server-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'camera-data-app' of Deployment 'psa-camera-data-server-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'camera-data-app' of 'deployment' 'psa-camera-data-server-app' in 'cctns-new' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'camera-data-app' of Deployment 'psa-camera-data-server-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'camera-data-app' of Deployment 'psa-camera-data-server-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'camera-data-app' of Deployment 'psa-camera-data-server-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'camera-data-app' of Deployment 'psa-camera-data-server-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'camera-data-app' of Deployment 'psa-camera-data-server-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'psa-camera-data-server-app' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 camera-service_1.yaml:9-87
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: camera-data-app
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: camera-data-app
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "camera-data-app" of deployment "psa-camera-data-server-app" in "cctns-new" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container psa-camera-data-server-app in cctns-new namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment psa-camera-data-server-app in cctns-new namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 camera-service_1.yaml:18-87
────────────────────────────────────────
  18 ┌       containers:
  19 │       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container camera-data-app in deployment psa-camera-data-server-app (namespace: cctns-new) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 camera-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: camera_DATA_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────



campgrounds_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'campgrounds' of Deployment 'campgrounds' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'campgrounds' of Deployment 'campgrounds' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'campgrounds' of 'deployment' 'campgrounds' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'campgrounds' of Deployment 'campgrounds' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'campgrounds' of Deployment 'campgrounds' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'campgrounds' of Deployment 'campgrounds' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'campgrounds' of Deployment 'campgrounds' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'campgrounds' of Deployment 'campgrounds' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'campgrounds' of Deployment 'campgrounds' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'campgrounds' of Deployment 'campgrounds' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'campgrounds' of Deployment 'campgrounds' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'campgrounds' of Deployment 'campgrounds' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "campgrounds" of deployment "campgrounds" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment campgrounds in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 campgrounds_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: campgrounds
   5 │   labels:
   6 └     app: campgrounds
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container campgrounds in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment campgrounds in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 campgrounds_1.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 └           value: campgrounds_user
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container campgrounds in deployment campgrounds (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 campgrounds_1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: campgrounds
  19 │         image: ibaiborodine/campsite-booking-go:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: CAMPGROUNDS_DB
  23 │           value: campgrounds
  24 │         - name: CAMPGROUNDS_USER
  25 │           value: campgrounds_user
  26 └         - name: CAMPGROUNDS_PASSWORD
  ..   
────────────────────────────────────────



camunda-config.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'camunda-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"CAMUNDA_DB_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'camunda-config' in 'default' namespace stores secrets in key(s) or value(s) '{"CAMUNDA_DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



camunda-config1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'camunda-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"CAMUNDA_DB_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'camunda-config' in 'default' namespace stores secrets in key(s) or value(s) '{"CAMUNDA_DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



canal-etcd.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 canal-etcd.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



canal-etcd_14.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'calico-kube-controllers' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 canal-etcd_14.yaml:9-83
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 canal-etcd_14.yaml:9-83
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal-etcd_14.yaml:22-83
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canal-etcd_14.yaml:35-78
────────────────────────────────────────
  35 ┌       - name: calico-kube-controllers
  36 │         image: docker.io/calico/kube-controllers:v3.25.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         env:
  39 │         - name: ETCD_ENDPOINTS
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               name: canal-config
  43 └               key: etcd_endpoints
  ..   
────────────────────────────────────────



canal-etcd_15.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'configure-flannel' of Job 'configure-canal' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'configure-flannel' of Job 'configure-canal' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'configure-flannel' of 'job' 'configure-canal' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Job 'configure-canal' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 canal-etcd_15.yaml:9-43
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: configure-canal
  12 │     spec:
  13 │       nodeSelector:
  14 │         kubernetes.io/os: linux
  15 │       hostNetwork: true
  16 │       restartPolicy: OnFailure
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'configure-flannel' of Job 'configure-canal' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'configure-flannel' of Job 'configure-canal' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'configure-flannel' of Job 'configure-canal' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'configure-flannel' of Job 'configure-canal' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'configure-flannel' of Job 'configure-canal' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'configure-flannel' of Job 'configure-canal' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'configure-flannel' of Job 'configure-canal' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'configure-flannel' of Job 'configure-canal' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Job 'configure-canal' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 canal-etcd_15.yaml:9-43
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: configure-canal
  12 │     spec:
  13 │       nodeSelector:
  14 │         kubernetes.io/os: linux
  15 │       hostNetwork: true
  16 │       restartPolicy: OnFailure
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "configure-flannel" of job "configure-canal" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configure-canal in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job configure-canal in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal-etcd_15.yaml:13-43
────────────────────────────────────────
  13 ┌       nodeSelector:
  14 │         kubernetes.io/os: linux
  15 │       hostNetwork: true
  16 │       restartPolicy: OnFailure
  17 │       containers:
  18 │       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 └         - etcdctl
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container configure-flannel in job configure-canal (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canal-etcd_15.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: configure-flannel
  19 │         image: quay.io/coreos/etcd:v3.5.1
  20 │         command:
  21 │         - etcdctl
  22 │         - --no-sync
  23 │         - set
  24 │         - /coreos.com/network/config
  25 │         - '{ "Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"} }'
  26 └         env:
  ..   
────────────────────────────────────────



canal-etcd_4.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'canal-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"etcd_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



canal1.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 canal1.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



canal1_32.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 canal1_32.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal1_32.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canal1_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



canal2.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 canal2.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



canal2_28.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 canal2_28.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal2_28.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canal2_28.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.25.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



canal3.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 canal3.yaml:9-12
────────────────────────────────────────
   9 ┌   maxUnavailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: calico-kube-controllers
────────────────────────────────────────



canal3_32.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calico-kube-controllers' of 'deployment' 'calico-kube-controllers' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calico-kube-controllers' of Deployment 'calico-kube-controllers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'calico-kube-controllers' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 canal3_32.yaml:9-56
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: calico-kube-controllers
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       name: calico-kube-controllers
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calico-kube-controllers" of deployment "calico-kube-controllers" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calico-kube-controllers in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calico-kube-controllers in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canal3_32.yaml:22-56
────────────────────────────────────────
  22 ┌       nodeSelector:
  23 │         kubernetes.io/os: linux
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       - key: node-role.kubernetes.io/master
  28 │         effect: NoSchedule
  29 │       - key: node-role.kubernetes.io/control-plane
  30 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calico-kube-controllers in deployment calico-kube-controllers (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canal3_32.yaml:34-56
────────────────────────────────────────
  34 ┌       - name: calico-kube-controllers
  35 │         image: docker.io/calico/kube-controllers:v3.27.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         env:
  38 │         - name: ENABLED_CONTROLLERS
  39 │           value: node
  40 │         - name: DATASTORE_TYPE
  41 │           value: kubernetes
  42 └         livenessProbe:
  ..   
────────────────────────────────────────



canary-1-dep.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicedemo' of 'deployment' 'canary-1-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicedemo" of deployment "canary-1-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-1-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-1-dep.yaml:4
────────────────────────────────────────
   4 [   name: canary-1-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment canary-1-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-1-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-1-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-1-dep.yaml:18-87
────────────────────────────────────────
  18 ┌       nodeSelector:
  19 │         kubernetes.io/os: linux
  20 │       containers:
  21 │       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicedemo in deployment canary-1-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-1-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────



canary-1-dep1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicedemo' of 'deployment' 'canary-1-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicedemo' of Deployment 'canary-1-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicedemo" of deployment "canary-1-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-1-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-1-dep1.yaml:4
────────────────────────────────────────
   4 [   name: canary-1-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment canary-1-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-1-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-1-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-1-dep1.yaml:18-87
────────────────────────────────────────
  18 ┌       nodeSelector:
  19 │         kubernetes.io/os: linux
  20 │       containers:
  21 │       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicedemo in deployment canary-1-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-1-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env: 
  28 │         - name: IMAGE_COLOR
  29 └           value: yellow            
  ..   
────────────────────────────────────────



canary-2-dep.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicedemo' of 'deployment' 'canary-2-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicedemo" of deployment "canary-2-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-2-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-2-dep.yaml:4
────────────────────────────────────────
   4 [   name: canary-2-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment canary-2-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-2-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-2-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-2-dep.yaml:18-87
────────────────────────────────────────
  18 ┌       nodeSelector:
  19 │         kubernetes.io/os: linux
  20 │       containers:
  21 │       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicedemo in deployment canary-2-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-2-dep.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────



canary-2-dep1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicedemo' of 'deployment' 'canary-2-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicedemo' of Deployment 'canary-2-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicedemo" of deployment "canary-2-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-2-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-2-dep1.yaml:4
────────────────────────────────────────
   4 [   name: canary-2-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment canary-2-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-2-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-2-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-2-dep1.yaml:18-87
────────────────────────────────────────
  18 ┌       nodeSelector:
  19 │         kubernetes.io/os: linux
  20 │       containers:
  21 │       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicedemo in deployment canary-2-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-2-dep1.yaml:21-76
────────────────────────────────────────
  21 ┌       - name: servicedemo
  22 │         image: scubakiz/servicedemo:1.0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           protocol: TCP
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: IMAGE_COLOR
  29 └           value: red                
  ..   
────────────────────────────────────────



canary-app.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'new-container' of Deployment 'new-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'new-container' of Deployment 'new-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'new-container' of 'deployment' 'new-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'new-container' of Deployment 'new-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'new-container' of Deployment 'new-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'new-container' of Deployment 'new-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'new-container' of Deployment 'new-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'new-container' of Deployment 'new-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'new-container' of Deployment 'new-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'new-container' of Deployment 'new-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'new-container' of Deployment 'new-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "new-container" of deployment "new-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment new-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-app.yaml:4-6
────────────────────────────────────────
   4 ┌   name: new-deploy
   5 │   labels:
   6 └     type: webapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container new-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-app.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment new-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-app.yaml:14-16
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: new-container
  16 └           image: nginx:stable-perl
────────────────────────────────────────



canary-app1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mywebapp' of Deployment 'myapp-canary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mywebapp' of Deployment 'myapp-canary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mywebapp' of 'deployment' 'myapp-canary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mywebapp' of Deployment 'myapp-canary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mywebapp' of Deployment 'myapp-canary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mywebapp' of Deployment 'myapp-canary' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mywebapp' of Deployment 'myapp-canary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mywebapp' of Deployment 'myapp-canary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mywebapp' of Deployment 'myapp-canary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mywebapp' of Deployment 'myapp-canary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mywebapp' of Deployment 'myapp-canary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mywebapp' of Deployment 'myapp-canary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mywebapp" of deployment "myapp-canary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp-canary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-app1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myapp-canary
   5 │   labels:
   6 └     type: webapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-canary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-app1.yaml:15-16
────────────────────────────────────────
  15 ┌         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp-canary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-app1.yaml:14-16
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: mywebapp
  16 └           image: nginx:latest
────────────────────────────────────────



canary-blue-dep.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'canary-blue' of Deployment 'canary-blue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'canary-blue' of Deployment 'canary-blue' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'canary-blue' of 'deployment' 'canary-blue' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'canary-blue' of Deployment 'canary-blue' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'canary-blue' of Deployment 'canary-blue' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'canary-blue' of Deployment 'canary-blue' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'canary-blue' of Deployment 'canary-blue' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'canary-blue' of Deployment 'canary-blue' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'canary-blue' of Deployment 'canary-blue' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'canary-blue' of Deployment 'canary-blue' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'canary-blue' of Deployment 'canary-blue' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'canary-blue' of Deployment 'canary-blue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "canary-blue" of deployment "canary-blue" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-blue in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-blue-dep.yaml:4-5
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 └   name: canary-blue
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-blue in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-blue-dep.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-blue in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-blue-dep.yaml:18-25
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: canary-blue
  20 │         image: blueapp
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 └           protocol: TCP
────────────────────────────────────────



canary-deploy-new.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'go-app' of Deployment 'canary-deploy-new' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'go-app' of Deployment 'canary-deploy-new' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'go-app' of 'deployment' 'canary-deploy-new' in 'canary' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'go-app' of Deployment 'canary-deploy-new' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'go-app' of Deployment 'canary-deploy-new' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'go-app' of Deployment 'canary-deploy-new' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'go-app' of Deployment 'canary-deploy-new' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'go-app' of Deployment 'canary-deploy-new' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'go-app' of Deployment 'canary-deploy-new' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'go-app' of Deployment 'canary-deploy-new' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'go-app' of Deployment 'canary-deploy-new' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "go-app" of deployment "canary-deploy-new" in "canary" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-deploy-new in canary namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-deploy-new in canary namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy-new.yaml:24-27
────────────────────────────────────────
  24 ┌       containers:
  25 │       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container go-app in deployment canary-deploy-new (namespace: canary) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-deploy-new.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.1
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────



canary-deploy.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'canary-app' of Deployment 'canary-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'canary-app' of 'deployment' 'canary-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'canary-app' of Deployment 'canary-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "canary-app" of deployment "canary-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-deploy.yaml:4
────────────────────────────────────────
   4 [   name: canary-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment canary-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container canary-app in deployment canary-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-deploy.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────



canary-deploy1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'canary-app' of Deployment 'canary-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'canary-app' of 'deployment' 'canary-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'canary-app' of Deployment 'canary-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "canary-app" of deployment "canary-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-deploy1.yaml:4
────────────────────────────────────────
   4 [   name: canary-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment canary-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container canary-app in deployment canary-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-deploy1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────



canary-deploy2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'go-app' of Deployment 'canary-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'go-app' of Deployment 'canary-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'go-app' of 'deployment' 'canary-deploy' in 'canary' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'go-app' of Deployment 'canary-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'go-app' of Deployment 'canary-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'go-app' of Deployment 'canary-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'go-app' of Deployment 'canary-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'go-app' of Deployment 'canary-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'go-app' of Deployment 'canary-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'go-app' of Deployment 'canary-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'go-app' of Deployment 'canary-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "go-app" of deployment "canary-deploy" in "canary" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-deploy in canary namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-deploy in canary namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy2.yaml:24-27
────────────────────────────────────────
  24 ┌       containers:
  25 │       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container go-app in deployment canary-deploy (namespace: canary) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-deploy2.yaml:25-27
────────────────────────────────────────
  25 ┌       - image: hakanyedibela/go-app:1.0.0
  26 │         name: go-app
  27 └         resources: {}
────────────────────────────────────────



canary-deploy3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'canary-app' of Deployment 'canary-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'canary-app' of 'deployment' 'canary-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'canary-app' of Deployment 'canary-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'canary-app' of Deployment 'canary-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "canary-app" of deployment "canary-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-deploy3.yaml:4
────────────────────────────────────────
   4 [   name: canary-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment canary-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deploy3.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container canary-app in deployment canary-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-deploy3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: canary-app
  17 │         image: anvesh35/echo-pod-name
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────



canary-deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gowebapp' of Deployment 'canary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gowebapp' of Deployment 'canary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gowebapp' of 'deployment' 'canary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gowebapp' of Deployment 'canary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gowebapp' of Deployment 'canary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gowebapp' of Deployment 'canary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gowebapp' of Deployment 'canary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gowebapp' of Deployment 'canary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gowebapp' of Deployment 'canary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gowebapp' of Deployment 'canary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gowebapp' of Deployment 'canary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gowebapp" of deployment "canary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-deployment.yaml:4-8
────────────────────────────────────────
   4 ┌   name: canary
   5 │   labels:
   6 │     app: gowebapp
   7 │     tier: frontend
   8 └     track: canary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deployment.yaml:24-30
────────────────────────────────────────
  24 ┌       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deployment.yaml:23-30
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: gowebapp
  25 │         image: gowebapp:v1.1
  26 │         env:
  27 │         - name: DB_PASSWORD
  28 │           value: mypassword
  29 │         ports:
  30 └         - containerPort: 8080
────────────────────────────────────────



canary-deployment1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-canary' of Deployment 'canary-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-canary' of Deployment 'canary-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-canary' of 'deployment' 'canary-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-canary' of Deployment 'canary-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-canary' of Deployment 'canary-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-canary' of Deployment 'canary-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-canary' of Deployment 'canary-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-canary' of Deployment 'canary-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-canary' of Deployment 'canary-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-canary' of Deployment 'canary-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-canary' of Deployment 'canary-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-canary" of deployment "canary-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: canary-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment canary-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 │             - containerPort: 80
  20 │       imagePullSecrets:
  21 └         - name: regcred
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx-canary in deployment canary-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx-canary
  17 │           image: docker.io/alicek106/rr-test:echo-hostname
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────



canary-deployment2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'canary-container' of Deployment 'canary-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'canary-container' of Deployment 'canary-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'canary-container' of 'deployment' 'canary-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'canary-container' of Deployment 'canary-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'canary-container' of Deployment 'canary-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'canary-container' of Deployment 'canary-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'canary-container' of Deployment 'canary-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'canary-container' of Deployment 'canary-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'canary-container' of Deployment 'canary-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'canary-container' of Deployment 'canary-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'canary-container' of Deployment 'canary-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "canary-container" of deployment "canary-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-deployment2.yaml:4-5
────────────────────────────────────────
   4 ┌   name: canary-deployment
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-deployment2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container canary-container in deployment canary-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: canary-container
  18 │           image: argoproj/rollouts-demo:blue
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────



canary-echo-server-deployment.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-server' of 'deployment' 'canary-echo-server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-server' of Deployment 'canary-echo-server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-server" of deployment "canary-echo-server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-echo-server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-echo-server-deployment.yaml:4
────────────────────────────────────────
   4 [   name: canary-echo-server-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment canary-echo-server-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-echo-server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-echo-server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-echo-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-server in deployment canary-echo-server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 canary-echo-server-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: echo-server
  17 │           image: ealen/echo-server
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────



canary-red-dep.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'canary-red' of Deployment 'canary-red' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'canary-red' of Deployment 'canary-red' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'canary-red' of 'deployment' 'canary-red' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'canary-red' of Deployment 'canary-red' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'canary-red' of Deployment 'canary-red' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'canary-red' of Deployment 'canary-red' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'canary-red' of Deployment 'canary-red' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'canary-red' of Deployment 'canary-red' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'canary-red' of Deployment 'canary-red' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'canary-red' of Deployment 'canary-red' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'canary-red' of Deployment 'canary-red' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'canary-red' of Deployment 'canary-red' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "canary-red" of deployment "canary-red" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment canary-red in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 canary-red-dep.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: canary-red
   7 └   name: canary-red
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container canary-red in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-red-dep.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment canary-red in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 canary-red-dep.yaml:20-24
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: redapp
  22 │         imagePullPolicy: Never
  23 │         name: canary-red
  24 └         resources: {}
────────────────────────────────────────


