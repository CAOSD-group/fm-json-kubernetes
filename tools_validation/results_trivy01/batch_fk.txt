
Report Summary

┌───────────────────────────────────────────────┬────────────┬───────────────────┐
│                    Target                     │    Type    │ Misconfigurations │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ MySQL_Secret3.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ MySQL_Service2.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ MysqlConfigMap.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ MysqlConfigMap_1.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ MysqlDeploy.yaml                              │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ MysqlPvc1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ MysqlSecret.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ MysqlService.yaml                             │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ MysqlStorageClass.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace-1password.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace-cilium-secrets.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace-k8s-gateway.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace-miniflux.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace-shiori.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace-tailscale.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace.demo-app.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace1095.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace1096.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace1096_1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myVolume-v3.yaml                              │ kubernetes │        52         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ my_job.yaml                                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ my_pod_example.yaml                           │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ my_pod_example_student.yaml                   │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ my_pod_solution_teacher.yaml                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ my_sql_DB.yaml                                │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysq_1.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysq_2.yaml                                   │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql55_1.yaml                                │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql56.yaml                                  │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql57.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql57_1.yaml                                │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql58.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql58_1.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql5_1.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql6.yaml                                   │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql60.yaml                                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql60_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql61.yaml                                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql61_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql62.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql64.yaml                                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql65.yaml                                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql65_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql66.yaml                                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql66_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql67.yaml                                  │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql67_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql68.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql68_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql6_1.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql7.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql74.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql74_1.yaml                                │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql75.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql75_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql76.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql77.yaml                                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql77_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql78.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql78_1.yaml                                │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql78_2.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql7_1.yaml                                 │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql7_2.yaml                                 │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql8.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql80.yaml                                  │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql80_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql81.yaml                                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql81_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql82.yaml                                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql83.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql84.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql85.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql86.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql86_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql87.yaml                                  │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql87_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql88.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql88_1.yaml                                │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql89.yaml                                  │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql8_1.yaml                                 │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql9.yaml                                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql90.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql90_1.yaml                                │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql91.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql91_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql92.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql93.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql94.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql94_1.yaml                                │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql97.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql97_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql97_2.yaml                                │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql98.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql98_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql99.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlYaml.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlYaml1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlYaml1_1.yaml                             │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlYaml1_2.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlYaml_1.yaml                              │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlYaml_2.yaml                              │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_1.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_backup_cronjob.yaml                     │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_backup_cronjob1.yaml                    │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_backup_cronjob2.yaml                    │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_configmap.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_configmap1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_configmap2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_configmap3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_configmap4.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_dep.yaml                                │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_dep1.yaml                               │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy1.yaml                            │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy1_1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy1_2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy1_3.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy1_4.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy1_5.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy_2.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy_3.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy_4.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy_5.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy_and_serve.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy_and_serve_1.yaml                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deploy_and_serve_2.yaml                 │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployement-service.yaml                │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployement-service1.yaml               │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployement-service1_1.yaml             │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployement-service_1.yaml              │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment10.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment11.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment12.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment13.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment15.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment16.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment2.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment2_1.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment2_2.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment2_3.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment3.yaml                        │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment3_1.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment4.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment4_1.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment4_2.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment4_3.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment5.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment5_1.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment8.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment8_1.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment8_2.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment8_3.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment9.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment_1.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment_2.yaml                       │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_deployment_3.yaml                       │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_editor_role.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_editor_role1.yaml                       │ kubernetes │         9         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_job-dataseed.yaml                       │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_job-dataseed1.yaml                      │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_job-dataseed2.yaml                      │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_password.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_password1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_password1_1.yaml                        │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_password2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_password2_1.yaml                        │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_password3.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_password3_1.yaml                        │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_password_1.yaml                         │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pv.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pv1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pv2.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pv3.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pv4.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pvc.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pvc1.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pvc2.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pvc3.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_pvc4.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_query.yaml                              │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_query_1.yaml                            │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret-ConfigMap.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret-ConfigMap1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret-ConfigMap1_1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret-ConfigMap_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret10.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret11.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret4.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret5.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret6.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret7.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret8.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_secret9.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service.yaml                            │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service1.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service10.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service3.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service4.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service5.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service6.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service7.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service8.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service9.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service_h.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_service_lb.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_statfulset3.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_statfulset3_1.yaml                      │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_viewer_role.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysql_viewer_role1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqldb-service.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqldb-service1.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqldb.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqldb1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqldb1_1.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqldb1_2.yaml                               │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqldb_1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqldb_2.yaml                                │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlpod.yaml                                 │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlpv.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlpvc.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlpvc_1.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysqlstatefulset.yaml                         │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysrvc.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myst-pvc.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mystorageclass.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mysvc.yaml                                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myswitzerland.yaml                            │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myswitzerland_1.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myvd-book.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywatchere_editor_role.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywatchere_viewer_role.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-cm-pod.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-cm-pod1.yaml                            │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-pod-exam2.yaml                          │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-pod-svc.yaml                            │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-pod-svc_1.yaml                          │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-pod-svc_2.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-pod.yaml                                │ kubernetes │        35         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-pod1.yaml                               │ kubernetes │        35         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-rq1.yaml                                │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-rq11.yaml                               │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-rq2.yaml                                │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-rq21.yaml                               │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb-static-pod.yaml                         │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb.yaml                                    │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb1-pod.yaml                               │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb1-svc.yaml                               │ kubernetes │         3         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb1_1.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb1_2.yaml                                 │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb2-pod.yaml                               │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb2.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb2_1.yaml                                 │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb2_2.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb3.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb3_1.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb3_2.yaml                                 │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb4.yaml                                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ myweb_1.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebdeploy.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebpdb.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebserver-test.yaml                         │ kubernetes │        22         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebserver.yaml                              │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebserver_1.yaml                            │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebsite.yaml                                │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebsite1.yaml                               │ kubernetes │        22         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebsite2.yaml                               │ kubernetes │        22         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebsite2_1.yaml                             │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebsite2_2.yaml                             │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywebsite_1.yaml                              │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywordpress-service.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ mywordpress-service1.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-claim0-persistentvolumeclaim.yaml         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment1.yaml                          │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment2.yaml                          │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment_2.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment_3.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment_4.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment_5.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment_6.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment_7.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment_8.yaml                         │ kubernetes │        32         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-deployment_9.yaml                         │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-namespace.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-pvc.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-service.yaml                              │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n-service1.yaml                             │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n2.yaml                                     │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n2_1.yaml                                   │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n2_2.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n3.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n3_1.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n3_2.yaml                                   │ kubernetes │        22         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ n8n3_3.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-ingress.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-ingress1.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-ingress1_1.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-ingress_1.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-rcnn-model-deployment.yaml             │ kubernetes │        10         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-rcnn-model-deployment1.yaml            │ kubernetes │        10         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-rcnn-model-deployment1_1.yaml          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-rcnn-model-deployment1_2.yaml          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-rcnn-model-deployment_1.yaml           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-rcnn-model-deployment_2.yaml           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-22-spp-model-deployment.yaml      │ kubernetes │        10         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-22-spp-model-deployment1.yaml     │ kubernetes │        10         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-22-spp-model-deployment1_1.yaml   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-22-spp-model-deployment1_2.yaml   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-22-spp-model-deployment_1.yaml    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-22-spp-model-deployment_2.yaml    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-27-spp-model-deployment.yaml      │ kubernetes │        10         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-27-spp-model-deployment1.yaml     │ kubernetes │        10         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-27-spp-model-deployment1_1.yaml   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-27-spp-model-deployment1_2.yaml   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-27-spp-model-deployment_1.yaml    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-27-spp-model-deployment_2.yaml    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-model-deployment.yaml             │ kubernetes │        10         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-model-deployment1.yaml            │ kubernetes │        10         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-model-deployment1_1.yaml          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-model-deployment1_2.yaml          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-model-deployment_1.yaml           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nachet-swin-model-deployment_2.yaml           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nacos_component-render_manifest.golden.yaml   │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nacos_component-render_manifest.golden_1.yaml │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nagios-config-pvc.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nagios-data-pvc.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nagios.yaml                                   │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ nagp-ms-api-deployment.yaml                   │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ name-host-ingress.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ name-ing.yaml                                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ name-ing1.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ name-space.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ name-space1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ named_port.yaml                               │ kubernetes │        21         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namenode-pv.yaml                              │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namenode-service.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namenode-service_1.yaml                       │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namenode-statefulset.yaml                     │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namenode-storageclass.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace10.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace11.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace3.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace4.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace5.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace6.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace7.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace8.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepace9.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepsace.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepsace_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepsace_2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namepsace_3.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namesace-definition.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namesace-definition1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-0.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-01.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-02.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-03.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-04.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-app-demo.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-app-demo_1.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-app-demo_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-argo-events.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-argo.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-authentik.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-basic.yaml                          │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-cattle-system.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-cert-manager.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-compute-quota.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-compute-quota1.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-default.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-defination.yaml                     │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-definiation.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-definiation1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-definition.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-definition1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-definition2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-demonstrator-app.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev10.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev11.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev2.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev3.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev4.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev5.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev6.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev7.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev7_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev7_2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev8.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-dev9.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-development.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-example.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-gatus.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-giropops.yaml                       │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-giropops1.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-giropops2.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-giropops3.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-gitea.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-grafana.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-homepage.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-inferred-operator-instance-2.yaml   │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-inferred-operator.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-inferred-operator_1.yaml            │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-inferred-operator_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-inferred-operator_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_10.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_11.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_12.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_13.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_14.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_15.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_16.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_17.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_18.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_19.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_20.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_21.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_22.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_23.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_24.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_25.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_26.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_27.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_28.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_29.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_30.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_31.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_32.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_33.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_34.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_35.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_37.yaml                    │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_38.yaml                    │ kubernetes │        10         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_39.yaml                    │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_43.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_44.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_45.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_46.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_47.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_48.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_49.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_5.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_6.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_7.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_8.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install1_9.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_10.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_11.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_12.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_13.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_14.yaml                    │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_15.yaml                    │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_5.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_6.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_7.yaml                     │ kubernetes │         3         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_8.yaml                     │ kubernetes │         4         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install3_9.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_10.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_11.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_12.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_13.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_14.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_15.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_16.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_17.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_18.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_19.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_20.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_21.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_22.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_23.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_24.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_25.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_26.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_27.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_28.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_29.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_30.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_31.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_32.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_33.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_35.yaml                    │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_36.yaml                    │ kubernetes │        11         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_37.yaml                    │ kubernetes │         9         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_41.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_42.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_43.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_44.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_45.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_46.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_47.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_5.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_6.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_7.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_8.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install4_9.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_10.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_11.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_12.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_13.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_14.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_15.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_5.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_7.yaml                      │ kubernetes │         3         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_8.yaml                      │ kubernetes │         4         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-install_9.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-jenkins.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-jupyter-project.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-kube-ops.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-kubernetes-dashboard.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-label-change.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-label-change_1.yaml                 │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-leader-bot.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-limit-range.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-limit-range1.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-limited.yaml                        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-limitranges.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-limitranges_1.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-limitranges_2.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-logging.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-logging1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-longhorn-system.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-maintenance.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-manifest.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-metallb-system.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-mutated.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-nginx.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-osai-kube.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-patch14.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-podinfo.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-prod.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-prod1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-prod2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-prod2_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-prod2_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-prod3.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-producao.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-producao1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-prometheus.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-qa.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-quotas.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-quotas_1.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-quotas_2.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas-double.yaml         │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas-double1.yaml        │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas-double1_1.yaml      │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas-double_1.yaml       │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas-slight.yaml         │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas-slight1.yaml        │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas.yaml                │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas1.yaml               │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas1_1.yaml             │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-resource-quotas_1.yaml              │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-selector-network-policy.yaml        │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-spark-cluster.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-spark-cluster1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-spark-cluster2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-spark-cluster3.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-test.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-test1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-test2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-u1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-user-a.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-user-b.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-viewer.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-volcano-system.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-anonymous-user.yaml            │ kubernetes │         3         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-anonymous-user_1.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-anonymous-user_2.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels11.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels12.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels13.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels14.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels15.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels6.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels7.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels8.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-labels9.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels2.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels3.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels4.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels5.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels6.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels7.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels8.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-with-psa-labels9.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels5.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace-without-psa-labels9.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace.yaml.verified.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace10.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace100.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1000.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1001.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1002.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1003.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1004.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1005.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1006.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1007.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1008.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1009.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace101.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1010.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1011.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1012.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1013.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1014.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1015.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1016.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1017.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1018.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1019.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace102.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1020.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1021.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1022.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1023.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1024.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1025.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1026.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1027.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1028.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1029.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace103.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1030.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1031.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1032.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1033.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1034.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1035.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1036.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1037.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1038.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1039.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace104.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1040.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1041.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1042.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1043.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1044.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1045.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1046.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1047.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1048.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1049.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace105.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1050.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1051.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1052.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1053.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1054.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1055.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1056.yaml                            │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1057.yaml                            │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1058.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1059.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace106.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1060.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1060_1.yaml                          │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1061.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1062.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1063.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1064.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1065.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1066.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1067.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1068.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1069.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace107.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1070.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1071.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1072.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1073.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1074.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1075.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1076.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1077.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1078.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1079.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace108.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1080.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1081.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1082.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1083.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1084.yaml                            │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1085.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1086.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1087.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1088.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1089.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace109.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1090.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1091.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1092.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1093.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1094.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1097.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1098.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1099.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace11.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace110.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1100.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1101.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1102.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1103.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1104.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1105.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1106.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1107.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1109.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace111.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1110.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1111.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1112.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1113.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1114.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1115.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1116.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1117.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1118.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1119.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace112.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1120.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1121.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1122.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1123.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1124.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1125.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1126.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1127.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1128.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1129.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1129_1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1129_2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace113.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1130.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1131.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1132.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1133.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1134.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1135.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1136.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1137.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1138.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1139.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace114.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1140.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1141.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1142.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1143.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1144.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1145.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1146.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1147.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1148.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace1149.yaml                            │ kubernetes │         0         │
└───────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


MySQL_Service2.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 MySQL_Service2.yaml:8-11
────────────────────────────────────────
   8 ┌   ports:
   9 │     - port: 3306
  10 │   selector:
  11 └     app: mysql
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 MySQL_Service2.yaml:8-11
────────────────────────────────────────
   8 ┌   ports:
   9 │     - port: 3306
  10 │   selector:
  11 └     app: mysql
────────────────────────────────────────



MysqlConfigMap.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysqlenv' in 'test' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSWORD", "MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



MysqlConfigMap_1.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysqlenv' in 'production' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSWORD", "MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



MysqlDeploy.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 MysqlDeploy.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: wordPress
   9 │       tier: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: wordPress
  14 └         tier: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 MysqlDeploy.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: wordPress
   9 │       tier: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: wordPress
  14 └         tier: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 MysqlDeploy.yaml:4
────────────────────────────────────────
   4 [   name: mysql-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 MysqlDeploy.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 │               key: mysql-root-password
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 MysqlDeploy.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mysql
  18 │         image: mysql:5.6
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mysql-secret
  24 └               key: mysql-root-password
  ..   
────────────────────────────────────────



MysqlPvc1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 MysqlPvc1.yaml:8-13
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   storageClassName: mysql-sc
  11 │   resources:
  12 │     requests:
  13 └       storage: 5Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 MysqlPvc1.yaml:8-13
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   storageClassName: mysql-sc
  11 │   resources:
  12 │     requests:
  13 └       storage: 5Gi
────────────────────────────────────────



MysqlService.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 MysqlService.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: wordPress
  11 │     tier: mysql
  12 │   ports:
  13 │   - port: 3306
  14 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 MysqlService.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: wordPress
  11 │     tier: mysql
  12 │   ports:
  13 │   - port: 3306
  14 └     targetPort: 3306
────────────────────────────────────────



myVolume-v3.yaml (kubernetes)
=============================
Tests: 149 (SUCCESSES: 97, FAILURES: 52)
Failures: 52 (UNKNOWN: 0, LOW: 33, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myvolumes-container-1' of 'pod' 'myvolumes-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myvolumes-container-2' of 'pod' 'myvolumes-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myvolumes-container-3' of 'pod' 'myvolumes-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myvolumes-container-1' of Pod 'myvolumes-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myvolumes-container-2' of Pod 'myvolumes-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myvolumes-container-3' of Pod 'myvolumes-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myVolume-v3.yaml:6-39
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 └     - mountPath: /demo1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myVolume-v3.yaml:6-39
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 └     - mountPath: /demo1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myvolumes-container-1" of pod "myvolumes-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myvolumes-container-2" of pod "myvolumes-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myvolumes-container-3" of pod "myvolumes-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myvolumes-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myVolume-v3.yaml:4
────────────────────────────────────────
   4 [   name: myvolumes-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myvolumes-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myVolume-v3.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 │     - mountPath: /demo1
  15 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myvolumes-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myVolume-v3.yaml:17-25
────────────────────────────────────────
  17 ┌   - image: alpine
  18 │     imagePullPolicy: IfNotPresent
  19 │     name: myvolumes-container-2
  20 │     
  21 │     command: ['sh', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
  22 │     
  23 │     volumeMounts:
  24 │     - mountPath: /demo2
  25 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myvolumes-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myVolume-v3.yaml:27-35
────────────────────────────────────────
  27 ┌   - image: alpine
  28 │     imagePullPolicy: IfNotPresent
  29 │     name: myvolumes-container-3
  30 │     
  31 │     command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']
  32 │     
  33 │     volumeMounts:
  34 │     - mountPath: /demo3
  35 └       name: demo-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myvolumes-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myVolume-v3.yaml:6-39
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container-1
  10 │     
  11 │     command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
  12 │     
  13 │     volumeMounts:
  14 └     - mountPath: /demo1
  ..   
────────────────────────────────────────



my_job.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-example-job' of Job 'my-example-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-example-job' of Job 'my-example-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-example-job' of 'job' 'my-example-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-example-job' of Job 'my-example-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-example-job' of Job 'my-example-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-example-job' of Job 'my-example-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-example-job' of Job 'my-example-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-example-job' of Job 'my-example-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-example-job' of Job 'my-example-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-example-job' of Job 'my-example-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-example-job' of Job 'my-example-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 my_job.yaml:6-13
────────────────────────────────────────
   6 ┌   ttlSecondsAfterFinished: 100
   7 │   template:
   8 │     spec:
   9 │       containers:
  10 │       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 │         command: ["echo", "hello"]
  13 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 my_job.yaml:6-13
────────────────────────────────────────
   6 ┌   ttlSecondsAfterFinished: 100
   7 │   template:
   8 │     spec:
   9 │       containers:
  10 │       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 │         command: ["echo", "hello"]
  13 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-example-job" of job "my-example-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job my-example-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 my_job.yaml:4
────────────────────────────────────────
   4 [   name: my-example-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-example-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_job.yaml:10-12
────────────────────────────────────────
  10 ┌       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 └         command: ["echo", "hello"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job my-example-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_job.yaml:9-13
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: my-example-job
  11 │         image: ubuntu:24.04
  12 │         command: ["echo", "hello"]
  13 └       restartPolicy: Never
────────────────────────────────────────



my_pod_example.yaml (kubernetes)
================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-nginx' of 'pod' 'my-pod-webserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container-nginx' of Pod 'my-pod-webserver' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 my_pod_example.yaml:9-11
────────────────────────────────────────
   9 ┌   containers :
  10 │   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 my_pod_example.yaml:9-11
────────────────────────────────────────
   9 ┌   containers :
  10 │   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-nginx" of pod "my-pod-webserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod-webserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 my_pod_example.yaml:4-7
────────────────────────────────────────
   4 ┌   name: my-pod-webserver
   5 │   labels:
   6 │     apps: my-app
   7 └     tier: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod-webserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_pod_example.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod-webserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_pod_example.yaml:9-11
────────────────────────────────────────
   9 ┌   containers :
  10 │   - name: my-container-nginx
  11 └     image: nginx
────────────────────────────────────────



my_pod_example_student.yaml (kubernetes)
========================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-nginx' of 'pod' 'my-pod-webserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container-nginx' of Pod 'my-pod-webserver' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-nginx' of Pod 'my-pod-webserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 my_pod_example_student.yaml:11-13
────────────────────────────────────────
  11 ┌   containers:
  12 │   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 my_pod_example_student.yaml:11-13
────────────────────────────────────────
  11 ┌   containers:
  12 │   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-nginx" of pod "my-pod-webserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod-webserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 my_pod_example_student.yaml:5-8
────────────────────────────────────────
   5 ┌   name: my-pod-webserver
   6 │   labels:
   7 │     apps: my-app
   8 └     tier: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod-webserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_pod_example_student.yaml:12-13
────────────────────────────────────────
  12 ┌   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod-webserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_pod_example_student.yaml:11-13
────────────────────────────────────────
  11 ┌   containers:
  12 │   - name: my-container-nginx
  13 └     image: nginx
────────────────────────────────────────



my_pod_solution_teacher.yaml (kubernetes)
=========================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-apache' of 'pod' 'my-pod-webserver-hands-on' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-apache' of Pod 'my-pod-webserver-hands-on' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 my_pod_solution_teacher.yaml:8-10
────────────────────────────────────────
   8 ┌   containers :
   9 │   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 my_pod_solution_teacher.yaml:8-10
────────────────────────────────────────
   8 ┌   containers :
   9 │   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-apache" of pod "my-pod-webserver-hands-on" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod-webserver-hands-on in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 my_pod_solution_teacher.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-pod-webserver-hands-on
   5 │   labels:
   6 └     app-type: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod-webserver-hands-on in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_pod_solution_teacher.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod-webserver-hands-on in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_pod_solution_teacher.yaml:8-10
────────────────────────────────────────
   8 ┌   containers :
   9 │   - name: my-container-apache
  10 └     image: httpd
────────────────────────────────────────



my_sql_DB.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'wordpress-mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 my_sql_DB.yaml:8-35
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: wordpress
  11 │       tier: mysql
  12 │   strategy:
  13 │     type: Recreate
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 my_sql_DB.yaml:8-35
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: wordpress
  11 │       tier: mysql
  12 │   strategy:
  13 │     type: Recreate
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "wordpress-mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment wordpress-mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 my_sql_DB.yaml:4-6
────────────────────────────────────────
   4 ┌   name: wordpress-mysql
   5 │   labels:
   6 └     app: wordpress
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wordpress-mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_sql_DB.yaml:21-31
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 │           name: mysql
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wordpress-mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 my_sql_DB.yaml:20-35
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           value: PASSWORDS_IN_PLAIN_TEXT_ARE_BAD_WE_WILL_SHOW_SOMETHING_MORE_SECURE_LATER
  26 │         ports:
  27 │         - containerPort: 3306
  28 └           name: mysql
  ..   
────────────────────────────────────────



mysq_1.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysq_1.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     name: mysql
  11 │   clusterIP: None
  12 │   selector:
  13 └     app: mysql
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysq_1.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     name: mysql
  11 │   clusterIP: None
  12 │   selector:
  13 └     app: mysql
────────────────────────────────────────



mysq_2.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): StatefulSet 'mysql' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 mysq_2.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: mysql
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysq_2.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: mysql
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysq_2.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: mysql
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysq_2.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysq_2.yaml:16-33
────────────────────────────────────────
  16 ┌       terminationGracePeriodSeconds: 10
  17 │       containers:
  18 │       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 └         - name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in statefulset mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysq_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: public.ecr.aws/cloudacademy-labs/cloudacademy/labs/k8s-assessment/mysql:8
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: mysql
  23 │         volumeMounts:
  24 │         - name: mysql
  25 │           mountPath: /var/lib/mysql
  26 └         envFrom:
  ..   
────────────────────────────────────────



mysql55_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql55_1.yaml:6-28
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql55_1.yaml:6-28
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql55_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql55_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql55_1.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_USER
  21 │           value: deekshithsn
  22 │         - name: MYSQL_PASSWORD
  23 │           value: password
  24 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



mysql56.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 100, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql56.yaml:8-42
────────────────────────────────────────
   8 ┌   strategy:
   9 │     type: Recreate
  10 │   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app: mysql
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql56.yaml:8-42
────────────────────────────────────────
   8 ┌   strategy:
   9 │     type: Recreate
  10 │   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app: mysql
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql56.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql56.yaml:20-38
────────────────────────────────────────
  20 ┌         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 │                   key: password
  28 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql56.yaml:19-42
────────────────────────────────────────
  19 ┌       containers:
  20 │         - image: mysql:5.6
  21 │           name: mysql
  22 │           env:
  23 │             - name: MYSQL_ROOT_PASSWORD
  24 │               valueFrom:
  25 │                 secretKeyRef:
  26 │                   name: mysql
  27 └                   key: password
  ..   
────────────────────────────────────────



mysql57.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql57.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   type: ClusterIP
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql57.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   type: ClusterIP
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────



mysql57_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql57_1.yaml:6-17
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql57_1.yaml:6-17
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql57_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql57_1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in deployment mysql-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql57_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mysql
  17 └         image: tkdlqh2/residents-meeting-my-sql:2
────────────────────────────────────────



mysql58.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql58.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 3306
   9 │   selector:
  10 │     app: mysql
  11 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql58.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 3306
   9 │   selector:
  10 │     app: mysql
  11 └   clusterIP: None
────────────────────────────────────────



mysql58_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'web-app01' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql58_1.yaml:7-32
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   strategy:
  11 │     type: Recreate
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql58_1.yaml:7-32
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   strategy:
  11 │     type: Recreate
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "web-app01" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in web-app01 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql58_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 │           name: mysql
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in web-app01 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql58_1.yaml:17-32
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: mysql:5.6
  19 │         name: mysql
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password
  23 │         ports:
  24 │         - containerPort: 3306
  25 └           name: mysql
  ..   
────────────────────────────────────────



mysql5_1.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql5_1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 10Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql5_1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 10Gi
────────────────────────────────────────



mysql6.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysql-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql6.yaml:6-28
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql-db
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: mysql-db
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql6.yaml:6-28
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql-db
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: mysql-db
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql6.yaml:4
────────────────────────────────────────
   4 [   name: mysql-db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql6.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 │         volumeMounts:
  23 │         - name: mysql-initdb
  24 └           mountPath: /docker-entrypoint-initdb.d
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql6.yaml:14-28
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: mysql
  16 │         image: mysql
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: root_password
  22 └         volumeMounts:
  ..   
────────────────────────────────────────



mysql60.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql60.yaml:8-52
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql60.yaml:8-52
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql60.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql60.yaml:18-43
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 10
  19 │       containers:
  20 │       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 └           value: taskapp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in statefulset mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql60.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────



mysql60_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql60_1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │   selector:
  13 │     app: mysql
  14 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql60_1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │   selector:
  13 │     app: mysql
  14 └   clusterIP: None
────────────────────────────────────────



mysql61.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql61.yaml:8-52
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql61.yaml:8-52
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql61.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql61.yaml:18-43
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 10
  19 │       containers:
  20 │       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 └           value: taskapp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in statefulset mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql61.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────



mysql61_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql61_1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │   selector:
  13 │     app: mysql
  14 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql61_1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │   selector:
  13 │     app: mysql
  14 └   clusterIP: None
────────────────────────────────────────



mysql62.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql-container' of 'pod' 'mysql-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql62.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql62.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql-container" of pod "mysql-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql62.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-pod
   5 │   labels:
   6 └     app: mysql-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql62.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql62.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek 
────────────────────────────────────────



mysql64.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Pod 'mysql-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql64.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql64.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql64.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-pod
   5 │   labels:
   6 └     app: mysql-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql64.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql64.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:latest
  11 │     env:
  12 │     - name: "MYSQL_DATABASE"
  13 │       value: "meuBanco"
  14 │     - name: "MYSQL_ROOT_PASSWORD"
  15 │       value: "Senha123"
  16 │     ports:
  17 └     - containerPort: 3306
────────────────────────────────────────



mysql65.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql65.yaml:8-52
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql65.yaml:8-52
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql65.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql65.yaml:18-43
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 10
  19 │       containers:
  20 │       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 └           value: taskapp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in statefulset mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql65.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────



mysql65_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql65_1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │   selector:
  13 │     app: mysql
  14 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql65_1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │   selector:
  13 │     app: mysql
  14 └   clusterIP: None
────────────────────────────────────────



mysql66.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql66.yaml:8-52
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql66.yaml:8-52
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql66.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql66.yaml:18-43
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 10
  19 │       containers:
  20 │       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 └           value: taskapp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in statefulset mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql66.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v0.1.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────



mysql66_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql66_1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │   selector:
  13 │     app: mysql
  14 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql66_1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │   selector:
  13 │     app: mysql
  14 └   clusterIP: None
────────────────────────────────────────



mysql67.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 102, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'taskapp' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql67.yaml:9-59
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   serviceName: mysql
  13 │   replicas: 1
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql67.yaml:9-59
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   serviceName: mysql
  13 │   replicas: 1
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "taskapp" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in taskapp namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in taskapp namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql67.yaml:19-50
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in statefulset mysql (namespace: taskapp) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql67.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────



mysql67_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql67_1.yaml:9-16
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: mysql
  12 │   clusterIP: None
  13 │   ports:
  14 │   - port: 3306
  15 │     targetPort: 3306
  16 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql67_1.yaml:9-16
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: mysql
  12 │   clusterIP: None
  13 │   ports:
  14 │   - port: 3306
  15 │     targetPort: 3306
  16 └     protocol: TCP
────────────────────────────────────────



mysql68.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'taskapp' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql68.yaml:9-52
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   serviceName: mysql
  13 │   replicas: 1
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql68.yaml:9-52
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   serviceName: mysql
  13 │   replicas: 1
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "taskapp" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in taskapp namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in taskapp namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql68.yaml:19-43
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in statefulset mysql (namespace: taskapp) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql68.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: ghcr.io/gihyodocker/taskapp-mysql:v1.0.0
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD_FILE
  24 │           value: /var/run/secrets/mysql/root_password
  25 │         - name: MYSQL_DATABASE
  26 │           value: taskapp
  27 │         - name: MYSQL_USER
  28 └           value: taskapp_user
  ..   
────────────────────────────────────────



mysql68_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql68_1.yaml:9-16
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: mysql
  12 │   clusterIP: None
  13 │   ports:
  14 │   - port: 3306
  15 │     targetPort: 3306
  16 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql68_1.yaml:9-16
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: mysql
  12 │   clusterIP: None
  13 │   ports:
  14 │   - port: 3306
  15 │     targetPort: 3306
  16 └     protocol: TCP
────────────────────────────────────────



mysql6_1.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql6_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql-db
   8 │   ports:
   9 │   - port: 3306
  10 │     targetPort: 3306
  11 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql6_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql-db
   8 │   ports:
   9 │   - port: 3306
  10 │     targetPort: 3306
  11 └   type: ClusterIP
────────────────────────────────────────



mysql7.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql7.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     name: mysql
  11 │   clusterIP: None
  12 │   selector:
  13 └     app: mysql
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql7.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     name: mysql
  11 │   clusterIP: None
  12 │   selector:
  13 └     app: mysql
────────────────────────────────────────



mysql74.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql74.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: mysql
  11 │   ports:
  12 │   - name: mysql-service-port
  13 │     port: 3306
  14 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql74.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: mysql
  11 │   ports:
  12 │   - name: mysql-service-port
  13 │     port: 3306
  14 └     targetPort: 3306
────────────────────────────────────────



mysql74_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysql' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql74_1.yaml:6-33
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql74_1.yaml:6-33
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql74_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql74_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 │         - name: MYSQL_DATABASE
  24 └           value: scrum_hub
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql74_1.yaml:15-33
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: password123
  23 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



mysql75.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql75.yaml:6-22
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql75.yaml:6-22
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql75.yaml:4
────────────────────────────────────────
   4 [   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql75.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql75.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:5.7.39-oracle
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: topsecret
  21 │         ports:
  22 └         - containerPort: 3306
────────────────────────────────────────



mysql75_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql75_1.yaml:6-13
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │     nodePort: 30001
  13 └   type: NodePort
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql75_1.yaml:6-13
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 │     nodePort: 30001
  13 └   type: NodePort
────────────────────────────────────────



mysql76.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql76.yaml:8-37
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql76.yaml:8-37
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql76.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql76.yaml:18-33
────────────────────────────────────────
  18 ┌       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql76.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: mysql:8
  19 │         name: mysql
  20 │         args:
  21 │         - --default-authentication-plugin=mysql_native_password
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────



mysql77.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql77.yaml:6-30
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql77.yaml:6-30
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql77.yaml:4
────────────────────────────────────────
   4 [   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql77.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql77.yaml:15-30
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 └         ports:
  ..   
────────────────────────────────────────



mysql77_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql77_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql77_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────



mysql78_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'mysql' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 mysql78_1.yaml:6-63
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql78_1.yaml:6-63
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql78_1.yaml:6-63
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql78_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql78_1.yaml:16-55
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 │         - name: MYSQL_USER
  24 └           value: user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql78_1.yaml:15-63
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:8
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: '1234'
  21 │         - name: MYSQL_DATABASE
  22 │           value: crawl_data
  23 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────



mysql78_2.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql78_2.yaml:6-9
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 └     app: mysql
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql78_2.yaml:6-9
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 └     app: mysql
────────────────────────────────────────



mysql7_1.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql7_1.yaml:6-41
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: mysql
  10 │   replicas: 1
  11 │   minReadySeconds: 10
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql7_1.yaml:6-41
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: mysql
  10 │   replicas: 1
  11 │   minReadySeconds: 10
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql7_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql7_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_DATABASE
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql7_1.yaml:17-41
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 10
  18 │       containers:
  19 │       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



mysql7_2.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysqldump' of 'cronjob' 'backup-mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql7_2.yaml:6-30
────────────────────────────────────────
   6 ┌   schedule: 0 3 * * *
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 └             env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql7_2.yaml:6-30
────────────────────────────────────────
   6 ┌   schedule: 0 3 * * *
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 └             env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysqldump" of cronjob "backup-mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob backup-mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql7_2.yaml:4
────────────────────────────────────────
   4 [   name: backup-mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backup-mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob backup-mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql7_2.yaml:11-30
────────────────────────────────────────
  11 ┌           containers:
  12 │           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 └                   key: DB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysqldump in cronjob backup-mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql7_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: titiura/mysqldump:v1
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────



mysql8.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql8.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql8.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   type: ClusterIP
────────────────────────────────────────



mysql80.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'namespace-project' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql80.yaml:9-48
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: wordpress
  12 │       tier: mysql
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql80.yaml:9-48
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: wordpress
  12 │       tier: mysql
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "namespace-project" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in namespace-project namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql80.yaml:22-44
────────────────────────────────────────
  22 ┌       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 │               key: password
  30 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in namespace-project namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql80.yaml:21-48
────────────────────────────────────────
  21 ┌       containers:
  22 │       - image: mysql:8.0
  23 │         name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 │             secretKeyRef:
  28 │               name: mysql-password
  29 └               key: password
  ..   
────────────────────────────────────────



mysql80_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql80_1.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 3306
  11 │   selector:
  12 │     app: wordpress
  13 │     tier: mysql
  14 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql80_1.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 3306
  11 │   selector:
  12 │     app: wordpress
  13 │     tier: mysql
  14 └   clusterIP: None
────────────────────────────────────────



mysql81.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql81.yaml:6-30
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql81.yaml:6-30
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql81.yaml:4
────────────────────────────────────────
   4 [   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql81.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 │         ports:
  24 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql81.yaml:15-30
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           value: jagriti@123
  21 │         - name: MYSQL_DATABASE
  22 │           value: employees_db
  23 └         ports:
  ..   
────────────────────────────────────────



mysql81_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql81_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql81_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────



mysql82.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql-container' of Pod 'mysql-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql-container' of Pod 'mysql-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql-container' of 'pod' 'mysql-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql-container' of Pod 'mysql-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql-container' of Pod 'mysql-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql-container' of Pod 'mysql-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql-container' of Pod 'mysql-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql-container' of Pod 'mysql-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql-container' of Pod 'mysql-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql-container' of Pod 'mysql-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql-container' of Pod 'mysql-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql-container' of Pod 'mysql-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql82.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql82.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql-container" of pod "mysql-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql82.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-app
   5 │   labels:
   6 └     name: mysql-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql82.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql82.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql-container
  10 │     image: mysql
  11 │     env:
  12 │       - name: MYSQL_ROOT_PASSWORD
  13 │         value: password
  14 │       - name: MYSQL_DATABASE
  15 └         value: geek
────────────────────────────────────────



mysql83.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql83.yaml:6-47
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: "mysql"
  10 │   replicas: 1
  11 │   minReadySeconds: 30
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql83.yaml:6-47
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: "mysql"
  10 │   replicas: 1
  11 │   minReadySeconds: 30
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql83.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql83.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql83.yaml:17-47
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 30
  18 │       containers:
  19 │         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 └             - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



mysql84.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql84.yaml:6-47
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: "mysql"
  10 │   replicas: 1
  11 │   minReadySeconds: 30
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql84.yaml:6-47
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: "mysql"
  10 │   replicas: 1
  11 │   minReadySeconds: 30
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql84.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql84.yaml:19-43
────────────────────────────────────────
  19 ┌         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 │             - name: MYSQL_DATABASE
  26 │               valueFrom:
  27 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql84.yaml:17-47
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 30
  18 │       containers:
  19 │         - name: mysql
  20 │           image: mysql:8
  21 │           ports:
  22 │             - name: mysql
  23 │               containerPort: 3306
  24 │           env:
  25 └             - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



mysql85.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'trail3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'trail3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'trail3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'trail3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'trail3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'trail3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'trail3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'trail3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'trail3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'trail3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'trail3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql85.yaml:9-20
────────────────────────────────────────
   9 ┌   containers:
  10 │     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql85.yaml:9-20
────────────────────────────────────────
   9 ┌   containers:
  10 │     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "trail3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod trail3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql85.yaml:7
────────────────────────────────────────
   7 [   name: trail3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container trail3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql85.yaml:10-20
────────────────────────────────────────
  10 ┌     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 │         - name: MYSQL_DATABASE
  18 └           value: emp  
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod trail3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql85.yaml:9-20
────────────────────────────────────────
   9 ┌   containers:
  10 │     - image: mysql:8.0-debian
  11 │       name: mysql 
  12 │       env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: rootroot
  15 │         - name: MYSQL_USER
  16 │           value: anil
  17 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



mysql86.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql86.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │   selector:
  11 │     app: wordpress
  12 │     tier: mysql
  13 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql86.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │   selector:
  11 │     app: wordpress
  12 │     tier: mysql
  13 └   clusterIP: None
────────────────────────────────────────



mysql86_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql86_1.yaml:8-13
────────────────────────────────────────
   8 ┌   storageClassName: rook-block
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 2Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql86_1.yaml:8-13
────────────────────────────────────────
   8 ┌   storageClassName: rook-block
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 2Gi
────────────────────────────────────────



mysql87.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql87.yaml:8-43
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 2
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql87.yaml:8-43
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 2
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql87.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset mysql in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql87.yaml:18-43
────────────────────────────────────────
  18 ┌       affinity:
  19 │         nodeAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │             nodeSelectorTerms:
  22 │             - matchExpressions:
  23 │               - key: kubernetes.io/os
  24 │                 operator: In
  25 │                 values:
  26 └                 - linux
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in statefulset mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql87.yaml:30-43
────────────────────────────────────────
  30 ┌       - name: nginx
  31 │         image: fabedge/net-tool:v0.1.0
  32 │         ports:
  33 │         - containerPort: 80
  34 │           name: http
  35 │           protocol: TCP
  36 │         - containerPort: 443
  37 │           name: https
  38 └           protocol: TCP
  ..   
────────────────────────────────────────



mysql87_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql87_1.yaml:8-19
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   selector:
  10 │     app: mysql
  11 │   ports:
  12 │   - name: http
  13 │     protocol: TCP
  14 │     port: 80
  15 │     targetPort: 80
  16 └   - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql87_1.yaml:8-19
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   selector:
  10 │     app: mysql
  11 │   ports:
  12 │   - name: http
  13 │     protocol: TCP
  14 │     port: 80
  15 │     targetPort: 80
  16 └   - name: https
  ..   
────────────────────────────────────────



mysql88.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql88.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: mysql
   9 │   ports:
  10 │   - name: http
  11 │     protocol: TCP
  12 │     port: 3306
  13 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql88.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: mysql
   9 │   ports:
  10 │   - name: http
  11 │     protocol: TCP
  12 │     port: 3306
  13 └     targetPort: 3306
────────────────────────────────────────



mysql88_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql88_1.yaml:6-43
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql88_1.yaml:6-43
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql88_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql88_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: customer-secrets
  27 │               key: db-root-password
  28 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql88_1.yaml:15-43
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: mysql-pv
  17 │         persistentVolumeClaim:
  18 │           claimName: mysql-pv-claim
  19 │       containers:
  20 │       - name: mysql
  21 │         image: mysql:latest
  22 │         env:
  23 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



mysql89.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Pod 'mysql' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0028 (LOW): Pod 'mysql' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 mysql89.yaml:8-33
────────────────────────────────────────
   8 ┌   containers:
   9 │     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 └         - "lost+found"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql89.yaml:8-33
────────────────────────────────────────
   8 ┌   containers:
   9 │     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 └         - "lost+found"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql89.yaml:8-33
────────────────────────────────────────
   8 ┌   containers:
   9 │     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 └         - "lost+found"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql89.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql89.yaml:9-28
────────────────────────────────────────
   9 ┌     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 │         - "lost+found"
  17 └       env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql89.yaml:8-33
────────────────────────────────────────
   8 ┌   containers:
   9 │     - resources:
  10 │         limits :
  11 │           cpu: 0.5
  12 │       image: mysql
  13 │       name: mysql
  14 │       args:
  15 │         - "--ignore-db-dir"
  16 └         - "lost+found"
  ..   
────────────────────────────────────────



mysql8_1.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql8_1.yaml:6-33
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql8_1.yaml:6-33
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mysql
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql8_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql8_1.yaml:16-29
────────────────────────────────────────
  16 ┌       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 │               key: mysql-root-password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql8_1.yaml:15-33
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: mysql:5.6
  17 │         name: mysql
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: mysql-secret
  23 └               key: mysql-root-password
  ..   
────────────────────────────────────────



mysql9.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql-container' of 'pod' 'mysql-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql-container' of Pod 'mysql-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql9.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql9.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql-container" of pod "mysql-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql9.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-pod
   5 │   labels:
   6 └     app: mysql-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql9.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql9.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: mysql-container
  10 │       image: mysql:5
  11 │       env:
  12 │         - name: MYSQL_ROOT_PASSWORD
  13 │           value: password
  14 │         - name: MYSQL_DATABASE
  15 └           value: geek
────────────────────────────────────────



mysql90.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql90.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql90.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────



mysql90_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql90_1.yaml:6-28
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql90_1.yaml:6-28
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql90_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql90_1.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 └         - name: MYSQL_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in deployment mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql90_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: quay.io/debezium/example-mysql:2.1
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: debezium
  22 │         - name: MYSQL_USER
  23 │           value: mysqluser
  24 │         - name: MYSQL_PASSWORD
  25 └           value: mysqlpw
  ..   
────────────────────────────────────────



mysql91.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql91.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql91.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql91.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-deployment
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql91.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql91.yaml:17-44
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────



mysql91_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql91_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql91_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────



mysql92.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql92.yaml:12-33
────────────────────────────────────────
  12 ┌   containers:
  13 │     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 └               key: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql92.yaml:12-33
────────────────────────────────────────
  12 ┌   containers:
  13 │     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 └               key: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql92.yaml:5-9
────────────────────────────────────────
   5 ┌   name: mysql
   6 │   labels: 
   7 │     app: web-wordpress
   8 │     microservice: mysql
   9 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql92.yaml:13-33
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └           #value: asd123
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql92.yaml:12-33
────────────────────────────────────────
  12 ┌   containers:
  13 │     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 └               key: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



mysql93.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql93.yaml:12-31
────────────────────────────────────────
  12 ┌   containers:
  13 │     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 └               key: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql93.yaml:12-31
────────────────────────────────────────
  12 ┌   containers:
  13 │     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 └               key: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql93.yaml:5-9
────────────────────────────────────────
   5 ┌   name: mysql
   6 │   labels: 
   7 │     app: web-wordpress
   8 │     microservice: mysql
   9 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql93.yaml:13-31
────────────────────────────────────────
  13 ┌     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 │               key: MYSQL_ROOT_PASSWORD
  21 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql93.yaml:12-31
────────────────────────────────────────
  12 ┌   containers:
  13 │     - name: mysql
  14 │       image: mysql:8.3.0
  15 │       env:
  16 │         - name: MYSQL_ROOT_PASSWORD
  17 │           valueFrom:
  18 │             secretKeyRef:
  19 │               name: mysql-secret
  20 └               key: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



mysql94.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql94.yaml:7-13
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 │       storage: 128Mi
  12 │   storageClassName: lovo
  13 └   volumeMode: Filesystem
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql94.yaml:7-13
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 │       storage: 128Mi
  12 │   storageClassName: lovo
  13 └   volumeMode: Filesystem
────────────────────────────────────────



mysql94_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql94_1.yaml:8-31
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql94_1.yaml:8-31
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   serviceName: mysql
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql94_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql94_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql94_1.yaml:18-31
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: mysql
  20 │         image: mysql:8.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: '123456'
  24 │         volumeMounts:
  25 │         - name: data
  26 └           mountPath: /var/lib/mysql
  ..   
────────────────────────────────────────



mysql97.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql97.yaml:6-40
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: mysql
  10 │   replicas: 1
  11 │   minReadySeconds: 10
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql97.yaml:6-40
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   serviceName: mysql
  10 │   replicas: 1
  11 │   minReadySeconds: 10
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql97.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql97.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql97.yaml:17-40
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 10
  18 │       containers:
  19 │       - name: mysql
  20 │         image: mysql:8
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         env:
  24 │         - name: MYSQL_DATABASE
  25 └           valueFrom:
  ..   
────────────────────────────────────────



mysql97_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql97_1.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     name: mysql
  11 │   selector:
  12 └     app: mysql
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql97_1.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     name: mysql
  11 │   selector:
  12 └     app: mysql
────────────────────────────────────────



mysql97_2.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysqldump' of 'cronjob' 'backup-mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysqldump' of CronJob 'backup-mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql97_2.yaml:6-30
────────────────────────────────────────
   6 ┌   schedule: 0 3 * * *
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 └             env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql97_2.yaml:6-30
────────────────────────────────────────
   6 ┌   schedule: 0 3 * * *
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 └             env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysqldump" of cronjob "backup-mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob backup-mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql97_2.yaml:4
────────────────────────────────────────
   4 [   name: backup-mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backup-mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob backup-mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql97_2.yaml:11-30
────────────────────────────────────────
  11 ┌           containers:
  12 │           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 └                   key: DB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysqldump in cronjob backup-mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql97_2.yaml:12-29
────────────────────────────────────────
  12 ┌           - name: mysqldump
  13 │             image: leonardosartorello/mysqldump:v4
  14 │             env:
  15 │             - name: MYSQL_ENV_DB_HOST
  16 │               valueFrom:
  17 │                 configMapKeyRef:
  18 │                   name: dados
  19 │                   key: DB_HOST
  20 └             - name: MYSQL_ENV_DB_PASS
  ..   
────────────────────────────────────────



mysql98.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql98.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql98.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql98.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql98.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql98.yaml:17-44
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mysql
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────



mysql98_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql98_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql98_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────



mysql99.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'database' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'database' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'database' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'database' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'database' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'database' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'database' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'database' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'database' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'database' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'database' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql99.yaml:8-34
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql99.yaml:8-34
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "database" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql99.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql99.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-password
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql99.yaml:17-34
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: database
  19 │         image: mysql:5.7
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         env:
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────



mysqlYaml1_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqlYaml1_1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: mysql
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqlYaml1_1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: mysql
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────



mysqlYaml1_2.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql-statefulset' in 'exam' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of StatefulSet 'mysql-statefulset' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqlYaml1_2.yaml:7-63
────────────────────────────────────────
   7 ┌   serviceName: mysql-service
   8 │   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqlYaml1_2.yaml:7-63
────────────────────────────────────────
   7 ┌   serviceName: mysql-service
   8 │   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql-statefulset" in "exam" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-statefulset in exam namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqlYaml1_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql-statefulset in exam namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqlYaml1_2.yaml:17-54
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 └               key: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



mysqlYaml_1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqlYaml_1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: mysql
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqlYaml_1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: mysql
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────



mysqlYaml_2.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql-statefulset' in 'exam' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of StatefulSet 'mysql-statefulset' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqlYaml_2.yaml:7-63
────────────────────────────────────────
   7 ┌   serviceName: mysql-service
   8 │   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqlYaml_2.yaml:7-63
────────────────────────────────────────
   7 ┌   serviceName: mysql-service
   8 │   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql-statefulset" in "exam" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-statefulset in exam namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqlYaml_2.yaml:18-54
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 │               key: MYSQL_ROOT_PASSWORD
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql-statefulset in exam namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqlYaml_2.yaml:17-54
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mysql
  19 │         image: mysql:latest
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mysql-secret
  25 └               key: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



mysql_1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 10Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 10Gi
────────────────────────────────────────



mysql_backup_cronjob.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 14, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysqlbackup' of 'cronjob' 'mysql-backup' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0028 (LOW): CronJob 'mysql-backup' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 mysql_backup_cronjob.yaml:6-26
────────────────────────────────────────
   6 ┌   schedule: "*/5 * * * *"
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 └             args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_backup_cronjob.yaml:6-26
────────────────────────────────────────
   6 ┌   schedule: "*/5 * * * *"
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 └             args:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_backup_cronjob.yaml:6-26
────────────────────────────────────────
   6 ┌   schedule: "*/5 * * * *"
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 └             args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysqlbackup" of cronjob "mysql-backup" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob mysql-backup in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_backup_cronjob.yaml:4
────────────────────────────────────────
   4 [   name: mysql-backup
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-backup in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_backup_cronjob.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob mysql-backup in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_backup_cronjob.yaml:11-26
────────────────────────────────────────
  11 ┌           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 └               - name: dbbackup
  ..   
────────────────────────────────────────



mysql_backup_cronjob1.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 14, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysqlbackup' of 'cronjob' 'mysql-backup' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0028 (LOW): CronJob 'mysql-backup' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:6-26
────────────────────────────────────────
   6 ┌   schedule: "*/5 * * * *"
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 └             args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:6-26
────────────────────────────────────────
   6 ┌   schedule: "*/5 * * * *"
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 └             args:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:6-26
────────────────────────────────────────
   6 ┌   schedule: "*/5 * * * *"
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 └             args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysqlbackup" of cronjob "mysql-backup" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob mysql-backup in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:4
────────────────────────────────────────
   4 [   name: mysql-backup
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-backup in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob mysql-backup in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_backup_cronjob1.yaml:11-26
────────────────────────────────────────
  11 ┌           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 └               - name: dbbackup
  ..   
────────────────────────────────────────



mysql_backup_cronjob2.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 14, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysqlbackup' of 'cronjob' 'mysql-backup' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysqlbackup' of CronJob 'mysql-backup' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0028 (LOW): CronJob 'mysql-backup' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:6-26
────────────────────────────────────────
   6 ┌   schedule: "*/5 * * * *"
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 └             args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:6-26
────────────────────────────────────────
   6 ┌   schedule: "*/5 * * * *"
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 └             args:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:6-26
────────────────────────────────────────
   6 ┌   schedule: "*/5 * * * *"
   7 │   jobTemplate:
   8 │     spec:
   9 │       template:
  10 │         spec:
  11 │           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 └             args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysqlbackup" of cronjob "mysql-backup" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob mysql-backup in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:4
────────────────────────────────────────
   4 [   name: mysql-backup
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-backup in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:12-20
────────────────────────────────────────
  12 ┌           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 │               - name: dbbackup
  20 └                 mountPath: /var/tmp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob mysql-backup in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_backup_cronjob2.yaml:11-26
────────────────────────────────────────
  11 ┌           containers:
  12 │           - name: mysqlbackup
  13 │             image: mysql:5.6
  14 │             args:
  15 │             - /bin/sh
  16 │             - -c
  17 │             - mysqldump -hmysql.default -uroot -ptest123 --all-databases > "/var/tmp/mysql_backup.$(date %F_%R).sql"
  18 │             volumeMounts:
  19 └               - name: dbbackup
  ..   
────────────────────────────────────────



mysql_dep.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_dep.yaml:8-56
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │       tier: database
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └         tier: database
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_dep.yaml:8-56
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │       tier: database
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └         tier: database
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_dep.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_dep.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: configmap
  27 └               key: MYSQL_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_dep.yaml:18-56
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mysql:8.0
  20 │         name: mysql
  21 │         imagePullPolicy: "IfNotPresent"
  22 │         env:
  23 │         - name: MYSQL_USER # Setting Database host address from configMap
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: configmap
  ..   
────────────────────────────────────────



mysql_dep1.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_dep1.yaml:8-26
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_dep1.yaml:8-26
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mysql
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_dep1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-deployment
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_dep1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_dep1.yaml:17-26
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mysql
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306  
  22 │         env:
  23 │         - name: root
  24 │           value: lnnaya
  25 │         - name: MYSQL_DATABASE  
  26 └           value: commandes 
────────────────────────────────────────



mysql_deploy.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy.yaml:6-31
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql-pods
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: mysql-pods
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy.yaml:6-31
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql-pods
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: mysql-pods
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deploy.yaml:4
────────────────────────────────────────
   4 [   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deploy.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deploy.yaml:14-31
────────────────────────────────────────
  14 ┌       containers:
  15 │       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 └         ports:
  ..   
────────────────────────────────────────



mysql_deploy1.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy1.yaml:6-31
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql-pods
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: mysql-pods
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy1.yaml:6-31
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql-pods
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: mysql-pods
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deploy1.yaml:4
────────────────────────────────────────
   4 [   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deploy1.yaml:15-27
────────────────────────────────────────
  15 ┌       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 │         ports:
  23 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deploy1.yaml:14-31
────────────────────────────────────────
  14 ┌       containers:
  15 │       - image: mysql:5.7
  16 │         name: mysql
  17 │         envFrom:
  18 │         - secretRef:
  19 │             name: mysql-secret
  20 │         - configMapRef:
  21 │             name: mysql-config
  22 └         ports:
  ..   
────────────────────────────────────────



mysql_deploy1_3.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy1_3.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql-pods
  10 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy1_3.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql-pods
  10 └   type: ClusterIP
────────────────────────────────────────



mysql_deploy1_4.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy1_4.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy1_4.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────



mysql_deploy1_5.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy1_5.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy1_5.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



mysql_deploy_3.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy_3.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql-pods
  10 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy_3.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql-pods
  10 └   type: ClusterIP
────────────────────────────────────────



mysql_deploy_4.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy_4.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy_4.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────



mysql_deploy_5.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy_5.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy_5.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



mysql_deploy_and_serve.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy_and_serve.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │   selector:
  11 │     app: fastapi-server
  12 │     tier: mysql
  13 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy_and_serve.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │   selector:
  11 │     app: fastapi-server
  12 │     tier: mysql
  13 └   clusterIP: None
────────────────────────────────────────



mysql_deploy_and_serve_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy_and_serve_1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy_and_serve_1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



mysql_deploy_and_serve_2.yaml (kubernetes)
==========================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'fastapi-mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'fastapi-mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'fastapi-mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'fastapi-mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'fastapi-mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'fastapi-mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'fastapi-mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'fastapi-mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'fastapi-mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'fastapi-mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'fastapi-mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:8-47
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: fastapi-server
  11 │       tier: mysql
  12 │   strategy:
  13 │     type: Recreate
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:8-47
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: fastapi-server
  11 │       tier: mysql
  12 │   strategy:
  13 │     type: Recreate
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "fastapi-mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment fastapi-mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: fastapi-mysql
   5 │   labels:
   6 └     app: fastapi-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fastapi-mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:21-43
────────────────────────────────────────
  21 ┌       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment fastapi-mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deploy_and_serve_2.yaml:20-47
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: mysql:8.0
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 └               key: password
  ..   
────────────────────────────────────────



mysql_deployement-service.yaml (kubernetes)
===========================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'mysql-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'mysql-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployement-service.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       name: mysql-pod
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: mysql-pod
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployement-service.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       name: mysql-pod
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: mysql-pod
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "mysql-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployement-service.yaml:4
────────────────────────────────────────
   4 [   name: mysql-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployement-service.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployement-service.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 └         - configMapRef:
  ..   
────────────────────────────────────────



mysql_deployement-service1.yaml (kubernetes)
============================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'mysql-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'mysql-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'mysql-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployement-service1.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       name: mysql-pod
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: mysql-pod
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployement-service1.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       name: mysql-pod
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: mysql-pod
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "mysql-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployement-service1.yaml:4
────────────────────────────────────────
   4 [   name: mysql-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployement-service1.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 │         - configMapRef:
  24 └             name: mysql-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployement-service1.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: mysql:5.7
  17 │         name: web
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: secret
  23 └         - configMapRef:
  ..   
────────────────────────────────────────



mysql_deployement-service1_1.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployement-service1_1.yaml:8-12
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: mysql-pod
  10 │   ports:
  11 │   - port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployement-service1_1.yaml:8-12
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: mysql-pod
  10 │   ports:
  11 │   - port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────



mysql_deployement-service_1.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployement-service_1.yaml:8-12
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: mysql-pod
  10 │   ports:
  11 │   - port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployement-service_1.yaml:8-12
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: mysql-pod
  10 │   ports:
  11 │   - port: 3306
  12 └     targetPort: 3306
────────────────────────────────────────



mysql_deployment.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────



mysql_deployment1.yaml (kubernetes)
===================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment1.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       name: mysql-pod
  12 │   template:
  13 │     metadata:
  14 │       name: mysql-pod
  15 │       labels:
  16 └         name: mysql-pod
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment1.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       name: mysql-pod
  12 │   template:
  13 │     metadata:
  14 │       name: mysql-pod
  15 │       labels:
  16 └         name: mysql-pod
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-deploy
   5 │   labels:
   6 └     name: mysql-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment1.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment1.yaml:18-44
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────



mysql_deployment10.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment10.yaml:8-35
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql-deployment
  12 │   strategy: {}
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql-deployment
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment10.yaml:8-35
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql-deployment
  12 │   strategy: {}
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql-deployment
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment10.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: mysql-deployment
   6 └   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment10.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment10.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────



mysql_deployment11.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment11.yaml:8-35
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql-deployment
  12 │   strategy: {}
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql-deployment
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment11.yaml:8-35
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mysql-deployment
  12 │   strategy: {}
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mysql-deployment
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment11.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: mysql-deployment
   6 └   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment11.yaml:19-31
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 │               name: mysql-secret
  27 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment11.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mysql:5.7
  20 │         name: mysql
  21 │         ports:
  22 │         - containerPort: 3306
  23 │         resources: {}
  24 │         envFrom:
  25 │           - secretRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────



mysql_deployment12.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment12.yaml:9-30
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: mysql-deployment
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment12.yaml:9-30
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: mysql-deployment
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment12.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: mysql-deployment
   7 └   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment12.yaml:21-30
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 │           - configMapRef:
  30 └               name: mysqlconfig
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment12.yaml:20-30
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │          - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 └               name: mysecret
  ..   
────────────────────────────────────────



mysql_deployment13.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment13.yaml:9-37
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: mysql-deployment
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment13.yaml:9-37
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: mysql-deployment
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment13.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: mysql-deployment
   7 └   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment13.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 │           - configMapRef: 
  29 └               name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment13.yaml:20-37
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         envFrom:
  26 │           - secretRef:
  27 │               name: mysql-secret
  28 └           - configMapRef: 
  ..   
────────────────────────────────────────



mysql_deployment15.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment15.yaml:9-38
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: mysql-deployment
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment15.yaml:9-38
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: mysql-deployment
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment15.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: mysql-deployment
   7 └   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment15.yaml:21-33
────────────────────────────────────────
  21 ┌       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 │               name: mysecret
  29 └           - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment15.yaml:20-38
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: mysql:5.7
  22 │         name: mysql
  23 │         ports:
  24 │         - containerPort: 3306
  25 │         resources: {}
  26 │         envFrom: 
  27 │           - secretRef:
  28 └               name: mysecret
  ..   
────────────────────────────────────────



mysql_deployment16.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment16.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       name: mysql-pod
  12 │   template:
  13 │     metadata:
  14 │       name: mysql-pod
  15 │       labels:
  16 └         name: mysql-pod
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment16.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       name: mysql-pod
  12 │   template:
  13 │     metadata:
  14 │       name: mysql-pod
  15 │       labels:
  16 └         name: mysql-pod
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment16.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-deploy
   5 │   labels:
   6 └     name: mysql-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment16.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────



mysql_deployment2.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment2.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment2.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────



mysql_deployment2_1.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment2_1.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment2_1.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment2_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment2_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment2_1.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 └         ports:
  ..   
────────────────────────────────────────



mysql_deployment2_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment2_2.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment2_2.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────



mysql_deployment2_3.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment2_3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment2_3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



mysql_deployment3.yaml (kubernetes)
===================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment3.yaml:6-43
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   strategy:
  11 │     type: Recreate
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment3.yaml:6-43
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   strategy:
  11 │     type: Recreate
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment3.yaml:4
────────────────────────────────────────
   4 [   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment3.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment3.yaml:17-43
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mysql
  19 │         image: mysql:latest
  20 │         volumeMounts:
  21 │         - name: mysql-data
  22 │           mountPath: /var/lib/mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 └           valueFrom:
  ..   
────────────────────────────────────────



mysql_deployment3_1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment3_1.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 └     port: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment3_1.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 └     port: 3306
────────────────────────────────────────



mysql_deployment4.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment4.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment4.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────



mysql_deployment4_1.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment4_1.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment4_1.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment4_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment4_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment4_1.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 └         ports:
  ..   
────────────────────────────────────────



mysql_deployment4_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment4_2.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment4_2.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────



mysql_deployment4_3.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment4_3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment4_3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



mysql_deployment5.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment5.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   type: NodePort
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment5.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   type: NodePort
────────────────────────────────────────



mysql_deployment5_1.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment5_1.yaml:6-31
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment5_1.yaml:6-31
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment5_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment5_1.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 └           name: mysql
  ..   
────────────────────────────────────────



mysql_deployment8.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment8.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment8.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 3306
   8 │   selector:
   9 │     app: mysql
  10 └   clusterIP: None
────────────────────────────────────────



mysql_deployment8_1.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment8_1.yaml:6-31
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment8_1.yaml:6-31
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment8_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment8_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment8_1.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 └           name: mysql
  ..   
────────────────────────────────────────



mysql_deployment8_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment8_2.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment8_2.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────



mysql_deployment8_3.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment8_3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment8_3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



mysql_deployment9.yaml (kubernetes)
===================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment9.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       name: mysql-pod
  12 │   template:
  13 │     metadata:
  14 │       name: mysql-pod
  15 │       labels:
  16 └         name: mysql-pod
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment9.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       name: mysql-pod
  12 │   template:
  13 │     metadata:
  14 │       name: mysql-pod
  15 │       labels:
  16 └         name: mysql-pod
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment9.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-deploy
   5 │   labels:
   6 └     name: mysql-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment9.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: mysql-secret
  27 └               key: mysql-admin-password
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment9.yaml:18-44
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mysql:5.7
  20 │         name: mysql
  21 │         imagePullPolicy: Always #https://kubernetes.io/docs/concepts/configuration/overview/
  22 │         env:
  23 │         - name: MYSQL_PASSWORD
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mysql-secret
  ..   
────────────────────────────────────────



mysql_deployment_1.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment_1.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment_1.yaml:6-33
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_deployment_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_deployment_1.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_HOST
  21 │           value: '%'
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: password
  24 └         ports:
  ..   
────────────────────────────────────────



mysql_deployment_2.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment_2.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment_2.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────



mysql_deployment_3.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_deployment_3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_deployment_3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



mysql_editor_role1.yaml (kubernetes)
====================================
Tests: 119 (SUCCESSES: 110, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'mysql-editor-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 mysql_editor_role1.yaml:68-83
────────────────────────────────────────
  68 ┌ - apiGroups:
  69 │   - ""
  70 │   resources:
  71 │   - configmaps
  72 │   - persistentvolumeclaims
  73 │   - pods
  74 │   - secrets
  75 │   - services
  76 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mysql-editor-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 mysql_editor_role1.yaml:32-43
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - apps
  34 │   resources:
  35 │   - deployments
  36 │   verbs:
  37 │   - create
  38 │   - delete
  39 │   - get
  40 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mysql-editor-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 mysql_editor_role1.yaml:44-55
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - apps
  46 │   resources:
  47 │   - statefulsets
  48 │   verbs:
  49 │   - create
  50 │   - delete
  51 │   - get
  52 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mysql-editor-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 mysql_editor_role1.yaml:68-83
────────────────────────────────────────
  68 ┌ - apiGroups:
  69 │   - ""
  70 │   resources:
  71 │   - configmaps
  72 │   - persistentvolumeclaims
  73 │   - pods
  74 │   - secrets
  75 │   - services
  76 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mysql-editor-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 mysql_editor_role1.yaml:120-131
────────────────────────────────────────
 120 ┌ - apiGroups:
 121 │   - batch
 122 │   resources:
 123 │   - jobs
 124 │   verbs:
 125 │   - create
 126 │   - delete
 127 │   - get
 128 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'mysql-editor-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 mysql_editor_role1.yaml:68-83
────────────────────────────────────────
  68 ┌ - apiGroups:
  69 │   - ""
  70 │   resources:
  71 │   - configmaps
  72 │   - persistentvolumeclaims
  73 │   - pods
  74 │   - secrets
  75 │   - services
  76 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'mysql-editor-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 mysql_editor_role1.yaml:132-142
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - rbac.authorization.k8s.io
 134 │   resources:
 135 │   - rolebindings
 136 │   - roles
 137 │   verbs:
 138 │   - create
 139 │   - get
 140 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'mysql-editor-role' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 mysql_editor_role1.yaml:92-97
────────────────────────────────────────
  92 ┌ - apiGroups:
  93 │   - ""
  94 │   resources:
  95 │   - pods/exec
  96 │   verbs:
  97 └   - create
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'mysql-editor-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 mysql_editor_role1.yaml:68-83
────────────────────────────────────────
  68 ┌ - apiGroups:
  69 │   - ""
  70 │   resources:
  71 │   - configmaps
  72 │   - persistentvolumeclaims
  73 │   - pods
  74 │   - secrets
  75 │   - services
  76 └   verbs:
  ..   
────────────────────────────────────────



mysql_job-dataseed.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-sql-seed' of 'job' 'my-sql-dump' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-sql-seed' of Job 'my-sql-dump' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_job-dataseed.yaml:6-22
────────────────────────────────────────
   6 ┌  ttlSecondsAfterFinished: 10
   7 │  template:
   8 │    metadata:
   9 │      name: my-sql-dump
  10 │    spec:
  11 │      containers:
  12 │      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 └        command:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_job-dataseed.yaml:6-22
────────────────────────────────────────
   6 ┌  ttlSecondsAfterFinished: 10
   7 │  template:
   8 │    metadata:
   9 │      name: my-sql-dump
  10 │    spec:
  11 │      containers:
  12 │      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 └        command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-sql-seed" of job "my-sql-dump" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0110 (LOW): job my-sql-dump in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_job-dataseed.yaml:4
────────────────────────────────────────
   4 [  name: my-sql-dump
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sql-dump in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job my-sql-dump in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_job-dataseed.yaml:11-22
────────────────────────────────────────
  11 ┌      containers:
  12 │      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 │          - |
  18 │            git clone https://github.com/DeekshithSN/kubernetes.git
  19 └            mysql -h mysql -u root -padmin -e 'CREATE DATABASE IF NOT EXISTS test';
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-sql-seed in job my-sql-dump (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql_job-dataseed.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────



mysql_job-dataseed1.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-sql-seed' of 'job' 'my-sql-dump' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-sql-seed' of Job 'my-sql-dump' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_job-dataseed1.yaml:6-22
────────────────────────────────────────
   6 ┌  ttlSecondsAfterFinished: 10
   7 │  template:
   8 │    metadata:
   9 │      name: my-sql-dump
  10 │    spec:
  11 │      containers:
  12 │      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 └        command:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_job-dataseed1.yaml:6-22
────────────────────────────────────────
   6 ┌  ttlSecondsAfterFinished: 10
   7 │  template:
   8 │    metadata:
   9 │      name: my-sql-dump
  10 │    spec:
  11 │      containers:
  12 │      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 └        command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-sql-seed" of job "my-sql-dump" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0110 (LOW): job my-sql-dump in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_job-dataseed1.yaml:4
────────────────────────────────────────
   4 [  name: my-sql-dump
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sql-dump in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job my-sql-dump in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_job-dataseed1.yaml:11-22
────────────────────────────────────────
  11 ┌      containers:
  12 │      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 │          - |
  18 │            git clone https://github.com/DeekshithSN/kubernetes.git
  19 └            mysql -h mysql -u root -padmin -e 'CREATE DATABASE IF NOT EXISTS test';
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-sql-seed in job my-sql-dump (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql_job-dataseed1.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────



mysql_job-dataseed2.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-sql-seed' of 'job' 'my-sql-dump' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-sql-seed' of Job 'my-sql-dump' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-sql-seed' of Job 'my-sql-dump' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_job-dataseed2.yaml:6-22
────────────────────────────────────────
   6 ┌  ttlSecondsAfterFinished: 10
   7 │  template:
   8 │    metadata:
   9 │      name: my-sql-dump
  10 │    spec:
  11 │      containers:
  12 │      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 └        command:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_job-dataseed2.yaml:6-22
────────────────────────────────────────
   6 ┌  ttlSecondsAfterFinished: 10
   7 │  template:
   8 │    metadata:
   9 │      name: my-sql-dump
  10 │    spec:
  11 │      containers:
  12 │      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 └        command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-sql-seed" of job "my-sql-dump" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0110 (LOW): job my-sql-dump in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_job-dataseed2.yaml:4
────────────────────────────────────────
   4 [  name: my-sql-dump
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sql-dump in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job my-sql-dump in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_job-dataseed2.yaml:11-22
────────────────────────────────────────
  11 ┌      containers:
  12 │      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 │          - |
  18 │            git clone https://github.com/DeekshithSN/kubernetes.git
  19 └            mysql -h mysql -u root -padmin -e 'CREATE DATABASE IF NOT EXISTS test';
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-sql-seed in job my-sql-dump (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql_job-dataseed2.yaml:12-17
────────────────────────────────────────
  12 ┌      - name: my-sql-seed
  13 │        image: jlsrly/mysql-git                  
  14 │        command:
  15 │          - 'bash'
  16 │          - '-c'
  17 └          - |
────────────────────────────────────────



mysql_password1_1.yaml (kubernetes)
===================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'mysql' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 mysql_password1_1.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_password1_1.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_password1_1.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_password1_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_password1_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_password1_1.yaml:16-39
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────



mysql_password2_1.yaml (kubernetes)
===================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'mysql' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 mysql_password2_1.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_password2_1.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_password2_1.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_password2_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_password2_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_password2_1.yaml:16-39
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────



mysql_password3_1.yaml (kubernetes)
===================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'mysql' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 mysql_password3_1.yaml:6-34
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_password3_1.yaml:6-34
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_password3_1.yaml:6-34
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_password3_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_password3_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 │         ports:
  25 └         - containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_password3_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_HOST
  23 │           value: '%'
  24 └         ports:
  ..   
────────────────────────────────────────



mysql_password_1.yaml (kubernetes)
==================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'mysql' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 mysql_password_1.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_password_1.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_password_1.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: mysql
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_password_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_password_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mysqldb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_password_1.yaml:16-39
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.7
  18 │         name: mysql
  19 │         args:
  20 │         - --ignore-db-dir=lost+found
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────



mysql_pv.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pv.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath: 
  12 └     path: "/mnt/data"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pv.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath: 
  12 └     path: "/mnt/data"
────────────────────────────────────────



mysql_pv1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pv1.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath: 
  12 └     path: "/mnt/data"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pv1.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath: 
  12 └     path: "/mnt/data"
────────────────────────────────────────



mysql_pv2.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pv2.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath:
  12 └     path: "/mnt/data"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pv2.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath:
  12 └     path: "/mnt/data"
────────────────────────────────────────



mysql_pv3.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pv3.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath: 
  12 └     path: "/mnt/data"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pv3.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath: 
  12 └     path: "/mnt/data"
────────────────────────────────────────



mysql_pv4.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pv4.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath:
  12 └     path: "/mnt/data"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pv4.yaml:6-12
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 20Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   hostPath:
  12 └     path: "/mnt/data"
────────────────────────────────────────



mysql_pvc.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pvc.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pvc.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



mysql_pvc1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pvc1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pvc1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



mysql_pvc2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pvc2.yaml:6-11
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 10Gi
   9 │   accessModes:
  10 │     - ReadWriteOnce
  11 └   storageClassName: manual
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pvc2.yaml:6-11
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 10Gi
   9 │   accessModes:
  10 │     - ReadWriteOnce
  11 └   storageClassName: manual
────────────────────────────────────────



mysql_pvc3.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pvc3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   resources:
   8 │     requests:
   9 │       storage: 10Gi
  10 │   accessModes:
  11 └     - ReadWriteOnce
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pvc3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   resources:
   8 │     requests:
   9 │       storage: 10Gi
  10 │   accessModes:
  11 └     - ReadWriteOnce
────────────────────────────────────────



mysql_pvc4.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_pvc4.yaml:6-11
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 10Gi
   9 │   accessModes:
  10 │     - ReadWriteOnce
  11 └   storageClassName: manual
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_pvc4.yaml:6-11
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 10Gi
   9 │   accessModes:
  10 │     - ReadWriteOnce
  11 └   storageClassName: manual
────────────────────────────────────────



mysql_query.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_query.yaml:9-15
────────────────────────────────────────
   9 ┌   type: NodePort
  10 │   ports:
  11 │   - port: 8001
  12 │     protocol: TCP
  13 │     nodePort: 30001
  14 │   selector:
  15 └     app: mysql-query
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_query.yaml:9-15
────────────────────────────────────────
   9 ┌   type: NodePort
  10 │   ports:
  11 │   - port: 8001
  12 │     protocol: TCP
  13 │     nodePort: 30001
  14 │   selector:
  15 └     app: mysql-query
────────────────────────────────────────



mysql_query_1.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql-query' of Deployment 'mysql-query' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql-query' of Deployment 'mysql-query' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql-query' of 'deployment' 'mysql-query' in 'mysql' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql-query' of Deployment 'mysql-query' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql-query' of Deployment 'mysql-query' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql-query' of Deployment 'mysql-query' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql-query' of Deployment 'mysql-query' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql-query' of Deployment 'mysql-query' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql-query' of Deployment 'mysql-query' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql-query' of Deployment 'mysql-query' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql-query' of Deployment 'mysql-query' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql-query' of Deployment 'mysql-query' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_query_1.yaml:7-37
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: mysql-query
  10 │   replicas: 2
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: mysql-query
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_query_1.yaml:7-37
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: mysql-query
  10 │   replicas: 2
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: mysql-query
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql-query" of deployment "mysql-query" in "mysql" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-query in mysql namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-query in mysql namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_query_1.yaml:16-37
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: tidb-config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql-query in deployment mysql-query (namespace: mysql) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysql_query_1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: mysql-query
  18 │         image: xiang13225080/mysqldemo:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         env:
  21 │         - name: MYSQL_DSN
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: tidb-config
  25 └               key: DSN
  ..   
────────────────────────────────────────



mysql_service.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │     - port: 3306
  11 │   selector:
  12 │     app: mysql
  13 │     tier: database
  14 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │     - port: 3306
  11 │   selector:
  12 │     app: mysql
  13 │     tier: database
  14 └   clusterIP: None
────────────────────────────────────────



mysql_service1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service1.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     targetPort: 3306
  11 │   selector:
  12 └     name: mysql-pod
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service1.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     targetPort: 3306
  11 │   selector:
  12 └     name: mysql-pod
────────────────────────────────────────



mysql_service10.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service10.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     targetPort: 3306
  11 │   selector:
  12 └     name: mysql-pod
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service10.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     targetPort: 3306
  11 │   selector:
  12 └     name: mysql-pod
────────────────────────────────────────



mysql_service3.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service3.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     targetPort: 3306
  11 │   selector:
  12 └     name: mysql-pod
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service3.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 3306
  10 │     targetPort: 3306
  11 │   selector:
  12 └     name: mysql-pod
────────────────────────────────────────



mysql_service4.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service4.yaml:8-15
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: 3306-3306
  10 │     port: 3306
  11 │     protocol: TCP
  12 │     targetPort: 3306
  13 │   selector:
  14 │     app: mysql-deployment
  15 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service4.yaml:8-15
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: 3306-3306
  10 │     port: 3306
  11 │     protocol: TCP
  12 │     targetPort: 3306
  13 │   selector:
  14 │     app: mysql-deployment
  15 └   type: ClusterIP
────────────────────────────────────────



mysql_service5.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service5.yaml:8-15
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: 3306-3306
  10 │     port: 3306
  11 │     protocol: TCP
  12 │     targetPort: 3306
  13 │   selector:
  14 │     app: mysql-deployment
  15 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service5.yaml:8-15
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: 3306-3306
  10 │     port: 3306
  11 │     protocol: TCP
  12 │     targetPort: 3306
  13 │   selector:
  14 │     app: mysql-deployment
  15 └   type: ClusterIP
────────────────────────────────────────



mysql_service6.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service6.yaml:9-16
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: 3306-3306
  11 │     port: 3306
  12 │     protocol: TCP
  13 │     targetPort: 3306
  14 │   selector:
  15 │     app: mysql-deployment
  16 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service6.yaml:9-16
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: 3306-3306
  11 │     port: 3306
  12 │     protocol: TCP
  13 │     targetPort: 3306
  14 │   selector:
  15 │     app: mysql-deployment
  16 └   type: ClusterIP
────────────────────────────────────────



mysql_service7.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service7.yaml:9-16
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: 3306-3306
  11 │     port: 3306
  12 │     protocol: TCP
  13 │     targetPort: 3306
  14 │   selector:
  15 │     app: mysql-deployment
  16 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service7.yaml:9-16
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: 3306-3306
  11 │     port: 3306
  12 │     protocol: TCP
  13 │     targetPort: 3306
  14 │   selector:
  15 │     app: mysql-deployment
  16 └   type: ClusterIP
────────────────────────────────────────



mysql_service8.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service8.yaml:8-13
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: mysql-pod
  10 │     type: clusterIP
  11 │   ports:
  12 │   - port: 3306
  13 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service8.yaml:8-13
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: mysql-pod
  10 │     type: clusterIP
  11 │   ports:
  12 │   - port: 3306
  13 └     targetPort: 3306
────────────────────────────────────────



mysql_service9.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service9.yaml:9-16
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: 3306-3306
  11 │     port: 3306
  12 │     protocol: TCP
  13 │     targetPort: 3306
  14 │   selector:
  15 │     app: mysql-deployment
  16 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service9.yaml:9-16
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: 3306-3306
  11 │     port: 3306
  12 │     protocol: TCP
  13 │     targetPort: 3306
  14 │   selector:
  15 │     app: mysql-deployment
  16 └   type: ClusterIP
────────────────────────────────────────



mysql_service_h.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service_h.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │     - port: 3306
  10 └   clusterIP: None
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service_h.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │     - port: 3306
  10 └   clusterIP: None
────────────────────────────────────────



mysql_service_lb.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_service_lb.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 └   type: LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_service_lb.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 │     targetPort: 3306
  12 └   type: LoadBalancer
────────────────────────────────────────



mysql_statfulset3.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_statfulset3.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 80
  10 │     name: web
  11 │   clusterIP: None
  12 │   selector:
  13 └     app: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_statfulset3.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 80
  10 │     name: web
  11 │   clusterIP: None
  12 │   selector:
  13 └     app: nginx
────────────────────────────────────────



mysql_statfulset3_1.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysql_statfulset3_1.yaml:6-35
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: nginx
   9 │   serviceName: nginx
  10 │   replicas: 3
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysql_statfulset3_1.yaml:6-35
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: nginx
   9 │   serviceName: nginx
  10 │   replicas: 3
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysql_statfulset3_1.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_statfulset3_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysql_statfulset3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       terminationGracePeriodSeconds: 10
  17 │       containers:
  18 │       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────



mysqldb-service.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqldb-service.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │       app: flaskappdb
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 3306
  12 └       targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqldb-service.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │       app: flaskappdb
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 3306
  12 └       targetPort: 3306
────────────────────────────────────────



mysqldb-service1.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqldb-service1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │       app: flaskappdb
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 3306
  12 └       targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqldb-service1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │       app: flaskappdb
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 3306
  12 └       targetPort: 3306
────────────────────────────────────────



mysqldb1_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqldb1_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - port: 3307
  10 │     protocol: TCP
  11 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqldb1_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - port: 3307
  10 │     protocol: TCP
  11 └     targetPort: 3306
────────────────────────────────────────



mysqldb1_2.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql-service' of 'statefulset' 'mysql-statefulset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqldb1_2.yaml:6-52
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   serviceName: mysql
   8 │   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqldb1_2.yaml:6-52
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   serviceName: mysql
   8 │   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql-service" of statefulset "mysql-statefulset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql-statefulset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysqldb1_2.yaml:4
────────────────────────────────────────
   4 [   name: mysql-statefulset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-statefulset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqldb1_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql-statefulset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqldb1_2.yaml:16-43
────────────────────────────────────────
  16 ┌       terminationGracePeriodSeconds: 10
  17 │       containers:
  18 │       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



mysqldb_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqldb_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - port: 3307
  10 │     protocol: TCP
  11 └     targetPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqldb_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: mysql
   8 │   ports:
   9 │   - port: 3307
  10 │     protocol: TCP
  11 └     targetPort: 3306
────────────────────────────────────────



mysqldb_2.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql-service' of 'statefulset' 'mysql-statefulset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql-service' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqldb_2.yaml:6-52
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   serviceName: mysql
   8 │   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqldb_2.yaml:6-52
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   serviceName: mysql
   8 │   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql-service" of statefulset "mysql-statefulset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql-statefulset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysqldb_2.yaml:4
────────────────────────────────────────
   4 [   name: mysql-statefulset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-statefulset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqldb_2.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql-statefulset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqldb_2.yaml:16-43
────────────────────────────────────────
  16 ┌       terminationGracePeriodSeconds: 10
  17 │       containers:
  18 │       - name: mysql-service
  19 │         image: mysql:latest
  20 │         ports:
  21 │         - containerPort: 3306
  22 │           name: db-port
  23 │         env:
  24 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



mysqlpod.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'dbpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'dbpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'dbpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'dbpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'dbpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'dbpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'dbpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'dbpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'dbpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'dbpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'dbpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'dbpod' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 mysqlpod.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 │       name: dbvol
  12 │   volumes:
  13 │   - name: dbvol
  14 └     hostPath:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqlpod.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 │       name: dbvol
  12 │   volumes:
  13 │   - name: dbvol
  14 └     hostPath:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqlpod.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 │       name: dbvol
  12 │   volumes:
  13 │   - name: dbvol
  14 └     hostPath:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "dbpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dbpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysqlpod.yaml:4
────────────────────────────────────────
   4 [   name: dbpod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dbpod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqlpod.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 └       name: dbvol
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dbpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqlpod.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: mysql:5.7
   8 │     name: mysql
   9 │     volumeMounts:
  10 │     - mountPath: /var/lib/mysql
  11 │       name: dbvol
  12 │   volumes:
  13 │   - name: dbvol
  14 └     hostPath:
  ..   
────────────────────────────────────────



mysqlpv.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqlpv.yaml:8-13
────────────────────────────────────────
   8 ┌   accessModes:
   9 │     - ReadWriteOnce
  10 │   capacity:
  11 │     storage: 5Gi
  12 │   hostPath:
  13 └     path: /data/mysql/
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqlpv.yaml:8-13
────────────────────────────────────────
   8 ┌   accessModes:
   9 │     - ReadWriteOnce
  10 │   capacity:
  11 │     storage: 5Gi
  12 │   hostPath:
  13 └     path: /data/mysql/
────────────────────────────────────────



mysqlpvc.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqlpvc.yaml:7-15
────────────────────────────────────────
   7 ┌   resources:
   8 │     requests:
   9 │       storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   selector:
  14 │     matchLabels:
  15 └       app: mysqlpv
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqlpvc.yaml:7-15
────────────────────────────────────────
   7 ┌   resources:
   8 │     requests:
   9 │       storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   selector:
  14 │     matchLabels:
  15 └       app: mysqlpv
────────────────────────────────────────



mysqlpvc_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqlpvc_1.yaml:7-15
────────────────────────────────────────
   7 ┌   resources:
   8 │     requests:
   9 │       storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   selector:
  14 │     matchLabels:
  15 └       app: mysqlpv
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqlpvc_1.yaml:7-15
────────────────────────────────────────
   7 ┌   resources:
   8 │     requests:
   9 │       storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   selector:
  14 │     matchLabels:
  15 └       app: mysqlpv
────────────────────────────────────────



mysqlstatefulset.yaml (kubernetes)
==================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mydb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mydb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mydb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mydb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mydb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mydb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mydb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mydb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mydb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mydb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mydb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysqlstatefulset.yaml:6-68
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   serviceName: mysql-svc
   8 │   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysqlstatefulset.yaml:6-68
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   serviceName: mysql-svc
   8 │   selector:
   9 │     matchLabels:
  10 │       app: mysql
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: mysql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mydb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mydb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mysqlstatefulset.yaml:4
────────────────────────────────────────
   4 [   name: mydb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mydb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mysqlstatefulset.yaml:16-58
────────────────────────────────────────
  16 ┌       terminationGracePeriodSeconds: 10
  17 │       containers:
  18 │         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 └             - name: tpc
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in statefulset mydb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mysqlstatefulset.yaml:18-54
────────────────────────────────────────
  18 ┌         - name: mysql
  19 │           image: grovince/test:db_v12
  20 │           imagePullPolicy: Always
  21 │           args:
  22 │             - "--ignore-db-dir=lost+found"
  23 │           ports:
  24 │             - name: tpc
  25 │               protocol: TCP
  26 └               containerPort: 3306
  ..   
────────────────────────────────────────



mysrvc.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysrvc.yaml:10-24
────────────────────────────────────────
  10 ┌   clusterIP: 10.109.25.28
  11 │   clusterIPs:
  12 │   - 10.109.25.28
  13 │   internalTrafficPolicy: Cluster
  14 │   ipFamilies:
  15 │   - IPv4
  16 │   ipFamilyPolicy: SingleStack
  17 │   ports:
  18 └   - port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysrvc.yaml:10-24
────────────────────────────────────────
  10 ┌   clusterIP: 10.109.25.28
  11 │   clusterIPs:
  12 │   - 10.109.25.28
  13 │   internalTrafficPolicy: Cluster
  14 │   ipFamilies:
  15 │   - IPv4
  16 │   ipFamilyPolicy: SingleStack
  17 │   ports:
  18 └   - port: 8080
  ..   
────────────────────────────────────────



myst-pvc.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myst-pvc.yaml:9-14
────────────────────────────────────────
   9 ┌   storageClassName: longhorn
  10 │   accessModes:
  11 │     - ReadWriteOnce
  12 │   resources:
  13 │     requests:
  14 └       storage: 5Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myst-pvc.yaml:9-14
────────────────────────────────────────
   9 ┌   storageClassName: longhorn
  10 │   accessModes:
  11 │     - ReadWriteOnce
  12 │   resources:
  13 │     requests:
  14 └       storage: 5Gi
────────────────────────────────────────



mysvc.yaml (kubernetes)
=======================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mysvc.yaml:8-16
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: 80-80
  10 │     nodePort: 30009
  11 │     port: 80
  12 │     protocol: TCP
  13 │     targetPort: 80
  14 │   selector:
  15 │     app: mysvc
  16 └   type: NodePort
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mysvc.yaml:8-16
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: 80-80
  10 │     nodePort: 30009
  11 │     port: 80
  12 │     protocol: TCP
  13 │     targetPort: 80
  14 │   selector:
  15 │     app: mysvc
  16 └   type: NodePort
────────────────────────────────────────



myswitzerland.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myswitzerland' of Deployment 'myswitzerland-control' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myswitzerland' of Deployment 'myswitzerland-control' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myswitzerland' of 'deployment' 'myswitzerland-control' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myswitzerland' of Deployment 'myswitzerland-control' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myswitzerland' of Deployment 'myswitzerland-control' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myswitzerland' of Deployment 'myswitzerland-control' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myswitzerland' of Deployment 'myswitzerland-control' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myswitzerland' of Deployment 'myswitzerland-control' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myswitzerland' of Deployment 'myswitzerland-control' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myswitzerland' of Deployment 'myswitzerland-control' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myswitzerland' of Deployment 'myswitzerland-control' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myswitzerland.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       based: html_css
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         based: html_css
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myswitzerland.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       based: html_css
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         based: html_css
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myswitzerland" of deployment "myswitzerland-control" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myswitzerland-control in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myswitzerland.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myswitzerland-control
   5 │   labels:
   6 └     app: website_html_css
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment myswitzerland-control in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myswitzerland-control in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myswitzerland-control in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myswitzerland.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myswitzerland in deployment myswitzerland-control (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 myswitzerland.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myswitzerland
  19 │         image: matveyguralskiy/switzerland_website:V1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



myswitzerland_1.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myswitzerland_1.yaml:10-17
────────────────────────────────────────
  10 ┌   type: ClusterIP
  11 │   selector:
  12 │     based: html_css
  13 │   ports:
  14 │   - name: http
  15 │     protocol: TCP
  16 │     port: 80
  17 └     targetPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myswitzerland_1.yaml:10-17
────────────────────────────────────────
  10 ┌   type: ClusterIP
  11 │   selector:
  12 │     based: html_css
  13 │   ports:
  14 │   - name: http
  15 │     protocol: TCP
  16 │     port: 80
  17 └     targetPort: 80
────────────────────────────────────────



myvd-book.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'myvd-book' in 'openunison' namespace stores secrets in key(s) or value(s) '{"server.activedirectory.ldap.config.proxyPass"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 myvd-book.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



myweb-cm-pod.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myweb-cm-pod' of 'pod' 'myweb-cm-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-cm-pod.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 │       mountPath: /usr/share/nginx/html/
  16 └   volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-cm-pod.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 │       mountPath: /usr/share/nginx/html/
  16 └   volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myweb-cm-pod" of pod "myweb-cm-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myweb-cm-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb-cm-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: myweb-cm-pod
   6 └   name: myweb-cm-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod myweb-cm-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-cm-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-cm-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb-cm-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-cm-pod.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 │       mountPath: /usr/share/nginx/html/
  16 └   volumes:
  ..   
────────────────────────────────────────



myweb-cm-pod1.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myweb-cm-pod' of 'pod' 'myweb-cm-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myweb-cm-pod' of Pod 'myweb-cm-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-cm-pod1.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 │       mountPath: /usr/share/nginx/html/
  16 └   volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-cm-pod1.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 │       mountPath: /usr/share/nginx/html/
  16 └   volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myweb-cm-pod" of pod "myweb-cm-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myweb-cm-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb-cm-pod1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: myweb-cm-pod
   6 └   name: myweb-cm-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod myweb-cm-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-cm-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-cm-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb-cm-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-cm-pod1.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: myweb-cm-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: nginx-index-file
  15 │       mountPath: /usr/share/nginx/html/
  16 └   volumes:
  ..   
────────────────────────────────────────



myweb-pod-exam2.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 103, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myweb-container' of Pod 'myweb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myweb-container' of Pod 'myweb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myweb-container' of 'pod' 'myweb' in 'prodns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myweb-container' of Pod 'myweb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myweb-container' of Pod 'myweb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myweb-container' of Pod 'myweb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myweb-container' of Pod 'myweb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-pod-exam2.yaml:7-19
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 └         cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-pod-exam2.yaml:7-19
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 └         cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myweb-container" of pod "myweb" in "prodns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb in prodns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod-exam2.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 │         cpu: "1"
  16 └         memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb in prodns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod-exam2.yaml:7-19
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: myweb-container
   9 │     image: nginx:1.14
  10 │     resources:
  11 │       requests:
  12 │         cpu: "200m"
  13 │         memory: "500Mi"
  14 │       limits:
  15 └         cpu: "1"
  ..   
────────────────────────────────────────



myweb-pod-svc.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container' of Pod 'myweb1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container' of Pod 'myweb1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container' of 'pod' 'myweb1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container' of Pod 'myweb1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container' of Pod 'myweb1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container' of Pod 'myweb1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container' of Pod 'myweb1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container' of Pod 'myweb1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container' of Pod 'myweb1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container' of Pod 'myweb1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container' of Pod 'myweb1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-pod-svc.yaml:8-14
────────────────────────────────────────
   8 ┌   nodeSelector:
   9 │     kubernetes.io/hostname: k8s-node1
  10 │   containers:
  11 │   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-pod-svc.yaml:8-14
────────────────────────────────────────
   8 ┌   nodeSelector:
   9 │     kubernetes.io/hostname: k8s-node1
  10 │   containers:
  11 │   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container" of pod "myweb1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myweb1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb-pod-svc.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myweb1
   5 │   labels:
   6 └     app: myweb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod-svc.yaml:8-14
────────────────────────────────────────
   8 ┌   nodeSelector:
   9 │     kubernetes.io/hostname: k8s-node1
  10 │   containers:
  11 │   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container in pod myweb1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 myweb-pod-svc.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────



myweb-pod-svc_1.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container' of Pod 'myweb2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container' of Pod 'myweb2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container' of 'pod' 'myweb2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container' of Pod 'myweb2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container' of Pod 'myweb2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container' of Pod 'myweb2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container' of Pod 'myweb2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container' of Pod 'myweb2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container' of Pod 'myweb2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container' of Pod 'myweb2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container' of Pod 'myweb2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-pod-svc_1.yaml:8-14
────────────────────────────────────────
   8 ┌   nodeSelector:
   9 │     kubernetes.io/hostname: k8s-node2
  10 │   containers:
  11 │   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-pod-svc_1.yaml:8-14
────────────────────────────────────────
   8 ┌   nodeSelector:
   9 │     kubernetes.io/hostname: k8s-node2
  10 │   containers:
  11 │   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container" of pod "myweb2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myweb2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb-pod-svc_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myweb2
   5 │   labels:
   6 └     app: myweb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod-svc_1.yaml:8-14
────────────────────────────────────────
   8 ┌   nodeSelector:
   9 │     kubernetes.io/hostname: k8s-node2
  10 │   containers:
  11 │   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container in pod myweb2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 myweb-pod-svc_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container
  12 │     image: dbgurum/k8s-lab:v1.0
  13 │     ports:
  14 └     - containerPort: 8080
────────────────────────────────────────



myweb-pod-svc_2.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-pod-svc_2.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: myweb
   8 │   ports:
   9 │   - port: 9000
  10 │     targetPort: 8080
  11 │     nodePort: 30090
  12 └   type: NodePort
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-pod-svc_2.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: myweb
   8 │   ports:
   9 │   - port: 9000
  10 │     targetPort: 8080
  11 │     nodePort: 30090
  12 └   type: NodePort
────────────────────────────────────────



myweb-pod.yaml (kubernetes)
===========================
Tests: 132 (SUCCESSES: 97, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 23, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-source' of Pod 'myweb-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webserver' of Pod 'myweb-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-source' of 'pod' 'myweb-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webserver' of 'pod' 'myweb-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web-source' of Pod 'myweb-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-pod.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 │       mountPath: /source
  15 │   - name: webserver
  16 └     image: nginx:1.25.3-alpine
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-pod.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 │       mountPath: /source
  15 │   - name: webserver
  16 └     image: nginx:1.25.3-alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-source" of pod "myweb-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webserver" of pod "myweb-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myweb-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myweb-pod
   5 │   labels:
   6 └     app: myweb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 │       mountPath: /source
  15 │   - name: webserver
  16 └     image: nginx:1.25.3-alpine
  ..   
────────────────────────────────────────



myweb-pod1.yaml (kubernetes)
============================
Tests: 132 (SUCCESSES: 97, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 23, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-source' of Pod 'myweb-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webserver' of Pod 'myweb-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-source' of 'pod' 'myweb-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webserver' of 'pod' 'myweb-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web-source' of Pod 'myweb-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-source' of Pod 'myweb-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webserver' of Pod 'myweb-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-pod1.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 │       mountPath: /source
  15 │   - name: webserver
  16 └     image: nginx:1.25.3-alpine
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-pod1.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 │       mountPath: /source
  15 │   - name: webserver
  16 └     image: nginx:1.25.3-alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-source" of pod "myweb-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webserver" of pod "myweb-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myweb-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb-pod1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myweb-pod
   5 │   labels:
   6 └     app: myweb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod1.yaml:15-19
────────────────────────────────────────
  15 ┌   - name: webserver
  16 │     image: nginx:1.25.3-alpine
  17 │     volumeMounts:
  18 │     - name: source-volume
  19 └       mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 └       mountPath: /source
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-pod1.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: web-source
  10 │     image: alpine
  11 │     args: ["tail", "-f", "/dev/null"]
  12 │     volumeMounts:
  13 │     - name: source-volume
  14 │       mountPath: /source
  15 │   - name: webserver
  16 └     image: nginx:1.25.3-alpine
  ..   
────────────────────────────────────────



myweb-rq1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 102, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myweb-rq1' of 'pod' 'myweb-rq1' in 'dev-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-rq1.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-rq1.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myweb-rq1" of pod "myweb-rq1" in "dev-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-rq1 in dev-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-rq1.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb-rq1 in dev-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-rq1.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────



myweb-rq11.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 102, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myweb-rq1' of 'pod' 'myweb-rq1' in 'dev-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-rq11.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-rq11.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myweb-rq1" of pod "myweb-rq1" in "dev-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-rq1 in dev-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-rq11.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb-rq1 in dev-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-rq11.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.5Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.5Gi
────────────────────────────────────────



myweb-rq2.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 102, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myweb-rq1' of 'pod' 'myweb-rq2' in 'dev-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-rq2.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-rq2.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myweb-rq1" of pod "myweb-rq2" in "dev-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-rq2 in dev-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-rq2.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb-rq2 in dev-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-rq2.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx
   9 │     name: myweb-rq1
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m"
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m"
  16 └         memory: 0.8Gi
────────────────────────────────────────



myweb-rq21.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 102, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myweb-rq1' of 'pod' 'myweb-rq2' in 'dev-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myweb-rq1' of Pod 'myweb-rq2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myweb-rq1' of Pod 'myweb-rq2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-rq21.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-rq21.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myweb-rq1" of pod "myweb-rq2" in "dev-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb-rq2 in dev-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-rq21.yaml:8-16
────────────────────────────────────────
   8 ┌   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb-rq2 in dev-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-rq21.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx 
   9 │     name: myweb-rq1 
  10 │     resources:
  11 │       requests:
  12 │         cpu: "50m" 
  13 │         memory: 0.8Gi
  14 │       limits:
  15 │         cpu: "100m" 
  16 └         memory: 0.8Gi
────────────────────────────────────────



myweb-static-pod.yaml (kubernetes)
==================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod' of Pod 'pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod' of Pod 'pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod' of 'pod' 'pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod' of Pod 'pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod' of Pod 'pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pod' of Pod 'pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod' of Pod 'pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod' of Pod 'pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod' of Pod 'pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod' of Pod 'pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod' of Pod 'pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod' of Pod 'pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb-static-pod.yaml:9-18
────────────────────────────────────────
   9 ┌   containers:
  10 │   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 │     resources: {}
  17 │   dnsPolicy: ClusterFirst
  18 └   restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb-static-pod.yaml:9-18
────────────────────────────────────────
   9 ┌   containers:
  10 │   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 │     resources: {}
  17 │   dnsPolicy: ClusterFirst
  18 └   restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod" of pod "pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb-static-pod.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: pod
   7 └   name: pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-static-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb-static-pod.yaml:9-18
────────────────────────────────────────
   9 ┌   containers:
  10 │   - args:
  11 │     - myweb
  12 │     image: nginx
  13 │     name: pod
  14 │     ports:
  15 │     - containerPort: 80
  16 │     resources: {}
  17 │   dnsPolicy: ClusterFirst
  18 └   restartPolicy: Always
────────────────────────────────────────



myweb.yaml (kubernetes)
=======================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myweb' of Deployment 'myweb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myweb' of Deployment 'myweb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myweb' of 'deployment' 'myweb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myweb' of Deployment 'myweb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myweb' of Deployment 'myweb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myweb' of Deployment 'myweb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myweb' of Deployment 'myweb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myweb' of Deployment 'myweb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myweb' of Deployment 'myweb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myweb' of Deployment 'myweb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myweb' of Deployment 'myweb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myweb' of Deployment 'myweb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb.yaml:6-24
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: myweb
   9 │   replicas: 2
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: myweb
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb.yaml:6-24
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: myweb
   9 │   replicas: 2
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: myweb
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myweb" of deployment "myweb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myweb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb.yaml:4
────────────────────────────────────────
   4 [   name: myweb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myweb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myweb in deployment myweb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 myweb.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: myweb
  17 │         image: beck123/myweb
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             scheme: HTTP
  21 │             path: /healthy
  22 │             port: 5000
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
────────────────────────────────────────



myweb1-pod.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'myweb1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'myweb1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'myweb1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'myweb1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'myweb1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'myweb1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'myweb1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'myweb1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'myweb1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'myweb1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'myweb1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb1-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb1-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "myweb1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myweb1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb1-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myweb1
   5 │   labels:
   6 └     app: myweb1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod myweb1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb1-pod.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb1-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-container
  10 │     image: nginx:1.25.3-alpine
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



myweb1-svc.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb1-svc.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: myweb1
   8 │   ports:
   9 │     - port: 8001
  10 │       targetPort: 80
  11 │   externalIPs:
  12 └     - 192.168.56.103
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb1-svc.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: myweb1
   8 │   ports:
   9 │     - port: 8001
  10 │       targetPort: 80
  11 │   externalIPs:
  12 └     - 192.168.56.103
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'myweb-svc' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



myweb1_1.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb1_1.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 80
  11 │   selector:
  12 └     app: myweb
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb1_1.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 80
  11 │   selector:
  12 └     app: myweb
────────────────────────────────────────



myweb1_2.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'myweb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'myweb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'myweb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'myweb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'myweb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'myweb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'myweb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'myweb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb1_2.yaml:9-31
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: myweb
  13 │       version: v1
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: myweb
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb1_2.yaml:9-31
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: myweb
  13 │       version: v1
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: myweb
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "myweb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myweb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb1_2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myweb
   5 │   labels:
   6 │     app: myweb
   7 └     version: v1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment myweb in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb1_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myweb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb1_2.yaml:20-31
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 │         - containerPort: 80
  28 └       volumes:
  ..   
────────────────────────────────────────



myweb2-pod.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myweb2' of Pod 'myweb2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myweb2' of Pod 'myweb2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myweb2' of 'pod' 'myweb2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myweb2' of Pod 'myweb2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myweb2' of Pod 'myweb2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myweb2' of Pod 'myweb2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myweb2' of Pod 'myweb2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myweb2' of Pod 'myweb2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myweb2' of Pod 'myweb2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myweb2' of Pod 'myweb2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myweb2' of Pod 'myweb2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb2-pod.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │   dnsPolicy: ClusterFirst
  16 └   restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb2-pod.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │   dnsPolicy: ClusterFirst
  16 └   restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myweb2" of pod "myweb2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myweb2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb2-pod.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: myweb2
   7 └   name: myweb2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod myweb2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb2-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myweb2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb2-pod.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx:1.25.3-alpine
  11 │     name: myweb2
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │   dnsPolicy: ClusterFirst
  16 └   restartPolicy: Always
────────────────────────────────────────



myweb2.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb2.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: nginx-app
   9 │     type: front-end
  10 │   ports:
  11 │   - port: 80
  12 │     targetPort: 80
  13 └     nodePort: 30011
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb2.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: nginx-app
   9 │     type: front-end
  10 │   ports:
  11 │   - port: 80
  12 │     targetPort: 80
  13 └     nodePort: 30011
────────────────────────────────────────



myweb2_1.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp-container' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp-container' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp-container' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp-container' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp-container' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp-container' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp-container' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp-container' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp-container' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb2_1.yaml:9-22
────────────────────────────────────────
   9 ┌   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: nginx-app
  13 │       type: front-end
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: nginx-app
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb2_1.yaml:9-22
────────────────────────────────────────
   9 ┌   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: nginx-app
  13 │       type: front-end
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: nginx-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp-container" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb2_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 │     app: nginx-app
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb2_1.yaml:20-22
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container webapp-container in deployment nginx-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 myweb2_1.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: webapp-container
  22 └         image: aymenzarour/webapp:latest
────────────────────────────────────────



myweb2_2.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb2_2.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: nginx-app
   9 │     type: front-end
  10 │   ports:
  11 │   - port: 80
  12 │     targetPort: 80
  13 └     nodePort: 30011
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb2_2.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: nginx-app
   9 │     type: front-end
  10 │   ports:
  11 │   - port: 80
  12 │     targetPort: 80
  13 └     nodePort: 30011
────────────────────────────────────────



myweb3_1.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb3_1.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 80
  11 │   selector:
  12 └     app: myweb
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb3_1.yaml:8-12
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 80
  11 │   selector:
  12 └     app: myweb
────────────────────────────────────────



myweb3_2.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'myweb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'myweb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'myweb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'myweb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'myweb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'myweb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'myweb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'myweb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb3_2.yaml:9-31
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: myweb
  13 │       version: v1
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: myweb
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb3_2.yaml:9-31
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: myweb
  13 │       version: v1
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: myweb
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "myweb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myweb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb3_2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myweb
   5 │   labels:
   6 │     app: myweb
   7 └     version: v1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment myweb in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb3_2.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myweb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb3_2.yaml:20-31
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: nginx
  22 │         name: nginx
  23 │         volumeMounts:
  24 │         - name: nginx-config
  25 │           mountPath: /etc/nginx/conf.d/
  26 │         ports:
  27 │         - containerPort: 80
  28 └       volumes:
  ..   
────────────────────────────────────────



myweb4.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp' of Deployment 'webapp-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp' of Deployment 'webapp-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp' of 'deployment' 'webapp-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp' of Deployment 'webapp-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp' of Deployment 'webapp-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp' of Deployment 'webapp-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp' of Deployment 'webapp-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp' of Deployment 'webapp-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp' of Deployment 'webapp-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp' of Deployment 'webapp-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb4.yaml:8-46
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: webapp
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: webapp
  16 └         app.kubernetes.io/name: myweb
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb4.yaml:8-46
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: webapp
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: webapp
  16 └         app.kubernetes.io/name: myweb
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp" of deployment "webapp-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment webapp-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 myweb4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: webapp-deployment
   5 │   labels:
   6 └     app: webapp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment webapp-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 │           limits:
  27 └             memory: "1Gi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 myweb4.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: webapp
  20 │         image: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │         resources:
  24 │           requests:
  25 │             memory: "300Mi"
  26 └           limits:
  ..   
────────────────────────────────────────



myweb_1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 myweb_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: myweb
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 5000
  11 └     targetPort: 5000
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 myweb_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: myweb
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 5000
  11 └     targetPort: 5000
────────────────────────────────────────



mywebdeploy.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'myweb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'myweb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'myweb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'myweb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'myweb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'myweb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'myweb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'myweb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'myweb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebdeploy.yaml:9-30
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: myweb
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebdeploy.yaml:9-30
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: myweb
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "myweb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myweb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mywebdeploy.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: myweb
   7 └   name: myweb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myweb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebdeploy.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 │         volumeMounts: 
  29 │         - mountPath: /usr/share/nginx/html
  30 └           name: cmvol
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myweb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebdeploy.yaml:20-30
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: cmvol
  22 │         configMap: 
  23 │           name: myindex
  24 │       containers:
  25 │       - image: nginx
  26 │         name: nginx
  27 │         resources: {}
  28 └         volumeMounts: 
  ..   
────────────────────────────────────────



mywebpdb.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebpdb.yaml:6-9
────────────────────────────────────────
   6 ┌   minAvailable: 4
   7 │   selector:
   8 │     matchLabels:
   9 └       app: myweb
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebpdb.yaml:6-9
────────────────────────────────────────
   6 ┌   minAvailable: 4
   7 │   selector:
   8 │     matchLabels:
   9 └       app: myweb
────────────────────────────────────────



mywebserver-test.yaml (kubernetes)
==================================
Tests: 117 (SUCCESSES: 95, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 13, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-website-test' of Deployment 'mywebsite-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-website-test' of Deployment 'mywebsite-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-website-test' of 'deployment' 'mywebsite-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-website-test' of Deployment 'mywebsite-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-website-test' of Deployment 'mywebsite-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'simple-website-test' of Deployment 'mywebsite-test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-website-test' of Deployment 'mywebsite-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-website-test' of Deployment 'mywebsite-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-website-test' of Deployment 'mywebsite-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-website-test' of Deployment 'mywebsite-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-website-test' of Deployment 'mywebsite-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-website-test' of Deployment 'mywebsite-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebserver-test.yaml:10-23
────────────────────────────────────────
  10 ┌   replicas: 3
  11 │   selector:
  12 │     matchLabels:
  13 │        based: apache-testing   #Label tag for Pods
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │        based: apache-testing
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebserver-test.yaml:10-23
────────────────────────────────────────
  10 ┌   replicas: 3
  11 │   selector:
  12 │     matchLabels:
  13 │        based: apache-testing   #Label tag for Pods
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │        based: apache-testing
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-website-test" of deployment "mywebsite-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mywebsite-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mywebserver-test.yaml:4-8
────────────────────────────────────────
   4 ┌   name: mywebsite-test
   5 │   labels:
   6 │      env: staging
   7 │      type: website
   8 └      owner: Matvey_Guralskiy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mywebsite-test in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mywebsite-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mywebsite-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebserver-test.yaml:19-23
────────────────────────────────────────
  19 ┌       containers:
  20 │           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-website-test in deployment mywebsite-test (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mywebserver-test.yaml:20-23
────────────────────────────────────────
  20 ┌           - name: simple-website-test
  21 │             image: matveyguralskiy/simple_website:latest
  22 │             ports:
  23 └                - containerPort: 80
────────────────────────────────────────



mywebserver.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-website' of Deployment 'mywebsite' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-website' of Deployment 'mywebsite' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-website' of 'deployment' 'mywebsite' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-website' of Deployment 'mywebsite' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-website' of Deployment 'mywebsite' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-website' of Deployment 'mywebsite' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-website' of Deployment 'mywebsite' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-website' of Deployment 'mywebsite' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-website' of Deployment 'mywebsite' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-website' of Deployment 'mywebsite' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-website' of Deployment 'mywebsite' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebserver.yaml:10-23
────────────────────────────────────────
  10 ┌   replicas: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       based: apache
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         based: apache
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebserver.yaml:10-23
────────────────────────────────────────
  10 ┌   replicas: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       based: apache
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         based: apache
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-website" of deployment "mywebsite" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mywebsite in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mywebserver.yaml:4-8
────────────────────────────────────────
   4 ┌   name: mywebsite
   5 │   labels:
   6 │     env: staging
   7 │     type: website
   8 └     owner: Matvey_Guralskiy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mywebsite in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mywebsite in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mywebsite in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebserver.yaml:19-23
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-website in deployment mywebsite (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mywebserver.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: simple-website
  21 │         image: matveyguralskiy/simple_website:V2.0
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────



mywebserver_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebserver_1.yaml:6-24
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: myapp-autoscaling
  10 │   minReplicas: 2
  11 │   maxReplicas: 4
  12 │   metrics:
  13 │   - type: Resource
  14 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebserver_1.yaml:6-24
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: myapp-autoscaling
  10 │   minReplicas: 2
  11 │   maxReplicas: 4
  12 │   metrics:
  13 │   - type: Resource
  14 └     resource:
  ..   
────────────────────────────────────────



mywebsite.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mywebsite' of 'deployment' 'mywebsite-control' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebsite.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       based: html_css_js
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         based: html_css_js
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebsite.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       based: html_css_js
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         based: html_css_js
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mywebsite" of deployment "mywebsite-control" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mywebsite-control in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mywebsite.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mywebsite-control
   5 │   labels:
   6 └     app: website_html
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mywebsite-control in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mywebsite-control in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mywebsite-control in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebsite.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mywebsite in deployment mywebsite-control (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mywebsite.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/simple_website:V2.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



mywebsite1.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 95, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 13, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-apache' of Pod 'mywebsite' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-apache' of Pod 'mywebsite' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-apache' of 'pod' 'mywebsite' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-apache' of Pod 'mywebsite' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-apache' of Pod 'mywebsite' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container-apache' of Pod 'mywebsite' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-apache' of Pod 'mywebsite' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-apache' of Pod 'mywebsite' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-apache' of Pod 'mywebsite' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-apache' of Pod 'mywebsite' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-apache' of Pod 'mywebsite' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-apache' of Pod 'mywebsite' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebsite1.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebsite1.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-apache" of pod "mywebsite" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mywebsite in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mywebsite1.yaml:4-8
────────────────────────────────────────
   4 ┌   name: mywebsite
   5 │   labels:
   6 │     env: staging
   7 │     app: simple_website
   8 └     owner: Matvey_Guralskiy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod mywebsite in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mywebsite in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mywebsite in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebsite1.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container-apache in pod mywebsite (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mywebsite1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: container-apache
  12 │     image: matveyguralskiy/simple_website:latest
  13 │     ports:
  14 └     - containerPort: 80
────────────────────────────────────────



mywebsite2.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 95, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 13, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mywebsite' of 'deployment' 'mywebsite-control' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mywebsite' of Deployment 'mywebsite-control' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mywebsite' of Deployment 'mywebsite-control' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebsite2.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       based: apache_php
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         based: apache_php
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebsite2.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       based: apache_php
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         based: apache_php
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mywebsite" of deployment "mywebsite-control" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mywebsite-control in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mywebsite2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mywebsite-control
   5 │   labels:
   6 └     app: website_php
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mywebsite-control in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mywebsite-control in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mywebsite-control in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mywebsite2.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mywebsite in deployment mywebsite-control (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mywebsite2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mywebsite
  19 │         image: matveyguralskiy/apache_php:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



mywebsite2_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebsite2_1.yaml:6-24
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: mywebsite-control
  10 │   minReplicas: 2
  11 │   maxReplicas: 4
  12 │   metrics:
  13 │   - type: Resource
  14 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebsite2_1.yaml:6-24
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: mywebsite-control
  10 │   minReplicas: 2
  11 │   maxReplicas: 4
  12 │   metrics:
  13 │   - type: Resource
  14 └     resource:
  ..   
────────────────────────────────────────



mywebsite2_2.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebsite2_2.yaml:10-17
────────────────────────────────────────
  10 ┌   selector:
  11 │     based: apache_php
  12 │   ports:
  13 │   - name: website-listener
  14 │     protocol: TCP
  15 │     port: 80
  16 │     targetPort: 80
  17 └   type: LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebsite2_2.yaml:10-17
────────────────────────────────────────
  10 ┌   selector:
  11 │     based: apache_php
  12 │   ports:
  13 │   - name: website-listener
  14 │     protocol: TCP
  15 │     port: 80
  16 │     targetPort: 80
  17 └   type: LoadBalancer
────────────────────────────────────────



mywebsite_1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywebsite_1.yaml:10-17
────────────────────────────────────────
  10 ┌   type: ClusterIP
  11 │   selector:
  12 │     based: html_css_js
  13 │   ports:
  14 │   - name: http
  15 │     protocol: TCP
  16 │     port: 80
  17 └     targetPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywebsite_1.yaml:10-17
────────────────────────────────────────
  10 ┌   type: ClusterIP
  11 │   selector:
  12 │     based: html_css_js
  13 │   ports:
  14 │   - name: http
  15 │     protocol: TCP
  16 │     port: 80
  17 └     targetPort: 80
────────────────────────────────────────



mywordpress-service.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywordpress-service.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: "8080"
  14 │     port: 8080
  15 │     targetPort: 80
  16 │   selector:
  17 └     io.kompose.service: mywordpress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywordpress-service.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: "8080"
  14 │     port: 8080
  15 │     targetPort: 80
  16 │   selector:
  17 └     io.kompose.service: mywordpress
────────────────────────────────────────



mywordpress-service1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mywordpress-service1.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: "8888"
  14 │     port: 8888
  15 │     targetPort: 80
  16 │   selector:
  17 └     io.kompose.service: mywordpress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 mywordpress-service1.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: "8888"
  14 │     port: 8888
  15 │     targetPort: 80
  16 │   selector:
  17 └     io.kompose.service: mywordpress
────────────────────────────────────────



n8n-claim0-persistentvolumeclaim.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-claim0-persistentvolumeclaim.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 2Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-claim0-persistentvolumeclaim.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 2Gi
────────────────────────────────────────



n8n-deployment1.yaml (kubernetes)
=================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'n8n' of Deployment 'n8n' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'n8n' of Deployment 'n8n' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-permissions' of Deployment 'n8n' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'n8n' of 'deployment' 'n8n' in 'n8n' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-permissions' of 'deployment' 'n8n' in 'n8n' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'n8n' of Deployment 'n8n' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'n8n' of Deployment 'n8n' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-deployment1.yaml:9-81
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       service: n8n
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-deployment1.yaml:9-81
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       service: n8n
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "n8n" of deployment "n8n" in "n8n" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-permissions" of deployment "n8n" in "n8n" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container n8n in n8n namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container n8n in n8n namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment1.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment n8n in n8n namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment1.yaml:20-81
────────────────────────────────────────
  20 ┌       initContainers:
  21 │         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 │               mountPath: /data
  27 │       containers:
  28 └         - command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container n8n in deployment n8n (namespace: n8n) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 n8n-deployment1.yaml:28-70
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: N8N_METRICS
  35 │               value: "true"
  36 └             - name: DB_TYPE
  ..   
────────────────────────────────────────



n8n-deployment2.yaml (kubernetes)
=================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'n8n' of Deployment 'n8n' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'n8n' of Deployment 'n8n' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-permissions' of Deployment 'n8n' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'n8n' of 'deployment' 'n8n' in 'n8n' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-permissions' of 'deployment' 'n8n' in 'n8n' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'n8n' of Deployment 'n8n' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'n8n' of Deployment 'n8n' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-deployment2.yaml:9-78
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       service: n8n
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-deployment2.yaml:9-78
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       service: n8n
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "n8n" of deployment "n8n" in "n8n" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-permissions" of deployment "n8n" in "n8n" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container n8n in n8n namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container n8n in n8n namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment n8n in n8n namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment2.yaml:20-78
────────────────────────────────────────
  20 ┌       initContainers:
  21 │         - name: volume-permissions
  22 │           image: busybox:1.36
  23 │           command: ["sh", "-c", "chown 1000:1000 /data"]
  24 │           volumeMounts:
  25 │             - name: n8n-claim0
  26 │               mountPath: /data
  27 │       containers:
  28 └         - command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container n8n in deployment n8n (namespace: n8n) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 n8n-deployment2.yaml:28-67
────────────────────────────────────────
  28 ┌         - command:
  29 │             - /bin/sh
  30 │           args:
  31 │             - -c
  32 │             - sleep 5; n8n start
  33 │           env:
  34 │             - name: DB_TYPE
  35 │               value: postgresdb
  36 └             - name: DB_POSTGRESDB_HOST
  ..   
────────────────────────────────────────



n8n-deployment_2.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-init' in 'n8n' namespace stores secrets in key(s) or value(s) '{"if [ -n \"${POSTGRES_NON_ROOT_USER"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



n8n-deployment_3.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-deployment_3.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 2Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-deployment_3.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 2Gi
────────────────────────────────────────



n8n-deployment_4.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-deployment_4.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 30Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-deployment_4.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 30Gi
────────────────────────────────────────



n8n-deployment_5.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-deployment_5.yaml:10-21
────────────────────────────────────────
  10 ┌   ingressClassName: nginx
  11 │   rules:
  12 │   - host: n8n.aliaktas.dev
  13 │     http:
  14 │       paths:
  15 │       - path: /
  16 │         pathType: Prefix
  17 │         backend:
  18 └           service:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-deployment_5.yaml:10-21
────────────────────────────────────────
  10 ┌   ingressClassName: nginx
  11 │   rules:
  12 │   - host: n8n.aliaktas.dev
  13 │     http:
  14 │       paths:
  15 │       - path: /
  16 │         pathType: Prefix
  17 │         backend:
  18 └           service:
  ..   
────────────────────────────────────────



n8n-deployment_6.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-deployment_6.yaml:9-16
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   ports:
  11 │   - name: '5678'
  12 │     port: 5678
  13 │     targetPort: 5678
  14 │     protocol: TCP
  15 │   selector:
  16 └     service: n8n
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-deployment_6.yaml:9-16
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   ports:
  11 │   - name: '5678'
  12 │     port: 5678
  13 │     targetPort: 5678
  14 │     protocol: TCP
  15 │   selector:
  16 └     service: n8n
────────────────────────────────────────



n8n-deployment_7.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-deployment_7.yaml:9-16
────────────────────────────────────────
   9 ┌   clusterIP: None
  10 │   ports:
  11 │   - name: '5432'
  12 │     port: 5432
  13 │     targetPort: 5432
  14 │     protocol: TCP
  15 │   selector:
  16 └     service: postgres-n8n
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-deployment_7.yaml:9-16
────────────────────────────────────────
   9 ┌   clusterIP: None
  10 │   ports:
  11 │   - name: '5432'
  12 │     port: 5432
  13 │     targetPort: 5432
  14 │     protocol: TCP
  15 │   selector:
  16 └     service: postgres-n8n
────────────────────────────────────────



n8n-deployment_8.yaml (kubernetes)
==================================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 20, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'n8n' of Deployment 'n8n' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'n8n' of Deployment 'n8n' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-permissions' of Deployment 'n8n' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'n8n' of 'deployment' 'n8n' in 'n8n' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-permissions' of 'deployment' 'n8n' in 'n8n' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'n8n' of Deployment 'n8n' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-permissions' of Deployment 'n8n' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-deployment_8.yaml:9-81
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       service: n8n
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-deployment_8.yaml:9-81
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       service: n8n
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "n8n" of deployment "n8n" in "n8n" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-permissions" of deployment "n8n" in "n8n" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container n8n in n8n namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container n8n in n8n namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment_8.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 │         - name: n8n-data
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment n8n in n8n namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment_8.yaml:20-81
────────────────────────────────────────
  20 ┌       initContainers:
  21 │       - name: volume-permissions
  22 │         image: busybox:1.36
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown 1000:1000 /data
  27 │         volumeMounts:
  28 └         - name: n8n-data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container n8n in deployment n8n (namespace: n8n) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 n8n-deployment_8.yaml:31-70
────────────────────────────────────────
  31 ┌       - image: aliaktas/n8n:1.27.1
  32 │         name: n8n
  33 │         command:
  34 │         - /bin/sh
  35 │         args:
  36 │         - -c
  37 │         - sleep 5; n8n start
  38 │         env:
  39 └         - name: DB_TYPE
  ..   
────────────────────────────────────────



n8n-deployment_9.yaml (kubernetes)
==================================
Tests: 117 (SUCCESSES: 103, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'n8n' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-deployment_9.yaml:9-81
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       service: postgres-n8n
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxSurge: 1
  16 │       maxUnavailable: 1
  17 └     type: RollingUpdate
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-deployment_9.yaml:9-81
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       service: postgres-n8n
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxSurge: 1
  16 │       maxUnavailable: 1
  17 └     type: RollingUpdate
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "n8n" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in n8n namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment_9.yaml:24-69
────────────────────────────────────────
  24 ┌       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 │             cpu: '1'
  32 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in n8n namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n-deployment_9.yaml:23-81
────────────────────────────────────────
  23 ┌       containers:
  24 │       - image: postgres:11
  25 │         name: postgres
  26 │         resources:
  27 │           limits:
  28 │             cpu: '4'
  29 │             memory: 4Gi
  30 │           requests:
  31 └             cpu: '1'
  ..   
────────────────────────────────────────



n8n-pvc.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-pvc.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 2Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-pvc.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 2Gi
────────────────────────────────────────



n8n-service.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-service.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │     - name: "5678"
  11 │       port: 5678
  12 │       targetPort: 5678
  13 │       protocol: TCP
  14 │   selector:
  15 └     service: n8n
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-service.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │     - name: "5678"
  11 │       port: 5678
  12 │       targetPort: 5678
  13 │       protocol: TCP
  14 │   selector:
  15 └     service: n8n
────────────────────────────────────────



n8n-service1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n-service1.yaml:9-16
────────────────────────────────────────
   9 ┌   type: LoadBalancer
  10 │   ports:
  11 │     - name: "5678"
  12 │       port: 5678
  13 │       targetPort: 5678
  14 │       protocol: TCP
  15 │   selector:
  16 └     service: n8n
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n-service1.yaml:9-16
────────────────────────────────────────
   9 ┌   type: LoadBalancer
  10 │   ports:
  11 │     - name: "5678"
  12 │       port: 5678
  13 │       targetPort: 5678
  14 │       protocol: TCP
  15 │   selector:
  16 └     service: n8n
────────────────────────────────────────



n8n2.yaml (kubernetes)
======================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'n8n-secret' in 'science' namespace stores sensitive contents in key(s) or value(s) '{"DB_POSTGRESDB_PORT", "N8N_ENCRYPTION_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'n8n-secret' in 'science' namespace stores secrets in key(s) or value(s) '{"DB_POSTGRESDB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



n8n2_1.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'n8n' of Deployment 'n8n' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'n8n' of Deployment 'n8n' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'n8n' of 'deployment' 'n8n' in 'science' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'n8n' of Deployment 'n8n' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'n8n' of Deployment 'n8n' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'n8n' of Deployment 'n8n' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'n8n' of Deployment 'n8n' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n2_1.yaml:7-25
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: n8n
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: n8n
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n2_1.yaml:7-25
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: n8n
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: n8n
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "n8n" of deployment "n8n" in "science" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container n8n in science namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment n8n in science namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: n8n-secret
  25 └       dnsPolicy: ClusterFirst
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container n8n in deployment n8n (namespace: science) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 n8n2_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: n8n
  18 │         image: docker.n8n.io/n8nio/n8n
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 5678
  22 │         envFrom:
  23 │         - configMapRef:
  24 └             name: n8n-secret
────────────────────────────────────────



n8n2_2.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   selector:
   9 │     app: n8n
  10 │   ports:
  11 │   - name: n8n-http
  12 │     port: 80
  13 │     targetPort: 5678
  14 │     protocol: TCP
  15 └   externalTrafficPolicy: Local
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   selector:
   9 │     app: n8n
  10 │   ports:
  11 │   - name: n8n-http
  12 │     port: 80
  13 │     targetPort: 5678
  14 │     protocol: TCP
  15 └   externalTrafficPolicy: Local
────────────────────────────────────────



n8n3_1.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n3_1.yaml:11-16
────────────────────────────────────────
  11 ┌   accessModes:
  12 │   - ReadWriteOnce
  13 │   storageClassName: longhorn
  14 │   resources:
  15 │     requests:
  16 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n3_1.yaml:11-16
────────────────────────────────────────
  11 ┌   accessModes:
  12 │   - ReadWriteOnce
  13 │   storageClassName: longhorn
  14 │   resources:
  15 │     requests:
  16 └       storage: 1Gi
────────────────────────────────────────



n8n3_2.yaml (kubernetes)
========================
Tests: 119 (SUCCESSES: 97, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 15, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volume-permissions' of StatefulSet 'n8n' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-permissions' of StatefulSet 'n8n' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-permissions' of 'statefulset' 'n8n' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-permissions' of StatefulSet 'n8n' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-permissions' of StatefulSet 'n8n' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-permissions' of StatefulSet 'n8n' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-permissions' of StatefulSet 'n8n' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-permissions' of StatefulSet 'n8n' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-permissions' of StatefulSet 'n8n' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'n8n' of StatefulSet 'n8n' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n3_2.yaml:30-71
────────────────────────────────────────
  30 ┌       - name: n8n
  31 │         image: docker.n8n.io/n8nio/n8n:1.83.2
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: n8n-secret
  35 │         env:
  36 │         - name: TZ
  37 │           value: America/Montreal
  38 └         - name: N8N_BASIC_AUTH_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-permissions' of StatefulSet 'n8n' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'n8n' of StatefulSet 'n8n' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n3_2.yaml:30-71
────────────────────────────────────────
  30 ┌       - name: n8n
  31 │         image: docker.n8n.io/n8nio/n8n:1.83.2
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: n8n-secret
  35 │         env:
  36 │         - name: TZ
  37 │           value: America/Montreal
  38 └         - name: N8N_BASIC_AUTH_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-permissions' of StatefulSet 'n8n' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n3_2.yaml:6-71
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: n8n
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: n8n
  13 │     spec:
  14 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n3_2.yaml:6-71
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: n8n
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: n8n
  13 │     spec:
  14 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-permissions" of statefulset "n8n" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset n8n in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 n8n3_2.yaml:4
────────────────────────────────────────
   4 [   name: n8n
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container n8n in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n3_2.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 │         - sh
  23 │         - -c
  24 │         - mkdir -p /data/.cache /data/.n8n && chown -R 1000:1000 /data && chmod 600
  25 │           /data/.n8n/config || true
  26 │         volumeMounts:
  27 │         - name: data
  28 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset n8n in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 n8n3_2.yaml:14-71
────────────────────────────────────────
  14 ┌       volumes:
  15 │       - name: data
  16 │         persistentVolumeClaim:
  17 │           claimName: n8n-pvc
  18 │       initContainers:
  19 │       - name: volume-permissions
  20 │         image: busybox:1.37
  21 │         command:
  22 └         - sh
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container n8n in statefulset n8n (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 n8n3_2.yaml:30-71
────────────────────────────────────────
  30 ┌       - name: n8n
  31 │         image: docker.n8n.io/n8nio/n8n:1.83.2
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: n8n-secret
  35 │         env:
  36 │         - name: TZ
  37 │           value: America/Montreal
  38 └         - name: N8N_BASIC_AUTH_ACTIVE
  ..   
────────────────────────────────────────



n8n3_3.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 n8n3_3.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 5678
   9 │     targetPort: http
  10 │   selector:
  11 └     app: n8n
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 n8n3_3.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 5678
   9 │     targetPort: http
  10 │   selector:
  11 └     app: n8n
────────────────────────────────────────



nachet-ingress.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-ingress.yaml:30-45
────────────────────────────────────────
  30 ┌   ingressClassName: nginx
  31 │   tls:
  32 │   - hosts:
  33 │     - nachet.inspection.alpha.canada.ca
  34 │     secretName: aciacfia-tls
  35 │   rules:
  36 │   - host: nachet.inspection.alpha.canada.ca
  37 │     http:
  38 └       paths:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-ingress.yaml:30-45
────────────────────────────────────────
  30 ┌   ingressClassName: nginx
  31 │   tls:
  32 │   - hosts:
  33 │     - nachet.inspection.alpha.canada.ca
  34 │     secretName: aciacfia-tls
  35 │   rules:
  36 │   - host: nachet.inspection.alpha.canada.ca
  37 │     http:
  38 └       paths:
  ..   
────────────────────────────────────────



nachet-ingress1.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-ingress1.yaml:30-45
────────────────────────────────────────
  30 ┌   ingressClassName: nginx
  31 │   tls:
  32 │   - hosts:
  33 │     - nachet.inspection.alpha.canada.ca
  34 │     secretName: aciacfia-tls
  35 │   rules:
  36 │   - host: nachet.inspection.alpha.canada.ca
  37 │     http:
  38 └       paths:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-ingress1.yaml:30-45
────────────────────────────────────────
  30 ┌   ingressClassName: nginx
  31 │   tls:
  32 │   - hosts:
  33 │     - nachet.inspection.alpha.canada.ca
  34 │     secretName: aciacfia-tls
  35 │   rules:
  36 │   - host: nachet.inspection.alpha.canada.ca
  37 │     http:
  38 └       paths:
  ..   
────────────────────────────────────────



nachet-ingress1_1.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-ingress1_1.yaml:29-44
────────────────────────────────────────
  29 ┌   ingressClassName: nginx
  30 │   tls:
  31 │   - hosts:
  32 │     - nachet.inspection.alpha.canada.ca
  33 │     secretName: aciacfia-tls
  34 │   rules:
  35 │   - host: nachet.inspection.alpha.canada.ca
  36 │     http:
  37 └       paths:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-ingress1_1.yaml:29-44
────────────────────────────────────────
  29 ┌   ingressClassName: nginx
  30 │   tls:
  31 │   - hosts:
  32 │     - nachet.inspection.alpha.canada.ca
  33 │     secretName: aciacfia-tls
  34 │   rules:
  35 │   - host: nachet.inspection.alpha.canada.ca
  36 │     http:
  37 └       paths:
  ..   
────────────────────────────────────────



nachet-ingress_1.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-ingress_1.yaml:29-44
────────────────────────────────────────
  29 ┌   ingressClassName: nginx
  30 │   tls:
  31 │   - hosts:
  32 │     - nachet.inspection.alpha.canada.ca
  33 │     secretName: aciacfia-tls
  34 │   rules:
  35 │   - host: nachet.inspection.alpha.canada.ca
  36 │     http:
  37 └       paths:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-ingress_1.yaml:29-44
────────────────────────────────────────
  29 ┌   ingressClassName: nginx
  30 │   tls:
  31 │   - hosts:
  32 │     - nachet.inspection.alpha.canada.ca
  33 │     secretName: aciacfia-tls
  34 │   rules:
  35 │   - host: nachet.inspection.alpha.canada.ca
  36 │     http:
  37 └       paths:
  ..   
────────────────────────────────────────



nachet-rcnn-model-deployment.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'nachet-rcnn-detector' of Deployment 'nachet-rcnn-detector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nachet-rcnn-detector' of Deployment 'nachet-rcnn-detector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nachet-rcnn-detector' of Deployment 'nachet-rcnn-detector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nachet-rcnn-detector' of Deployment 'nachet-rcnn-detector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-rcnn-detector
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-rcnn-detector
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nachet-rcnn-detector" of deployment "nachet-rcnn-detector" in "nachet" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nachet-rcnn-detector in nachet namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:22-89
────────────────────────────────────────
  22 ┌       affinity:
  23 │         podAntiAffinity:
  24 │           requiredDuringSchedulingIgnoredDuringExecution:
  25 │           - labelSelector:
  26 │               matchExpressions:
  27 │               - key: app
  28 │                 operator: In
  29 │                 values:
  30 └                 - nachet-rcnn-detector
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nachet-rcnn-detector in deployment nachet-rcnn-detector (namespace: nachet) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nachet-rcnn-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────



nachet-rcnn-model-deployment1.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'nachet-rcnn-detector' of Deployment 'nachet-rcnn-detector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nachet-rcnn-detector' of Deployment 'nachet-rcnn-detector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nachet-rcnn-detector' of Deployment 'nachet-rcnn-detector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nachet-rcnn-detector' of Deployment 'nachet-rcnn-detector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-rcnn-detector
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-rcnn-detector
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nachet-rcnn-detector" of deployment "nachet-rcnn-detector" in "nachet" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nachet-rcnn-detector in nachet namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:22-89
────────────────────────────────────────
  22 ┌       affinity:
  23 │         podAntiAffinity:
  24 │           requiredDuringSchedulingIgnoredDuringExecution:
  25 │           - labelSelector:
  26 │               matchExpressions:
  27 │               - key: app
  28 │                 operator: In
  29 │                 values:
  30 └                 - nachet-rcnn-detector
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nachet-rcnn-detector in deployment nachet-rcnn-detector (namespace: nachet) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nachet-rcnn-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-rcnn-detector
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-seed-detector
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────



nachet-rcnn-model-deployment1_1.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-rcnn-model-deployment1_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-rcnn-detector
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-rcnn-model-deployment1_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-rcnn-detector
────────────────────────────────────────



nachet-rcnn-model-deployment1_2.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-rcnn-model-deployment1_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-rcnn-detector
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-rcnn-model-deployment1_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-rcnn-detector
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────



nachet-rcnn-model-deployment_1.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-rcnn-model-deployment_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-rcnn-detector
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-rcnn-model-deployment_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-rcnn-detector
────────────────────────────────────────



nachet-rcnn-model-deployment_2.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-rcnn-model-deployment_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-rcnn-detector
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-rcnn-model-deployment_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-rcnn-detector
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────



nachet-swin-22-spp-model-deployment.yaml (kubernetes)
=====================================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'nachet-swin-classifier-22-spp' of Deployment 'nachet-swin-classifier-22-spp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nachet-swin-classifier-22-spp' of Deployment 'nachet-swin-classifier-22-spp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nachet-swin-classifier-22-spp' of Deployment 'nachet-swin-classifier-22-spp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nachet-swin-classifier-22-spp' of Deployment 'nachet-swin-classifier-22-spp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier-22-spp
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier-22-spp
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nachet-swin-classifier-22-spp" of deployment "nachet-swin-classifier-22-spp" in "nachet" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nachet-swin-classifier-22-spp in nachet namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:22-89
────────────────────────────────────────
  22 ┌       affinity:
  23 │         podAntiAffinity:
  24 │           requiredDuringSchedulingIgnoredDuringExecution:
  25 │           - labelSelector:
  26 │               matchExpressions:
  27 │               - key: app
  28 │                 operator: In
  29 │                 values:
  30 └                 - nachet-swin-classifier-22-spp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nachet-swin-classifier-22-spp in deployment nachet-swin-classifier-22-spp (namespace: nachet) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────



nachet-swin-22-spp-model-deployment1.yaml (kubernetes)
======================================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'nachet-swin-classifier-22-spp' of Deployment 'nachet-swin-classifier-22-spp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nachet-swin-classifier-22-spp' of Deployment 'nachet-swin-classifier-22-spp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nachet-swin-classifier-22-spp' of Deployment 'nachet-swin-classifier-22-spp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nachet-swin-classifier-22-spp' of Deployment 'nachet-swin-classifier-22-spp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier-22-spp
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier-22-spp
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nachet-swin-classifier-22-spp" of deployment "nachet-swin-classifier-22-spp" in "nachet" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nachet-swin-classifier-22-spp in nachet namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:22-89
────────────────────────────────────────
  22 ┌       affinity:
  23 │         podAntiAffinity:
  24 │           requiredDuringSchedulingIgnoredDuringExecution:
  25 │           - labelSelector:
  26 │               matchExpressions:
  27 │               - key: app
  28 │                 operator: In
  29 │                 values:
  30 └                 - nachet-swin-classifier-22-spp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nachet-swin-classifier-22-spp in deployment nachet-swin-classifier-22-spp (namespace: nachet) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-22-spp
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier-22-spp
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - azmlinfsrv --entry_script /app/score.py
  49 └         envFrom:
  ..   
────────────────────────────────────────



nachet-swin-22-spp-model-deployment1_1.yaml (kubernetes)
========================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier-22-spp
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier-22-spp
────────────────────────────────────────



nachet-swin-22-spp-model-deployment1_2.yaml (kubernetes)
========================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier-22-spp
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment1_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier-22-spp
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────



nachet-swin-22-spp-model-deployment_1.yaml (kubernetes)
=======================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier-22-spp
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier-22-spp
────────────────────────────────────────



nachet-swin-22-spp-model-deployment_2.yaml (kubernetes)
=======================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier-22-spp
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-22-spp-model-deployment_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier-22-spp
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────



nachet-swin-27-spp-model-deployment.yaml (kubernetes)
=====================================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'nachet-swin-classifier-27-spp' of Deployment 'nachet-swin-classifier-27-spp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nachet-swin-classifier-27-spp' of Deployment 'nachet-swin-classifier-27-spp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nachet-swin-classifier-27-spp' of Deployment 'nachet-swin-classifier-27-spp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nachet-swin-classifier-27-spp' of Deployment 'nachet-swin-classifier-27-spp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:7-64
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier-27-spp
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:7-64
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier-27-spp
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nachet-swin-classifier-27-spp" of deployment "nachet-swin-classifier-27-spp" in "nachet" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nachet-swin-classifier-27-spp in nachet namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:22-64
────────────────────────────────────────
  22 ┌       affinity:
  23 │         podAntiAffinity:
  24 │           requiredDuringSchedulingIgnoredDuringExecution:
  25 │           - labelSelector:
  26 │               matchExpressions:
  27 │               - key: app
  28 │                 operator: In
  29 │                 values:
  30 └                 - nachet-swin-classifier-27-spp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nachet-swin-classifier-27-spp in deployment nachet-swin-classifier-27-spp (namespace: nachet) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────



nachet-swin-27-spp-model-deployment1.yaml (kubernetes)
======================================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'nachet-swin-classifier-27-spp' of Deployment 'nachet-swin-classifier-27-spp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nachet-swin-classifier-27-spp' of Deployment 'nachet-swin-classifier-27-spp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nachet-swin-classifier-27-spp' of Deployment 'nachet-swin-classifier-27-spp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nachet-swin-classifier-27-spp' of Deployment 'nachet-swin-classifier-27-spp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:7-64
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier-27-spp
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:7-64
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier-27-spp
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nachet-swin-classifier-27-spp" of deployment "nachet-swin-classifier-27-spp" in "nachet" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nachet-swin-classifier-27-spp in nachet namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:22-64
────────────────────────────────────────
  22 ┌       affinity:
  23 │         podAntiAffinity:
  24 │           requiredDuringSchedulingIgnoredDuringExecution:
  25 │           - labelSelector:
  26 │               matchExpressions:
  27 │               - key: app
  28 │                 operator: In
  29 │                 values:
  30 └                 - nachet-swin-classifier-27-spp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nachet-swin-classifier-27-spp in deployment nachet-swin-classifier-27-spp (namespace: nachet) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1.yaml:41-64
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier-27-spp
  42 │         image: ghcr.io/ai-cfia/nachet-model-ccds/gpu-classifier-27spp-model-1:2025030321
  43 │         imagePullPolicy: Always
  44 │         envFrom:
  45 │         - secretRef:
  46 │             name: nachet-swin-classifier-secrets
  47 │         ports:
  48 │         - containerPort: 8080
  49 └         resources:
  ..   
────────────────────────────────────────



nachet-swin-27-spp-model-deployment1_1.yaml (kubernetes)
========================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier-27-spp
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier-27-spp
────────────────────────────────────────



nachet-swin-27-spp-model-deployment1_2.yaml (kubernetes)
========================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier-27-spp
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 8080
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment1_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier-27-spp
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 8080
────────────────────────────────────────



nachet-swin-27-spp-model-deployment_1.yaml (kubernetes)
=======================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier-27-spp
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier-27-spp
────────────────────────────────────────



nachet-swin-27-spp-model-deployment_2.yaml (kubernetes)
=======================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier-27-spp
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 8080
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-27-spp-model-deployment_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier-27-spp
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 8080
────────────────────────────────────────



nachet-swin-model-deployment.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'nachet-swin-classifier' of Deployment 'nachet-swin-classifier' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nachet-swin-classifier' of Deployment 'nachet-swin-classifier' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nachet-swin-classifier' of Deployment 'nachet-swin-classifier' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nachet-swin-classifier' of Deployment 'nachet-swin-classifier' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nachet-swin-classifier" of deployment "nachet-swin-classifier" in "nachet" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nachet-swin-classifier in nachet namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:22-89
────────────────────────────────────────
  22 ┌       affinity:
  23 │         podAntiAffinity:
  24 │           requiredDuringSchedulingIgnoredDuringExecution:
  25 │           - labelSelector:
  26 │               matchExpressions:
  27 │               - key: app
  28 │                 operator: In
  29 │                 values:
  30 └                 - nachet-swin-classifier
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nachet-swin-classifier in deployment nachet-swin-classifier (namespace: nachet) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nachet-swin-model-deployment.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────



nachet-swin-model-deployment1.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'nachet-swin-classifier' of Deployment 'nachet-swin-classifier' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nachet-swin-classifier' of Deployment 'nachet-swin-classifier' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nachet-swin-classifier' of Deployment 'nachet-swin-classifier' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nachet-swin-classifier' of Deployment 'nachet-swin-classifier' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:7-89
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   revisionHistoryLimit: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nachet-swin-classifier
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nachet-swin-classifier" of deployment "nachet-swin-classifier" in "nachet" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nachet-swin-classifier in nachet namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:22-89
────────────────────────────────────────
  22 ┌       affinity:
  23 │         podAntiAffinity:
  24 │           requiredDuringSchedulingIgnoredDuringExecution:
  25 │           - labelSelector:
  26 │               matchExpressions:
  27 │               - key: app
  28 │                 operator: In
  29 │                 values:
  30 └                 - nachet-swin-classifier
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nachet-swin-classifier in deployment nachet-swin-classifier (namespace: nachet) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nachet-swin-model-deployment1.yaml:41-80
────────────────────────────────────────
  41 ┌       - name: nachet-swin-classifier
  42 │         image: ghcr.io/ai-cfia/nachet-backend:29-azureml-swin-classifier
  43 │         imagePullPolicy: Always
  44 │         command:
  45 │         - /bin/sh
  46 │         - -c
  47 │         args:
  48 │         - ./startup.sh
  49 └         envFrom:
  ..   
────────────────────────────────────────



nachet-swin-model-deployment1_1.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-model-deployment1_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-model-deployment1_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier
────────────────────────────────────────



nachet-swin-model-deployment1_2.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-model-deployment1_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-model-deployment1_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────



nachet-swin-model-deployment_1.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-model-deployment_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-model-deployment_1.yaml:7-10
────────────────────────────────────────
   7 ┌   minAvailable: 1
   8 │   selector:
   9 │     matchLabels:
  10 └       app: nachet-swin-classifier
────────────────────────────────────────



nachet-swin-model-deployment_2.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nachet-swin-model-deployment_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nachet-swin-model-deployment_2.yaml:7-12
────────────────────────────────────────
   7 ┌   clusterIP: None
   8 │   selector:
   9 │     app: nachet-swin-classifier
  10 │   ports:
  11 │   - protocol: TCP
  12 └     port: 5001
────────────────────────────────────────



nacos_component-render_manifest.golden.yaml (kubernetes)
========================================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nacos' of StatefulSet 'nacos' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nacos' of StatefulSet 'nacos' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nacos' of 'statefulset' 'nacos' in 'dubbo-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nacos' of StatefulSet 'nacos' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nacos' of StatefulSet 'nacos' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nacos' of StatefulSet 'nacos' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nacos' of StatefulSet 'nacos' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nacos' of StatefulSet 'nacos' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nacos' of StatefulSet 'nacos' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nacos' of StatefulSet 'nacos' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nacos' of StatefulSet 'nacos' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nacos' of StatefulSet 'nacos' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:7-73
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: nacos
  11 │   serviceName: nacos
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app.kubernetes.io/name: nacos
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:7-73
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: nacos
  11 │   serviceName: nacos
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app.kubernetes.io/name: nacos
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nacos" of statefulset "nacos" in "dubbo-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nacos in dubbo-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset nacos in dubbo-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:17-73
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 └         - name: MODE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nacos in statefulset nacos (namespace: dubbo-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nacos_component-render_manifest.golden.yaml:18-70
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NACOS_SERVER_PORT
  20 │           value: '8848'
  21 │         - name: NACOS_APPLICATION_PORT
  22 │           value: '8848'
  23 │         - name: PREFER_HOST_MODE
  24 │           value: '8848'
  25 │         - name: MODE
  26 └           value: standalone
  ..   
────────────────────────────────────────



nacos_component-render_manifest.golden_1.yaml (kubernetes)
==========================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nacos_component-render_manifest.golden_1.yaml:12-30
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: http
  14 │     port: 8848
  15 │     protocol: TCP
  16 │     targetPort: 8848
  17 │   - name: clientgen-rpc
  18 │     port: 9848
  19 │     targetPort: 9848
  20 └   - name: raft-rpc
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nacos_component-render_manifest.golden_1.yaml:12-30
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: http
  14 │     port: 8848
  15 │     protocol: TCP
  16 │     targetPort: 8848
  17 │   - name: clientgen-rpc
  18 │     port: 9848
  19 │     targetPort: 9848
  20 └   - name: raft-rpc
  ..   
────────────────────────────────────────



nagios-config-pvc.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nagios-config-pvc.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nagios-config-pvc.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 1Gi
────────────────────────────────────────



nagios-data-pvc.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nagios-data-pvc.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nagios-data-pvc.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 1Gi
────────────────────────────────────────



nagios.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nagios' of Pod 'nagios' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nagios' of Pod 'nagios' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nagios' of 'pod' 'nagios' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nagios' of Pod 'nagios' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nagios' of Pod 'nagios' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nagios' of Pod 'nagios' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nagios' of Pod 'nagios' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nagios' of Pod 'nagios' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nagios' of Pod 'nagios' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nagios.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nagios.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nagios" of pod "nagios" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nagios in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nagios.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nagios
   5 │   labels:
   6 └     name: nagios
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nagios in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nagios in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nagios.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nagios in pod nagios (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nagios.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: nagios
  10 │     image: juanchogonza98/stack_nagios_monitoring:v2
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     ports:
  16 └       - containerPort: 8080
────────────────────────────────────────



nagp-ms-api-deployment.yaml (kubernetes)
========================================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'api-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'api-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'api-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'api-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'api-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'api-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'api-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   selector:
   9 │     matchLabels:
  10 │       app: api
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   selector:
   9 │     matchLabels:
  10 │       app: api
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 └       maxSurge: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "api-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment api-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:4-5
────────────────────────────────────────
   4 ┌   name: api-deployment
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment api-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:21-38
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 └             memory: "512Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment api-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nagp-ms-api-deployment.yaml:22-38
────────────────────────────────────────
  22 ┌       - name: api
  23 │         image: mayanksnagp2024/mks_nagp:v2
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             cpu: "800m"
  29 │             memory: "512Mi"
  30 └           requests:
  ..   
────────────────────────────────────────



name-host-ingress.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 name-host-ingress.yaml:6-33
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: "k8sdemo.prasunguchhait.com"
   8 │     http:
   9 │       paths:
  10 │       - path: /svc1
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: web
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 name-host-ingress.yaml:6-33
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: "k8sdemo.prasunguchhait.com"
   8 │     http:
   9 │       paths:
  10 │       - path: /svc1
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: web
  ..   
────────────────────────────────────────



name-ing.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 name-ing.yaml:8-28
────────────────────────────────────────
   8 ┌   rules:
   9 │     - host: example.com
  10 │       http:
  11 │         paths:
  12 │           - path: /hello
  13 │             pathType: Prefix
  14 │             backend:
  15 │               service:
  16 └                 name: hello-world
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 name-ing.yaml:8-28
────────────────────────────────────────
   8 ┌   rules:
   9 │     - host: example.com
  10 │       http:
  11 │         paths:
  12 │           - path: /hello
  13 │             pathType: Prefix
  14 │             backend:
  15 │               service:
  16 └                 name: hello-world
  ..   
────────────────────────────────────────



name-ing1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 name-ing1.yaml:8-28
────────────────────────────────────────
   8 ┌   rules:
   9 │     - host: example.com
  10 │       http:
  11 │         paths:
  12 │           - path: /hello
  13 │             pathType: Prefix
  14 │             backend:
  15 │               service:
  16 └                 name: hello-world
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 name-ing1.yaml:8-28
────────────────────────────────────────
   8 ┌   rules:
   9 │     - host: example.com
  10 │       http:
  11 │         paths:
  12 │           - path: /hello
  13 │             pathType: Prefix
  14 │             backend:
  15 │               service:
  16 └                 name: hello-world
  ..   
────────────────────────────────────────



named_port.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello' of Deployment 'hello' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello' of Deployment 'hello' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello' of 'deployment' 'hello' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello' of Deployment 'hello' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello' of Deployment 'hello' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello' of Deployment 'hello' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello' of Deployment 'hello' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello' of Deployment 'hello' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 named_port.yaml:6-27
────────────────────────────────────────
   6 ┌   replicas: 7
   7 │   selector:
   8 │     matchLabels:
   9 │       app: hello
  10 │       tier: backend
  11 │       track: stable
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 named_port.yaml:6-27
────────────────────────────────────────
   6 ┌   replicas: 7
   7 │   selector:
   8 │     matchLabels:
   9 │       app: hello
  10 │       tier: backend
  11 │       track: stable
  12 │   template:
  13 │     metadata:
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello" of deployment "hello" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 named_port.yaml:4
────────────────────────────────────────
   4 [   name: hello
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment hello in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 named_port.yaml:19-27
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello in deployment hello (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 named_port.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: hello
  21 │           image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  22 │           ports:
  23 │             - name: http
  24 │               containerPort: 80
  25 │           readinessProbe:
  26 │             httpGet:
  27 └               port: http
────────────────────────────────────────



namenode-pv.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namenode-pv.yaml:8-20
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 128Mi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │     - ReadWriteOnce
  13 │   persistentVolumeReclaimPolicy: Retain
  14 │   storageClassName: namenode-storage
  15 │   hostPath:
  16 └     # It is not based on the path of the host machine.
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namenode-pv.yaml:8-20
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 128Mi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │     - ReadWriteOnce
  13 │   persistentVolumeReclaimPolicy: Retain
  14 │   storageClassName: namenode-storage
  15 │   hostPath:
  16 └     # It is not based on the path of the host machine.
  ..   
────────────────────────────────────────



namenode-service.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namenode-service.yaml:6-18
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   clusterIP: None
   8 │   selector:
   9 │     app: namenode
  10 │   ports:
  11 │   - protocol: TCP
  12 │     name: rpc
  13 │     port: 8020
  14 └     targetPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namenode-service.yaml:6-18
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   clusterIP: None
   8 │   selector:
   9 │     app: namenode
  10 │   ports:
  11 │   - protocol: TCP
  12 │     name: rpc
  13 │     port: 8020
  14 └     targetPort: 8020
  ..   
────────────────────────────────────────



namenode-service_1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namenode-service_1.yaml:6-14
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: namenode
   9 │   ports:
  10 │   - protocol: TCP
  11 │     name: http
  12 │     port: 9870
  13 │     targetPort: 9870
  14 └     nodePort: 30870
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namenode-service_1.yaml:6-14
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: namenode
   9 │   ports:
  10 │   - protocol: TCP
  11 │     name: http
  12 │     port: 9870
  13 │     targetPort: 9870
  14 └     nodePort: 30870
────────────────────────────────────────



namenode-statefulset.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'namenode' of StatefulSet 'namenode' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'namenode' of StatefulSet 'namenode' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'namenode' of 'statefulset' 'namenode' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'namenode' of StatefulSet 'namenode' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'namenode' of StatefulSet 'namenode' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'namenode' of StatefulSet 'namenode' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'namenode' of StatefulSet 'namenode' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'namenode' of StatefulSet 'namenode' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'namenode' of StatefulSet 'namenode' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'namenode' of StatefulSet 'namenode' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'namenode' of StatefulSet 'namenode' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namenode-statefulset.yaml:6-46
────────────────────────────────────────
   6 ┌   serviceName: namenode-svc
   7 │   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: namenode # == .spec.template.metadata.lables
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: namenode # == .spec.selector.matchLabels
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namenode-statefulset.yaml:6-46
────────────────────────────────────────
   6 ┌   serviceName: namenode-svc
   7 │   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: namenode # == .spec.template.metadata.lables
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: namenode # == .spec.selector.matchLabels
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "namenode" of statefulset "namenode" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset namenode in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namenode-statefulset.yaml:4
────────────────────────────────────────
   4 [   name: namenode
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namenode in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset namenode in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namenode-statefulset.yaml:16-36
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 └             - name: rpc
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container namenode in statefulset namenode (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namenode-statefulset.yaml:17-36
────────────────────────────────────────
  17 ┌         - name: namenode
  18 │           image: apache/hadoop:3.3.6
  19 │           command:
  20 │             - /opt/starter.sh
  21 │             - hdfs
  22 │             - namenode
  23 │           ports:
  24 │             - name: rpc
  25 └               containerPort: 8020
  ..   
────────────────────────────────────────



namespace-app-demo_1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'demo-app-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 namespace-app-demo_1.yaml:7-20
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - '*'
   9 │   resources:
  10 │   - services
  11 │   - deployments
  12 │   - pods
  13 │   verbs:
  14 │   - create
  15 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'demo-app-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 namespace-app-demo_1.yaml:7-20
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - '*'
   9 │   resources:
  10 │   - services
  11 │   - deployments
  12 │   - pods
  13 │   verbs:
  14 │   - create
  15 └   - delete
  ..   
────────────────────────────────────────



namespace-argo-events.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-argo-events.yaml:8-9
────────────────────────────────────────
   8 ┌   finalizers:
   9 └     - kubernetes
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-argo-events.yaml:8-9
────────────────────────────────────────
   8 ┌   finalizers:
   9 └     - kubernetes
────────────────────────────────────────



namespace-argo.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-argo.yaml:8-9
────────────────────────────────────────
   8 ┌   finalizers:
   9 └     - kubernetes
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-argo.yaml:8-9
────────────────────────────────────────
   8 ┌   finalizers:
   9 └     - kubernetes
────────────────────────────────────────



namespace-basic.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Namespace 'dev' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Namespace 'dev' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'namespace' 'dev' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Namespace 'dev' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Namespace 'dev' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Namespace 'dev' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Namespace 'dev' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Namespace 'dev' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Namespace 'dev' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Namespace 'dev' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Namespace 'dev' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-basic.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-basic.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dev in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace-basic.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────



namespace-compute-quota.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-compute-quota.yaml:7-12
────────────────────────────────────────
   7 ┌   hard:
   8 │     pods: "10"
   9 │     requests.cpu: "4"
  10 │     requests.memory: 5Gi
  11 │     limits.cpu: "10"
  12 └     limits.memory: 10Gi
────────────────────────────────────────



namespace-compute-quota1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-compute-quota1.yaml:7-12
────────────────────────────────────────
   7 ┌   hard:
   8 │     pods: "10"
   9 │     requests.cpu: "4"
  10 │     requests.memory: 5Gi
  11 │     limits.cpu: "10"
  12 └     limits.memory: 10Gi
────────────────────────────────────────



namespace-defination.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'myapp-namespace' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'myapp-namespace' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'myapp-namespace' in 'dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'myapp-namespace' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'myapp-namespace' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'myapp-namespace' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'myapp-namespace' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'myapp-namespace' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'myapp-namespace' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'myapp-namespace' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'myapp-namespace' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-defination.yaml:11-25
────────────────────────────────────────
  11 ┌   replicas: 3
  12 │   selector:
  13 │     matchLabels:
  14 │       app: nginx
  15 │       tier: frontend
  16 │   template:
  17 │     metadata:
  18 │       name: myapp-namespace
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-defination.yaml:11-25
────────────────────────────────────────
  11 ┌   replicas: 3
  12 │   selector:
  13 │     matchLabels:
  14 │       app: nginx
  15 │       tier: frontend
  16 │   template:
  17 │     metadata:
  18 │       name: myapp-namespace
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "myapp-namespace" in "dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-namespace in dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace-defination.yaml:24-25
────────────────────────────────────────
  24 ┌       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp-namespace in dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace-defination.yaml:23-25
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: nginx
  25 └         image: nginx:1.24.0-latest
────────────────────────────────────────



namespace-example.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-example.yaml:6-17
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: myapp
   9 │   policyTypes:
  10 │   - Egress
  11 │   egress:
  12 │   - to:
  13 │     - namespaceSelector:
  14 └         matchExpressions:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-example.yaml:6-17
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: myapp
   9 │   policyTypes:
  10 │   - Egress
  11 │   egress:
  12 │   - to:
  13 │     - namespaceSelector:
  14 └         matchExpressions:
  ..   
────────────────────────────────────────



namespace-giropops.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-giropops.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-giropops.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────



namespace-giropops1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-giropops1.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-giropops1.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────



namespace-giropops2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-giropops2.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-giropops2.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────



namespace-giropops3.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-giropops3.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-giropops3.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────



namespace-inferred-operator-instance-2.yaml (kubernetes)
========================================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'operator' of Pod 'leader-election-operator-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'operator' of Pod 'leader-election-operator-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'operator' of 'pod' 'leader-election-operator-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'operator' of Pod 'leader-election-operator-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'operator' of Pod 'leader-election-operator-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'operator' of Pod 'leader-election-operator-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'operator' of Pod 'leader-election-operator-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'operator' of Pod 'leader-election-operator-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'operator' of Pod 'leader-election-operator-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'operator' of Pod 'leader-election-operator-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'operator' of Pod 'leader-election-operator-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'operator' of Pod 'leader-election-operator-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:6-15
────────────────────────────────────────
   6 ┌   serviceAccountName: leader-election-operator
   7 │   containers:
   8 │     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:6-15
────────────────────────────────────────
   6 ┌   serviceAccountName: leader-election-operator
   7 │   containers:
   8 │     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "operator" of pod "leader-election-operator-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod leader-election-operator-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:4
────────────────────────────────────────
   4 [   name: leader-election-operator-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container leader-election-operator-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod leader-election-operator-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace-inferred-operator-instance-2.yaml:6-15
────────────────────────────────────────
   6 ┌   serviceAccountName: leader-election-operator
   7 │   containers:
   8 │     - name: operator
   9 │       image: leader-election-operator
  10 │       imagePullPolicy: Never
  11 │       env:
  12 │         - name: POD_NAME
  13 │           valueFrom:
  14 │             fieldRef:
  15 └               fieldPath: metadata.name
────────────────────────────────────────



namespace-inferred-operator_1.yaml (kubernetes)
===============================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'operator' of Pod 'leader-election-operator-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'operator' of Pod 'leader-election-operator-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'operator' of 'pod' 'leader-election-operator-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'operator' of Pod 'leader-election-operator-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'operator' of Pod 'leader-election-operator-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'operator' of Pod 'leader-election-operator-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'operator' of Pod 'leader-election-operator-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'operator' of Pod 'leader-election-operator-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'operator' of Pod 'leader-election-operator-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'operator' of Pod 'leader-election-operator-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'operator' of Pod 'leader-election-operator-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'operator' of Pod 'leader-election-operator-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:6-15
────────────────────────────────────────
   6 ┌   serviceAccountName: leader-election-operator
   7 │   containers:
   8 │   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:6-15
────────────────────────────────────────
   6 ┌   serviceAccountName: leader-election-operator
   7 │   containers:
   8 │   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "operator" of pod "leader-election-operator-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod leader-election-operator-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:4
────────────────────────────────────────
   4 [   name: leader-election-operator-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container leader-election-operator-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod leader-election-operator-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace-inferred-operator_1.yaml:6-15
────────────────────────────────────────
   6 ┌   serviceAccountName: leader-election-operator
   7 │   containers:
   8 │   - name: operator
   9 │     image: leader-election-operator
  10 │     imagePullPolicy: Never
  11 │     env:
  12 │     - name: POD_NAME
  13 │       valueFrom:
  14 │         fieldRef:
  15 └           fieldPath: metadata.name
────────────────────────────────────────



namespace-install1_10.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install1_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install1_10.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



namespace-install1_11.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install1_11.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resourceNames:
  13 │   - argocd-redis
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 └   - get
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install1_11.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



namespace-install1_12.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 namespace-install1_12.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install1_12.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



namespace-install1_28.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_28.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: webhook
  12 │     port: 7000
  13 │     protocol: TCP
  14 │     targetPort: webhook
  15 │   - name: metrics
  16 │     port: 8080
  17 │     protocol: TCP
  18 └     targetPort: metrics
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_28.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: webhook
  12 │     port: 7000
  13 │     protocol: TCP
  14 │     targetPort: webhook
  15 │   - name: metrics
  16 │     port: 8080
  17 │     protocol: TCP
  18 └     targetPort: metrics
  ..   
────────────────────────────────────────



namespace-install1_29.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_29.yaml:10-25
────────────────────────────────────────
  10 ┌   ports:
  11 │   - appProtocol: TCP
  12 │     name: http
  13 │     port: 5556
  14 │     protocol: TCP
  15 │     targetPort: 5556
  16 │   - name: grpc
  17 │     port: 5557
  18 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_29.yaml:10-25
────────────────────────────────────────
  10 ┌   ports:
  11 │   - appProtocol: TCP
  12 │     name: http
  13 │     port: 5556
  14 │     protocol: TCP
  15 │     targetPort: 5556
  16 │   - name: grpc
  17 │     port: 5557
  18 └     protocol: TCP
  ..   
────────────────────────────────────────



namespace-install1_30.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_30.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8082
  13 │     protocol: TCP
  14 │     targetPort: 8082
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_30.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8082
  13 │     protocol: TCP
  14 │     targetPort: 8082
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-application-controller
────────────────────────────────────────



namespace-install1_31.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_31.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 9001
  13 │     protocol: TCP
  14 │     targetPort: 9001
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_31.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 9001
  13 │     protocol: TCP
  14 │     targetPort: 9001
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-notifications-controller
────────────────────────────────────────



namespace-install1_32.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_32.yaml:10-15
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: tcp-redis
  12 │     port: 6379
  13 │     targetPort: 6379
  14 │   selector:
  15 └     app.kubernetes.io/name: argocd-redis
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_32.yaml:10-15
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: tcp-redis
  12 │     port: 6379
  13 │     targetPort: 6379
  14 │   selector:
  15 └     app.kubernetes.io/name: argocd-redis
────────────────────────────────────────



namespace-install1_33.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_33.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: server
  12 │     port: 8081
  13 │     protocol: TCP
  14 │     targetPort: 8081
  15 │   - name: metrics
  16 │     port: 8084
  17 │     protocol: TCP
  18 └     targetPort: 8084
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_33.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: server
  12 │     port: 8081
  13 │     protocol: TCP
  14 │     targetPort: 8081
  15 │   - name: metrics
  16 │     port: 8084
  17 │     protocol: TCP
  18 └     targetPort: 8084
  ..   
────────────────────────────────────────



namespace-install1_34.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_34.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: http
  12 │     port: 80
  13 │     protocol: TCP
  14 │     targetPort: 8080
  15 │   - name: https
  16 │     port: 443
  17 │     protocol: TCP
  18 └     targetPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_34.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: http
  12 │     port: 80
  13 │     protocol: TCP
  14 │     targetPort: 8080
  15 │   - name: https
  16 │     port: 443
  17 │     protocol: TCP
  18 └     targetPort: 8080
  ..   
────────────────────────────────────────



namespace-install1_35.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_35.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8083
  13 │     protocol: TCP
  14 │     targetPort: 8083
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_35.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8083
  13 │     protocol: TCP
  14 │     targetPort: 8083
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-server
────────────────────────────────────────



namespace-install1_37.yaml (kubernetes)
=======================================
Tests: 123 (SUCCESSES: 105, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 15, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install1_37.yaml:74-95
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.3
  80 │         imagePullPolicy: Always
  81 │         name: copyutil
  82 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install1_37.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install1_37.yaml:74-95
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.3
  80 │         imagePullPolicy: Always
  81 │         name: copyutil
  82 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install1_37.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install1_37.yaml:74-95
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.3
  80 │         imagePullPolicy: Always
  81 │         name: copyutil
  82 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install1_37.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install1_37.yaml:74-95
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.3
  80 │         imagePullPolicy: Always
  81 │         name: copyutil
  82 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install1_37.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install1_37.yaml:74-95
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.3
  80 │         imagePullPolicy: Always
  81 │         name: copyutil
  82 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install1_37.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install1_37.yaml:74-95
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.3
  80 │         imagePullPolicy: Always
  81 │         name: copyutil
  82 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install1_37.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_37.yaml:10-112
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-dex-server
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-dex-server
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_37.yaml:10-112
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-dex-server
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-dex-server
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install1_37.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace-install1_37.yaml:18-112
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install1_37.yaml:74-95
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.3
  80 │         imagePullPolicy: Always
  81 │         name: copyutil
  82 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install1_37.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



namespace-install1_38.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 9, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install1_38.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install1_38.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install1_38.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install1_38.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install1_38.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install1_38.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_38.yaml:10-91
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-notifications-controller
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: argocd-notifications-controller
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_38.yaml:10-91
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-notifications-controller
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: argocd-notifications-controller
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install1_38.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install1_38.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



namespace-install1_39.yaml (kubernetes)
=======================================
Tests: 122 (SUCCESSES: 106, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 15, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install1_39.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install1_39.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install1_39.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install1_39.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install1_39.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install1_39.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install1_39.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install1_39.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install1_39.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install1_39.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install1_39.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install1_39.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_39.yaml:10-79
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-redis
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-redis
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_39.yaml:10-79
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-redis
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-redis
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install1_39.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secret-init in deployment argocd-redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install1_39.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────



namespace-install1_43.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_43.yaml:6-15
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 8082
  11 │   podSelector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: argocd-application-controller
  14 │   policyTypes:
  15 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_43.yaml:6-15
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 8082
  11 │   podSelector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: argocd-application-controller
  14 │   policyTypes:
  15 └   - Ingress
────────────────────────────────────────



namespace-install1_44.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_44.yaml:6-18
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 7000
  11 │       protocol: TCP
  12 │     - port: 8080
  13 │       protocol: TCP
  14 └   podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_44.yaml:6-18
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 7000
  11 │       protocol: TCP
  12 │     - port: 8080
  13 │       protocol: TCP
  14 └   podSelector:
  ..   
────────────────────────────────────────



namespace-install1_45.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_45.yaml:6-25
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     ports:
  12 │     - port: 5556
  13 │       protocol: TCP
  14 └     - port: 5557
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_45.yaml:6-25
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     ports:
  12 │     - port: 5556
  13 │       protocol: TCP
  14 └     - port: 5557
  ..   
────────────────────────────────────────



namespace-install1_46.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_46.yaml:10-20
────────────────────────────────────────
  10 ┌   ingress:
  11 │   - from:
  12 │     - namespaceSelector: {}
  13 │     ports:
  14 │     - port: 9001
  15 │       protocol: TCP
  16 │   podSelector:
  17 │     matchLabels:
  18 └       app.kubernetes.io/name: argocd-notifications-controller
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_46.yaml:10-20
────────────────────────────────────────
  10 ┌   ingress:
  11 │   - from:
  12 │     - namespaceSelector: {}
  13 │     ports:
  14 │     - port: 9001
  15 │       protocol: TCP
  16 │   podSelector:
  17 │     matchLabels:
  18 └       app.kubernetes.io/name: argocd-notifications-controller
  ..   
────────────────────────────────────────



namespace-install1_47.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_47.yaml:6-24
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-repo-server
  14 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_47.yaml:6-24
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-repo-server
  14 └     - podSelector:
  ..   
────────────────────────────────────────



namespace-install1_48.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_48.yaml:6-31
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-application-controller
  14 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_48.yaml:6-31
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-application-controller
  14 └     - podSelector:
  ..   
────────────────────────────────────────



namespace-install1_49.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install1_49.yaml:6-12
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - {}
   8 │   podSelector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: argocd-server
  11 │   policyTypes:
  12 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install1_49.yaml:6-12
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - {}
   8 │   podSelector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: argocd-server
  11 │   policyTypes:
  12 └   - Ingress
────────────────────────────────────────



namespace-install1_7.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install1_7.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



namespace-install1_8.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install1_8.yaml:50-58
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   - configmaps
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



namespace-install1_9.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install1_9.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



namespace-install3_12.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install3_12.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: web
   8 │     port: 2746
   9 │     targetPort: 2746
  10 │   selector:
  11 └     app: argo-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install3_12.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: web
   8 │     port: 2746
   9 │     targetPort: 2746
  10 │   selector:
  11 └     app: argo-server
────────────────────────────────────────



namespace-install3_13.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install3_13.yaml:6-12
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: metrics
   8 │     port: 9090
   9 │     protocol: TCP
  10 │     targetPort: 9090
  11 │   selector:
  12 └     app: workflow-controller
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install3_13.yaml:6-12
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: metrics
   8 │     port: 9090
   9 │     protocol: TCP
  10 │     targetPort: 9090
  11 │   selector:
  12 └     app: workflow-controller
────────────────────────────────────────



namespace-install3_14.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argo-server' of Deployment 'argo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argo-server' of Deployment 'argo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argo-server' of 'deployment' 'argo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argo-server' of Deployment 'argo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install3_14.yaml:6-40
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: argo-server
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: argo-server
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install3_14.yaml:6-40
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: argo-server
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: argo-server
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argo-server" of deployment "argo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install3_14.yaml:4
────────────────────────────────────────
   4 [   name: argo-server
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argo-server in deployment argo-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install3_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────



namespace-install3_15.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'workflow-controller' of 'deployment' 'workflow-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install3_15.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: workflow-controller
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: workflow-controller
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install3_15.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: workflow-controller
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: workflow-controller
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "workflow-controller" of deployment "workflow-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment workflow-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install3_15.yaml:4
────────────────────────────────────────
   4 [   name: workflow-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container workflow-controller in deployment workflow-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install3_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────



namespace-install3_7.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'argo-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 namespace-install3_7.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - pods/exec
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'argo-role' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 namespace-install3_7.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - pods/exec
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argo-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install3_7.yaml:64-69
────────────────────────────────────────
  64 ┌ - apiGroups:
  65 │   - ''
  66 │   resources:
  67 │   - secrets
  68 │   verbs:
  69 └   - get
────────────────────────────────────────



namespace-install3_8.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0042 (MEDIUM): Role 'argo-server-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 namespace-install3_8.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - pods
  25 │   - pods/exec
  26 │   - pods/log
  27 │   verbs:
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'argo-server-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 namespace-install3_8.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - pods
  25 │   - pods/exec
  26 │   - pods/log
  27 │   verbs:
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'argo-server-role' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 namespace-install3_8.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - pods
  25 │   - pods/exec
  26 │   - pods/log
  27 │   verbs:
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argo-server-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install3_8.yaml:14-20
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - secrets
  18 │   verbs:
  19 │   - get
  20 └   - create
────────────────────────────────────────



namespace-install4_10.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install4_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install4_10.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



namespace-install4_11.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 namespace-install4_11.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install4_11.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



namespace-install4_26.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_26.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: webhook
  12 │     port: 7000
  13 │     protocol: TCP
  14 │     targetPort: webhook
  15 │   - name: metrics
  16 │     port: 8080
  17 │     protocol: TCP
  18 └     targetPort: metrics
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_26.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: webhook
  12 │     port: 7000
  13 │     protocol: TCP
  14 │     targetPort: webhook
  15 │   - name: metrics
  16 │     port: 8080
  17 │     protocol: TCP
  18 └     targetPort: metrics
  ..   
────────────────────────────────────────



namespace-install4_27.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_27.yaml:10-25
────────────────────────────────────────
  10 ┌   ports:
  11 │   - appProtocol: TCP
  12 │     name: http
  13 │     port: 5556
  14 │     protocol: TCP
  15 │     targetPort: 5556
  16 │   - name: grpc
  17 │     port: 5557
  18 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_27.yaml:10-25
────────────────────────────────────────
  10 ┌   ports:
  11 │   - appProtocol: TCP
  12 │     name: http
  13 │     port: 5556
  14 │     protocol: TCP
  15 │     targetPort: 5556
  16 │   - name: grpc
  17 │     port: 5557
  18 └     protocol: TCP
  ..   
────────────────────────────────────────



namespace-install4_28.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_28.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8082
  13 │     protocol: TCP
  14 │     targetPort: 8082
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_28.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8082
  13 │     protocol: TCP
  14 │     targetPort: 8082
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-application-controller
────────────────────────────────────────



namespace-install4_29.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_29.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 9001
  13 │     protocol: TCP
  14 │     targetPort: 9001
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_29.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 9001
  13 │     protocol: TCP
  14 │     targetPort: 9001
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-notifications-controller
────────────────────────────────────────



namespace-install4_30.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_30.yaml:10-15
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: tcp-redis
  12 │     port: 6379
  13 │     targetPort: 6379
  14 │   selector:
  15 └     app.kubernetes.io/name: argocd-redis
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_30.yaml:10-15
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: tcp-redis
  12 │     port: 6379
  13 │     targetPort: 6379
  14 │   selector:
  15 └     app.kubernetes.io/name: argocd-redis
────────────────────────────────────────



namespace-install4_31.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_31.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: server
  12 │     port: 8081
  13 │     protocol: TCP
  14 │     targetPort: 8081
  15 │   - name: metrics
  16 │     port: 8084
  17 │     protocol: TCP
  18 └     targetPort: 8084
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_31.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: server
  12 │     port: 8081
  13 │     protocol: TCP
  14 │     targetPort: 8081
  15 │   - name: metrics
  16 │     port: 8084
  17 │     protocol: TCP
  18 └     targetPort: 8084
  ..   
────────────────────────────────────────



namespace-install4_32.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_32.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: http
  12 │     port: 80
  13 │     protocol: TCP
  14 │     targetPort: 8080
  15 │   - name: https
  16 │     port: 443
  17 │     protocol: TCP
  18 └     targetPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_32.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: http
  12 │     port: 80
  13 │     protocol: TCP
  14 │     targetPort: 8080
  15 │   - name: https
  16 │     port: 443
  17 │     protocol: TCP
  18 └     targetPort: 8080
  ..   
────────────────────────────────────────



namespace-install4_33.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_33.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8083
  13 │     protocol: TCP
  14 │     targetPort: 8083
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_33.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8083
  13 │     protocol: TCP
  14 │     targetPort: 8083
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-server
────────────────────────────────────────



namespace-install4_35.yaml (kubernetes)
=======================================
Tests: 123 (SUCCESSES: 104, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 15, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install4_35.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:latest
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install4_35.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'copyutil' of Deployment 'argocd-dex-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 namespace-install4_35.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:latest
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install4_35.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:latest
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install4_35.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install4_35.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:latest
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install4_35.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install4_35.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:latest
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install4_35.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install4_35.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:latest
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install4_35.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install4_35.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:latest
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install4_35.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_35.yaml:10-100
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-dex-server
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-dex-server
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_35.yaml:10-100
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-dex-server
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-dex-server
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install4_35.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace-install4_35.yaml:18-100
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install4_35.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:latest
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install4_35.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



namespace-install4_36.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 105, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install4_36.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 namespace-install4_36.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install4_36.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install4_36.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install4_36.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install4_36.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install4_36.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_36.yaml:10-85
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-notifications-controller
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: argocd-notifications-controller
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_36.yaml:10-85
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-notifications-controller
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: argocd-notifications-controller
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install4_36.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install4_36.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



namespace-install4_37.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 107, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 9, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install4_37.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install4_37.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install4_37.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install4_37.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install4_37.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install4_37.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_37.yaml:10-55
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-redis
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-redis
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_37.yaml:10-55
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-redis
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-redis
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install4_37.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────



namespace-install4_41.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_41.yaml:6-15
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 8082
  11 │   podSelector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: argocd-application-controller
  14 │   policyTypes:
  15 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_41.yaml:6-15
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 8082
  11 │   podSelector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: argocd-application-controller
  14 │   policyTypes:
  15 └   - Ingress
────────────────────────────────────────



namespace-install4_42.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_42.yaml:6-18
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 7000
  11 │       protocol: TCP
  12 │     - port: 8080
  13 │       protocol: TCP
  14 └   podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_42.yaml:6-18
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 7000
  11 │       protocol: TCP
  12 │     - port: 8080
  13 │       protocol: TCP
  14 └   podSelector:
  ..   
────────────────────────────────────────



namespace-install4_43.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_43.yaml:6-25
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     ports:
  12 │     - port: 5556
  13 │       protocol: TCP
  14 └     - port: 5557
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_43.yaml:6-25
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     ports:
  12 │     - port: 5556
  13 │       protocol: TCP
  14 └     - port: 5557
  ..   
────────────────────────────────────────



namespace-install4_44.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_44.yaml:10-20
────────────────────────────────────────
  10 ┌   ingress:
  11 │   - from:
  12 │     - namespaceSelector: {}
  13 │     ports:
  14 │     - port: 9001
  15 │       protocol: TCP
  16 │   podSelector:
  17 │     matchLabels:
  18 └       app.kubernetes.io/name: argocd-notifications-controller
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_44.yaml:10-20
────────────────────────────────────────
  10 ┌   ingress:
  11 │   - from:
  12 │     - namespaceSelector: {}
  13 │     ports:
  14 │     - port: 9001
  15 │       protocol: TCP
  16 │   podSelector:
  17 │     matchLabels:
  18 └       app.kubernetes.io/name: argocd-notifications-controller
  ..   
────────────────────────────────────────



namespace-install4_45.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_45.yaml:6-31
────────────────────────────────────────
   6 ┌   egress:
   7 │   - ports:
   8 │     - port: 53
   9 │       protocol: UDP
  10 │     - port: 53
  11 │       protocol: TCP
  12 │   ingress:
  13 │   - from:
  14 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_45.yaml:6-31
────────────────────────────────────────
   6 ┌   egress:
   7 │   - ports:
   8 │     - port: 53
   9 │       protocol: UDP
  10 │     - port: 53
  11 │       protocol: TCP
  12 │   ingress:
  13 │   - from:
  14 └     - podSelector:
  ..   
────────────────────────────────────────



namespace-install4_46.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_46.yaml:6-31
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-application-controller
  14 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_46.yaml:6-31
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-application-controller
  14 └     - podSelector:
  ..   
────────────────────────────────────────



namespace-install4_47.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install4_47.yaml:6-12
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - {}
   8 │   podSelector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: argocd-server
  11 │   policyTypes:
  12 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install4_47.yaml:6-12
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - {}
   8 │   podSelector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: argocd-server
  11 │   policyTypes:
  12 └   - Ingress
────────────────────────────────────────



namespace-install4_7.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install4_7.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



namespace-install4_8.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install4_8.yaml:48-56
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   - configmaps
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



namespace-install4_9.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install4_9.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



namespace-install_12.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install_12.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: web
   8 │     port: 2746
   9 │     targetPort: 2746
  10 │   selector:
  11 └     app: argo-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install_12.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: web
   8 │     port: 2746
   9 │     targetPort: 2746
  10 │   selector:
  11 └     app: argo-server
────────────────────────────────────────



namespace-install_13.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install_13.yaml:6-12
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: metrics
   8 │     port: 9090
   9 │     protocol: TCP
  10 │     targetPort: 9090
  11 │   selector:
  12 └     app: workflow-controller
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install_13.yaml:6-12
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: metrics
   8 │     port: 9090
   9 │     protocol: TCP
  10 │     targetPort: 9090
  11 │   selector:
  12 └     app: workflow-controller
────────────────────────────────────────



namespace-install_14.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argo-server' of Deployment 'argo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argo-server' of Deployment 'argo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argo-server' of 'deployment' 'argo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argo-server' of Deployment 'argo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argo-server' of Deployment 'argo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install_14.yaml:6-40
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: argo-server
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: argo-server
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install_14.yaml:6-40
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: argo-server
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: argo-server
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argo-server" of deployment "argo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install_14.yaml:4
────────────────────────────────────────
   4 [   name: argo-server
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argo-server in deployment argo-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install_14.yaml:15-32
────────────────────────────────────────
  15 ┌       - args:
  16 │         - server
  17 │         - --namespaced
  18 │         image: argoproj/argocli:v2.12.5
  19 │         name: argo-server
  20 │         ports:
  21 │         - containerPort: 2746
  22 │           name: web
  23 └         readinessProbe:
  ..   
────────────────────────────────────────



namespace-install_15.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'workflow-controller' of 'deployment' 'workflow-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'workflow-controller' of Deployment 'workflow-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-install_15.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: workflow-controller
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: workflow-controller
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-install_15.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: workflow-controller
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: workflow-controller
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "workflow-controller" of deployment "workflow-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment workflow-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace-install_15.yaml:4
────────────────────────────────────────
   4 [   name: workflow-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container workflow-controller in deployment workflow-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespace-install_15.yaml:15-33
────────────────────────────────────────
  15 ┌       - args:
  16 │         - --configmap
  17 │         - workflow-controller-configmap
  18 │         - --executor-image
  19 │         - argoproj/argoexec:v2.12.5
  20 │         - --namespaced
  21 │         command:
  22 │         - workflow-controller
  23 └         image: argoproj/workflow-controller:v2.12.5
  ..   
────────────────────────────────────────



namespace-install_7.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'argo-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 namespace-install_7.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - pods/exec
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'argo-role' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 namespace-install_7.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - pods/exec
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argo-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install_7.yaml:64-69
────────────────────────────────────────
  64 ┌ - apiGroups:
  65 │   - ''
  66 │   resources:
  67 │   - secrets
  68 │   verbs:
  69 └   - get
────────────────────────────────────────



namespace-install_8.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0042 (MEDIUM): Role 'argo-server-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 namespace-install_8.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - pods
  25 │   - pods/exec
  26 │   - pods/log
  27 │   verbs:
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'argo-server-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 namespace-install_8.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - pods
  25 │   - pods/exec
  26 │   - pods/log
  27 │   verbs:
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'argo-server-role' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 namespace-install_8.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - pods
  25 │   - pods/exec
  26 │   - pods/log
  27 │   verbs:
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argo-server-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 namespace-install_8.yaml:14-20
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - secrets
  18 │   verbs:
  19 │   - get
  20 └   - create
────────────────────────────────────────



namespace-label-change.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-label-change.yaml:11-12
────────────────────────────────────────
  11 ┌   finalizers:
  12 └   - kubernetes
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-label-change.yaml:11-12
────────────────────────────────────────
  11 ┌   finalizers:
  12 └   - kubernetes
────────────────────────────────────────



namespace-label-change_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-label-change_1.yaml:12-13
────────────────────────────────────────
  12 ┌   finalizers:
  13 └   - kubernetes
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-label-change_1.yaml:12-13
────────────────────────────────────────
  12 ┌   finalizers:
  13 └   - kubernetes
────────────────────────────────────────



namespace-limit-range.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-limit-range.yaml:8-25
────────────────────────────────────────
   8 ┌   limits:
   9 │       # Default limit if not specified
  10 │     - default: 
  11 │         cpu: 200m
  12 │         memory: 256Mi
  13 │       # Default request if not specified  
  14 │       defaultRequest:
  15 │         cpu: 100m
  16 └         memory: 128Mi
  ..   
────────────────────────────────────────



namespace-limit-range1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-limit-range1.yaml:8-25
────────────────────────────────────────
   8 ┌   limits:
   9 │       # Default limit if not specified
  10 │     - default: 
  11 │         cpu: 200m
  12 │         memory: 256Mi
  13 │       # Default request if not specified  
  14 │       defaultRequest:
  15 │         cpu: 100m
  16 └         memory: 128Mi
  ..   
────────────────────────────────────────



namespace-limited.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-limited.yaml:11-12
────────────────────────────────────────
  11 ┌   finalizers:
  12 └   - kubernetes
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-limited.yaml:11-12
────────────────────────────────────────
  11 ┌   finalizers:
  12 └   - kubernetes
────────────────────────────────────────



namespace-limitranges.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-limitranges.yaml:7-25
────────────────────────────────────────
   7 ┌   limits:
   8 │   - default:
   9 │       cpu: 0.5
  10 │       memory: 512Mi
  11 │     defaultRequest:
  12 │       cpu: 0.25
  13 │       memory: 256Mi
  14 │     max:
  15 └       cpu: 1
  ..   
────────────────────────────────────────



namespace-limitranges_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-limitranges_1.yaml:7-25
────────────────────────────────────────
   7 ┌   limits:
   8 │   - default:
   9 │       cpu: 0.5
  10 │       memory: 512Mi
  11 │     defaultRequest:
  12 │       cpu: 0.25
  13 │       memory: 256Mi
  14 │     max:
  15 └       cpu: 1
  ..   
────────────────────────────────────────



namespace-limitranges_2.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-limitranges_2.yaml:7-25
────────────────────────────────────────
   7 ┌   limits:
   8 │   - default:
   9 │       cpu: 0.5
  10 │       memory: 512Mi
  11 │     defaultRequest:
  12 │       cpu: 0.25
  13 │       memory: 256Mi
  14 │     max:
  15 └       cpu: 1
  ..   
────────────────────────────────────────



namespace-quotas.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-quotas.yaml:7-13
────────────────────────────────────────
   7 ┌   hard:
   8 │     requests.cpu: '1'
   9 │     requests.memory: 1Gi
  10 │     limits.cpu: '2'
  11 │     limits.memory: 2Gi
  12 │     persistentvolumeclaims: '5'
  13 └     requests.storage: 10Gi
────────────────────────────────────────



namespace-quotas_1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-quotas_1.yaml:7-13
────────────────────────────────────────
   7 ┌   hard:
   8 │     requests.cpu: '2'
   9 │     requests.memory: 2Gi
  10 │     limits.cpu: '4'
  11 │     limits.memory: 4Gi
  12 │     persistentvolumeclaims: '5'
  13 └     requests.storage: 25Gi
────────────────────────────────────────



namespace-quotas_2.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-quotas_2.yaml:7-13
────────────────────────────────────────
   7 ┌   hard:
   8 │     requests.cpu: '4'
   9 │     requests.memory: 4Gi
  10 │     limits.cpu: '8'
  11 │     limits.memory: 8Gi
  12 │     persistentvolumeclaims: '10'
  13 └     requests.storage: 100Gi
────────────────────────────────────────



namespace-resource-quotas-double.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas-double.yaml:8-12
────────────────────────────────────────
   8 ┌   hard:
   9 │     requests.cpu: 2000m
  10 │     limits.cpu: 3600m
  11 │     requests.memory: 2.5Gi
  12 └     limits.memory: 5Gi
────────────────────────────────────────



namespace-resource-quotas-double1.yaml (kubernetes)
===================================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas-double1.yaml:8-12
────────────────────────────────────────
   8 ┌   hard:
   9 │     requests.cpu: 2000m
  10 │     limits.cpu: 3600m
  11 │     requests.memory: 2.5Gi
  12 └     limits.memory: 5Gi
────────────────────────────────────────



namespace-resource-quotas-double1_1.yaml (kubernetes)
=====================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas-double1_1.yaml:8-14
────────────────────────────────────────
   8 ┌   hard:
   9 │     pods: '20'
  10 │     configmaps: '20'
  11 │     secrets: '80'
  12 │     persistentvolumeclaims: '8'
  13 │     services: '20'
  14 └     services.loadbalancers: '4'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-resource-quotas-double1_1.yaml:9-14
────────────────────────────────────────
   9 ┌     pods: '20'
  10 │     configmaps: '20'
  11 │     secrets: '80'
  12 │     persistentvolumeclaims: '8'
  13 │     services: '20'
  14 └     services.loadbalancers: '4'
────────────────────────────────────────



namespace-resource-quotas-double_1.yaml (kubernetes)
====================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas-double_1.yaml:8-14
────────────────────────────────────────
   8 ┌   hard:
   9 │     pods: '20'
  10 │     configmaps: '20'
  11 │     secrets: '80'
  12 │     persistentvolumeclaims: '8'
  13 │     services: '20'
  14 └     services.loadbalancers: '4'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-resource-quotas-double_1.yaml:9-14
────────────────────────────────────────
   9 ┌     pods: '20'
  10 │     configmaps: '20'
  11 │     secrets: '80'
  12 │     persistentvolumeclaims: '8'
  13 │     services: '20'
  14 └     services.loadbalancers: '4'
────────────────────────────────────────



namespace-resource-quotas-slight.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas-slight.yaml:8-12
────────────────────────────────────────
   8 ┌   hard:
   9 │     requests.cpu: "1500m"    
  10 │     limits.cpu: "2500m"
  11 │     requests.memory: 1.5Gi
  12 └     limits.memory: 3.0Gi 
────────────────────────────────────────



namespace-resource-quotas-slight1.yaml (kubernetes)
===================================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas-slight1.yaml:8-12
────────────────────────────────────────
   8 ┌   hard:
   9 │     requests.cpu: "1500m"    
  10 │     limits.cpu: "2500m"
  11 │     requests.memory: 1.5Gi
  12 └     limits.memory: 3.0Gi 
────────────────────────────────────────



namespace-resource-quotas.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas.yaml:8-12
────────────────────────────────────────
   8 ┌   hard:
   9 │     requests.cpu: 1200m
  10 │     limits.cpu: 2000m
  11 │     requests.memory: 1.25Gi
  12 └     limits.memory: 2.5Gi
────────────────────────────────────────



namespace-resource-quotas1.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas1.yaml:8-12
────────────────────────────────────────
   8 ┌   hard:
   9 │     requests.cpu: 1200m
  10 │     limits.cpu: 2000m
  11 │     requests.memory: 1.25Gi
  12 └     limits.memory: 2.5Gi
────────────────────────────────────────



namespace-resource-quotas1_1.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas1_1.yaml:8-14
────────────────────────────────────────
   8 ┌   hard:
   9 │     pods: '10'
  10 │     configmaps: '10'
  11 │     secrets: '40'
  12 │     persistentvolumeclaims: '4'
  13 │     services: '10'
  14 └     services.loadbalancers: '2'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-resource-quotas1_1.yaml:9-14
────────────────────────────────────────
   9 ┌     pods: '10'
  10 │     configmaps: '10'
  11 │     secrets: '40'
  12 │     persistentvolumeclaims: '4'
  13 │     services: '10'
  14 └     services.loadbalancers: '2'
────────────────────────────────────────



namespace-resource-quotas_1.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-resource-quotas_1.yaml:8-14
────────────────────────────────────────
   8 ┌   hard:
   9 │     pods: '10'
  10 │     configmaps: '10'
  11 │     secrets: '40'
  12 │     persistentvolumeclaims: '4'
  13 │     services: '10'
  14 └     services.loadbalancers: '2'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-resource-quotas_1.yaml:9-14
────────────────────────────────────────
   9 ┌     pods: '10'
  10 │     configmaps: '10'
  11 │     secrets: '40'
  12 │     persistentvolumeclaims: '4'
  13 │     services: '10'
  14 └     services.loadbalancers: '2'
────────────────────────────────────────



namespace-selector-network-policy.yaml (kubernetes)
===================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace-selector-network-policy.yaml:6-18
────────────────────────────────────────
   6 ┌   podSelector: 
   7 │     matchLabels:
   8 │       role: secure 
   9 │   ingress:
  10 │   - from:
  11 │      - namespaceSelector:
  12 │         matchLabels:
  13 │           role: app 
  14 └        podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace-selector-network-policy.yaml:6-18
────────────────────────────────────────
   6 ┌   podSelector: 
   7 │     matchLabels:
   8 │       role: secure 
   9 │   ingress:
  10 │   - from:
  11 │      - namespaceSelector:
  12 │         matchLabels:
  13 │           role: app 
  14 └        podSelector:
  ..   
────────────────────────────────────────



namespace-with-anonymous-user.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'job-submitter' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 namespace-with-anonymous-user.yaml:6-23
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - endpoints
  11 │   - events
  12 │   - namespaces
  13 │   - nodes
  14 └   - persistentvolumeclaims
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'job-submitter' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 namespace-with-anonymous-user.yaml:6-23
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - endpoints
  11 │   - events
  12 │   - namespaces
  13 │   - nodes
  14 └   - persistentvolumeclaims
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'job-submitter' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 namespace-with-anonymous-user.yaml:6-23
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - endpoints
  11 │   - events
  12 │   - namespaces
  13 │   - nodes
  14 └   - persistentvolumeclaims
  ..   
────────────────────────────────────────



namespace1056.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'mynginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'mynginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'mynginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'mynginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'mynginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'mynginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'mynginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'mynginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'mynginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'mynginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'mynginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace1056.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace1056.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "mynginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mynginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace1056.yaml:4-7
────────────────────────────────────────
   4 ┌   name: mynginx
   5 │   labels:
   6 │     devops: '18'
   7 └     company: talent
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod mynginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mynginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace1056.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mynginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace1056.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────



namespace1057.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'mynginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'mynginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'mynginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'mynginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'mynginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'mynginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'mynginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'mynginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'mynginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'mynginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'mynginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace1057.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace1057.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "mynginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mynginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 namespace1057.yaml:4-7
────────────────────────────────────────
   4 ┌   name: mynginx
   5 │   labels:
   6 │     devops: '18'
   7 └     company: talent
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod mynginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mynginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace1057.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mynginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace1057.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginx
  11 │     image: nginx:1.19.1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────



namespace1060_1.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'myapp' in 'dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace1060_1.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace1060_1.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "myapp" in "dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace1060_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespace1060_1.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: nginx:latest
   9 └     name: main
────────────────────────────────────────



namespace1084.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace1084.yaml:8-9
────────────────────────────────────────
   8 ┌   finalizers:
   9 └     - kubernetes
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace1084.yaml:8-9
────────────────────────────────────────
   8 ┌   finalizers:
   9 └     - kubernetes
────────────────────────────────────────


